Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    LBRACE
    LOWERCASE
    NOTHING
    RBRACE
    UPPERCASE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print
Rule 5     instruccion -> println
Rule 6     instruccion -> definicion
Rule 7     instruccion -> asignacion
Rule 8     instruccion -> while
Rule 9     instruccion -> if
Rule 10    instruccion -> if_else
Rule 11    print -> PRINT LPAR print_args RPAR
Rule 12    println -> PRINTLN LPAR print_args RPAR
Rule 13    print_args -> print_args COMMA exp_logica
Rule 14    print_args -> exp_logica
Rule 15    definicion -> ID
Rule 16    asignacion -> ID EQUAL exp_logica
Rule 17    data_type -> INT64
Rule 18    data_type -> FLOAT64
Rule 19    data_type -> STR
Rule 20    data_type -> CHR
Rule 21    data_type -> BOOL
Rule 22    while -> WHILE exp_logica instrucciones END SEMICOL
Rule 23    if -> IF exp_logica instrucciones END SEMICOL
Rule 24    if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL
Rule 25    exp_logica -> exp_logica AND exp_logica
Rule 26    exp_logica -> exp_logica OR exp_logica
Rule 27    exp_logica -> NOT exp_logica
Rule 28    exp_logica -> exp_relacional
Rule 29    exp_relacional -> exp_relacional LESS exp_relacional
Rule 30    exp_relacional -> exp_relacional LESSEQ exp_relacional
Rule 31    exp_relacional -> exp_relacional GREATHER exp_relacional
Rule 32    exp_relacional -> exp_relacional GREATHEREQ exp_relacional
Rule 33    exp_relacional -> exp_relacional EQUALITY exp_relacional
Rule 34    exp_relacional -> exp_relacional DIFERENT exp_relacional
Rule 35    exp_relacional -> exp_aritmetica
Rule 36    exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica
Rule 37    exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica
Rule 38    exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica
Rule 39    exp_aritmetica -> exp_aritmetica DIV exp_aritmetica
Rule 40    exp_aritmetica -> exp_aritmetica MOD exp_aritmetica
Rule 41    exp_aritmetica -> exp_aritmetica POT exp_aritmetica
Rule 42    exp_aritmetica -> MINUS exp_aritmetica
Rule 43    exp_aritmetica -> LPAR exp_logica RPAR
Rule 44    exp_aritmetica -> NUMBERO
Rule 45    exp_aritmetica -> DECIMAL
Rule 46    exp_aritmetica -> CARACTER
Rule 47    exp_aritmetica -> CADENA
Rule 48    exp_aritmetica -> TRUE
Rule 49    exp_aritmetica -> FALSE
Rule 50    exp_aritmetica -> ID
Rule 51    exp_aritmetica -> TYPEOF LPAR exp_logica RPAR
Rule 52    exp_aritmetica -> STRING LPAR exp_logica RPAR
Rule 53    exp_aritmetica -> FLOAT LPAR exp_logica RPAR
Rule 54    exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR
Rule 55    exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR
Rule 56    exp_aritmetica -> SIN LPAR exp_logica RPAR
Rule 57    exp_aritmetica -> COS LPAR exp_logica RPAR
Rule 58    exp_aritmetica -> TAN LPAR exp_logica RPAR
Rule 59    exp_aritmetica -> LOG10 LPAR exp_logica RPAR
Rule 60    exp_aritmetica -> SQRT LPAR exp_logica RPAR

Terminals, with rules where they appear

AND                  : 25
BOOL                 : 21
CADENA               : 47
CARACTER             : 46
CHR                  : 20
COMMA                : 13 54 55
COS                  : 57
DECIMAL              : 45
DIFERENT             : 34
DIV                  : 39
ELSE                 : 24
END                  : 22 23 24
EQUAL                : 16
EQUALITY             : 33
FALSE                : 49
FLOAT                : 53
FLOAT64              : 18
GREATHER             : 31
GREATHEREQ           : 32
ID                   : 15 16 50
IF                   : 23 24
INT64                : 17
LBRACE               : 
LESS                 : 29
LESSEQ               : 30
LOG10                : 59
LOWERCASE            : 
LPAR                 : 11 12 43 51 52 53 54 55 56 57 58 59 60
MINUS                : 37 42
MOD                  : 40
NOT                  : 27
NOTHING              : 
NUMBERO              : 44
OR                   : 26
PARSE                : 55
PLUS                 : 36
POT                  : 41
PRINT                : 11
PRINTLN              : 12
RBRACE               : 
RPAR                 : 11 12 43 51 52 53 54 55 56 57 58 59 60
SEMICOL              : 22 23 24
SIN                  : 56
SQRT                 : 60
STR                  : 19
STRING               : 52
TAN                  : 58
TIMES                : 38
TRUE                 : 48
TRUNC                : 54
TYPEOF               : 51
UPPERCASE            : 
WHILE                : 22
error                : 

Nonterminals, with rules where they appear

asignacion           : 7
data_type            : 54 55
definicion           : 6
exp_aritmetica       : 35 36 36 37 37 38 38 39 39 40 40 41 41 42
exp_logica           : 13 14 16 22 23 24 25 25 26 26 27 43 51 52 53 54 55 56 57 58 59 60
exp_relacional       : 28 29 29 30 30 31 31 32 32 33 33 34 34
if                   : 9
if_else              : 10
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 22 23 24 24
print                : 4
print_args           : 11 12 13
println              : 5
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR print_args RPAR
    (12) println -> . PRINTLN LPAR print_args RPAR
    (15) definicion -> . ID
    (16) asignacion -> . ID EQUAL exp_logica
    (22) while -> . WHILE exp_logica instrucciones END SEMICOL
    (23) if -> . IF exp_logica instrucciones END SEMICOL
    (24) if_else -> . IF exp_logica instrucciones ELSE instrucciones END SEMICOL

    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR print_args RPAR
    (12) println -> . PRINTLN LPAR print_args RPAR
    (15) definicion -> . ID
    (16) asignacion -> . ID EQUAL exp_logica
    (22) while -> . WHILE exp_logica instrucciones END SEMICOL
    (23) if -> . IF exp_logica instrucciones END SEMICOL
    (24) if_else -> . IF exp_logica instrucciones ELSE instrucciones END SEMICOL

    $end            reduce using rule 1 (init -> instrucciones .)
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instruccion                    shift and go to state 16
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 3

    (3) instrucciones -> instruccion .

    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    PRINTLN         reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    END             reduce using rule 3 (instrucciones -> instruccion .)
    ELSE            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print .

    PRINT           reduce using rule 4 (instruccion -> print .)
    PRINTLN         reduce using rule 4 (instruccion -> print .)
    ID              reduce using rule 4 (instruccion -> print .)
    WHILE           reduce using rule 4 (instruccion -> print .)
    IF              reduce using rule 4 (instruccion -> print .)
    $end            reduce using rule 4 (instruccion -> print .)
    END             reduce using rule 4 (instruccion -> print .)
    ELSE            reduce using rule 4 (instruccion -> print .)


state 5

    (5) instruccion -> println .

    PRINT           reduce using rule 5 (instruccion -> println .)
    PRINTLN         reduce using rule 5 (instruccion -> println .)
    ID              reduce using rule 5 (instruccion -> println .)
    WHILE           reduce using rule 5 (instruccion -> println .)
    IF              reduce using rule 5 (instruccion -> println .)
    $end            reduce using rule 5 (instruccion -> println .)
    END             reduce using rule 5 (instruccion -> println .)
    ELSE            reduce using rule 5 (instruccion -> println .)


state 6

    (6) instruccion -> definicion .

    PRINT           reduce using rule 6 (instruccion -> definicion .)
    PRINTLN         reduce using rule 6 (instruccion -> definicion .)
    ID              reduce using rule 6 (instruccion -> definicion .)
    WHILE           reduce using rule 6 (instruccion -> definicion .)
    IF              reduce using rule 6 (instruccion -> definicion .)
    $end            reduce using rule 6 (instruccion -> definicion .)
    END             reduce using rule 6 (instruccion -> definicion .)
    ELSE            reduce using rule 6 (instruccion -> definicion .)


state 7

    (7) instruccion -> asignacion .

    PRINT           reduce using rule 7 (instruccion -> asignacion .)
    PRINTLN         reduce using rule 7 (instruccion -> asignacion .)
    ID              reduce using rule 7 (instruccion -> asignacion .)
    WHILE           reduce using rule 7 (instruccion -> asignacion .)
    IF              reduce using rule 7 (instruccion -> asignacion .)
    $end            reduce using rule 7 (instruccion -> asignacion .)
    END             reduce using rule 7 (instruccion -> asignacion .)
    ELSE            reduce using rule 7 (instruccion -> asignacion .)


state 8

    (8) instruccion -> while .

    PRINT           reduce using rule 8 (instruccion -> while .)
    PRINTLN         reduce using rule 8 (instruccion -> while .)
    ID              reduce using rule 8 (instruccion -> while .)
    WHILE           reduce using rule 8 (instruccion -> while .)
    IF              reduce using rule 8 (instruccion -> while .)
    $end            reduce using rule 8 (instruccion -> while .)
    END             reduce using rule 8 (instruccion -> while .)
    ELSE            reduce using rule 8 (instruccion -> while .)


state 9

    (9) instruccion -> if .

    PRINT           reduce using rule 9 (instruccion -> if .)
    PRINTLN         reduce using rule 9 (instruccion -> if .)
    ID              reduce using rule 9 (instruccion -> if .)
    WHILE           reduce using rule 9 (instruccion -> if .)
    IF              reduce using rule 9 (instruccion -> if .)
    $end            reduce using rule 9 (instruccion -> if .)
    END             reduce using rule 9 (instruccion -> if .)
    ELSE            reduce using rule 9 (instruccion -> if .)


state 10

    (10) instruccion -> if_else .

    PRINT           reduce using rule 10 (instruccion -> if_else .)
    PRINTLN         reduce using rule 10 (instruccion -> if_else .)
    ID              reduce using rule 10 (instruccion -> if_else .)
    WHILE           reduce using rule 10 (instruccion -> if_else .)
    IF              reduce using rule 10 (instruccion -> if_else .)
    $end            reduce using rule 10 (instruccion -> if_else .)
    END             reduce using rule 10 (instruccion -> if_else .)
    ELSE            reduce using rule 10 (instruccion -> if_else .)


state 11

    (11) print -> PRINT . LPAR print_args RPAR

    LPAR            shift and go to state 17


state 12

    (12) println -> PRINTLN . LPAR print_args RPAR

    LPAR            shift and go to state 18


state 13

    (15) definicion -> ID .
    (16) asignacion -> ID . EQUAL exp_logica

    PRINT           reduce using rule 15 (definicion -> ID .)
    PRINTLN         reduce using rule 15 (definicion -> ID .)
    ID              reduce using rule 15 (definicion -> ID .)
    WHILE           reduce using rule 15 (definicion -> ID .)
    IF              reduce using rule 15 (definicion -> ID .)
    $end            reduce using rule 15 (definicion -> ID .)
    END             reduce using rule 15 (definicion -> ID .)
    ELSE            reduce using rule 15 (definicion -> ID .)
    EQUAL           shift and go to state 19


state 14

    (22) while -> WHILE . exp_logica instrucciones END SEMICOL
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 20
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 15

    (23) if -> IF . exp_logica instrucciones END SEMICOL
    (24) if_else -> IF . exp_logica instrucciones ELSE instrucciones END SEMICOL
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 43
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 16

    (2) instrucciones -> instrucciones instruccion .

    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINTLN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    END             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 17

    (11) print -> PRINT LPAR . print_args RPAR
    (13) print_args -> . print_args COMMA exp_logica
    (14) print_args -> . exp_logica
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    print_args                     shift and go to state 44
    exp_logica                     shift and go to state 45
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 18

    (12) println -> PRINTLN LPAR . print_args RPAR
    (13) print_args -> . print_args COMMA exp_logica
    (14) print_args -> . exp_logica
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    print_args                     shift and go to state 46
    exp_logica                     shift and go to state 45
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 19

    (16) asignacion -> ID EQUAL . exp_logica
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 47
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 20

    (22) while -> WHILE exp_logica . instrucciones END SEMICOL
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR print_args RPAR
    (12) println -> . PRINTLN LPAR print_args RPAR
    (15) definicion -> . ID
    (16) asignacion -> . ID EQUAL exp_logica
    (22) while -> . WHILE exp_logica instrucciones END SEMICOL
    (23) if -> . IF exp_logica instrucciones END SEMICOL
    (24) if_else -> . IF exp_logica instrucciones ELSE instrucciones END SEMICOL

    AND             shift and go to state 49
    OR              shift and go to state 50
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instrucciones                  shift and go to state 48
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 21

    (27) exp_logica -> NOT . exp_logica
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 51
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 22

    (28) exp_logica -> exp_relacional .
    (29) exp_relacional -> exp_relacional . LESS exp_relacional
    (30) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (31) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (32) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (33) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (34) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    AND             reduce using rule 28 (exp_logica -> exp_relacional .)
    OR              reduce using rule 28 (exp_logica -> exp_relacional .)
    PRINT           reduce using rule 28 (exp_logica -> exp_relacional .)
    PRINTLN         reduce using rule 28 (exp_logica -> exp_relacional .)
    ID              reduce using rule 28 (exp_logica -> exp_relacional .)
    WHILE           reduce using rule 28 (exp_logica -> exp_relacional .)
    IF              reduce using rule 28 (exp_logica -> exp_relacional .)
    RPAR            reduce using rule 28 (exp_logica -> exp_relacional .)
    COMMA           reduce using rule 28 (exp_logica -> exp_relacional .)
    $end            reduce using rule 28 (exp_logica -> exp_relacional .)
    END             reduce using rule 28 (exp_logica -> exp_relacional .)
    ELSE            reduce using rule 28 (exp_logica -> exp_relacional .)
    LESS            shift and go to state 52
    LESSEQ          shift and go to state 53
    GREATHER        shift and go to state 54
    GREATHEREQ      shift and go to state 55
    EQUALITY        shift and go to state 56
    DIFERENT        shift and go to state 57


state 23

    (35) exp_relacional -> exp_aritmetica .
    (36) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (37) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (38) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (39) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    LESS            reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    LESSEQ          reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    GREATHER        reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    GREATHEREQ      reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    EQUALITY        reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    DIFERENT        reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    AND             reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    OR              reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    PRINT           reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    PRINTLN         reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    ID              reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    WHILE           reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    IF              reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    RPAR            reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    COMMA           reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    $end            reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    END             reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    ELSE            reduce using rule 35 (exp_relacional -> exp_aritmetica .)
    PLUS            shift and go to state 58
    MINUS           shift and go to state 59
    TIMES           shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    POT             shift and go to state 63


state 24

    (42) exp_aritmetica -> MINUS . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_aritmetica                 shift and go to state 64

state 25

    (43) exp_aritmetica -> LPAR . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 65
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 26

    (44) exp_aritmetica -> NUMBERO .

    PLUS            reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    MINUS           reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    TIMES           reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    DIV             reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    MOD             reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    POT             reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    LESS            reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    LESSEQ          reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    GREATHER        reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    GREATHEREQ      reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    EQUALITY        reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    DIFERENT        reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    AND             reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    OR              reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    PRINT           reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    PRINTLN         reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    ID              reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    WHILE           reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    IF              reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    RPAR            reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    COMMA           reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    $end            reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    END             reduce using rule 44 (exp_aritmetica -> NUMBERO .)
    ELSE            reduce using rule 44 (exp_aritmetica -> NUMBERO .)


state 27

    (45) exp_aritmetica -> DECIMAL .

    PLUS            reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    MINUS           reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    TIMES           reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    DIV             reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    MOD             reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    POT             reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    LESS            reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    LESSEQ          reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    GREATHER        reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    GREATHEREQ      reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    EQUALITY        reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    DIFERENT        reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    AND             reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    OR              reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    PRINT           reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    PRINTLN         reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    ID              reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    WHILE           reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    IF              reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    RPAR            reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    COMMA           reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    $end            reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    END             reduce using rule 45 (exp_aritmetica -> DECIMAL .)
    ELSE            reduce using rule 45 (exp_aritmetica -> DECIMAL .)


state 28

    (46) exp_aritmetica -> CARACTER .

    PLUS            reduce using rule 46 (exp_aritmetica -> CARACTER .)
    MINUS           reduce using rule 46 (exp_aritmetica -> CARACTER .)
    TIMES           reduce using rule 46 (exp_aritmetica -> CARACTER .)
    DIV             reduce using rule 46 (exp_aritmetica -> CARACTER .)
    MOD             reduce using rule 46 (exp_aritmetica -> CARACTER .)
    POT             reduce using rule 46 (exp_aritmetica -> CARACTER .)
    LESS            reduce using rule 46 (exp_aritmetica -> CARACTER .)
    LESSEQ          reduce using rule 46 (exp_aritmetica -> CARACTER .)
    GREATHER        reduce using rule 46 (exp_aritmetica -> CARACTER .)
    GREATHEREQ      reduce using rule 46 (exp_aritmetica -> CARACTER .)
    EQUALITY        reduce using rule 46 (exp_aritmetica -> CARACTER .)
    DIFERENT        reduce using rule 46 (exp_aritmetica -> CARACTER .)
    AND             reduce using rule 46 (exp_aritmetica -> CARACTER .)
    OR              reduce using rule 46 (exp_aritmetica -> CARACTER .)
    PRINT           reduce using rule 46 (exp_aritmetica -> CARACTER .)
    PRINTLN         reduce using rule 46 (exp_aritmetica -> CARACTER .)
    ID              reduce using rule 46 (exp_aritmetica -> CARACTER .)
    WHILE           reduce using rule 46 (exp_aritmetica -> CARACTER .)
    IF              reduce using rule 46 (exp_aritmetica -> CARACTER .)
    RPAR            reduce using rule 46 (exp_aritmetica -> CARACTER .)
    COMMA           reduce using rule 46 (exp_aritmetica -> CARACTER .)
    $end            reduce using rule 46 (exp_aritmetica -> CARACTER .)
    END             reduce using rule 46 (exp_aritmetica -> CARACTER .)
    ELSE            reduce using rule 46 (exp_aritmetica -> CARACTER .)


state 29

    (47) exp_aritmetica -> CADENA .

    PLUS            reduce using rule 47 (exp_aritmetica -> CADENA .)
    MINUS           reduce using rule 47 (exp_aritmetica -> CADENA .)
    TIMES           reduce using rule 47 (exp_aritmetica -> CADENA .)
    DIV             reduce using rule 47 (exp_aritmetica -> CADENA .)
    MOD             reduce using rule 47 (exp_aritmetica -> CADENA .)
    POT             reduce using rule 47 (exp_aritmetica -> CADENA .)
    LESS            reduce using rule 47 (exp_aritmetica -> CADENA .)
    LESSEQ          reduce using rule 47 (exp_aritmetica -> CADENA .)
    GREATHER        reduce using rule 47 (exp_aritmetica -> CADENA .)
    GREATHEREQ      reduce using rule 47 (exp_aritmetica -> CADENA .)
    EQUALITY        reduce using rule 47 (exp_aritmetica -> CADENA .)
    DIFERENT        reduce using rule 47 (exp_aritmetica -> CADENA .)
    AND             reduce using rule 47 (exp_aritmetica -> CADENA .)
    OR              reduce using rule 47 (exp_aritmetica -> CADENA .)
    PRINT           reduce using rule 47 (exp_aritmetica -> CADENA .)
    PRINTLN         reduce using rule 47 (exp_aritmetica -> CADENA .)
    ID              reduce using rule 47 (exp_aritmetica -> CADENA .)
    WHILE           reduce using rule 47 (exp_aritmetica -> CADENA .)
    IF              reduce using rule 47 (exp_aritmetica -> CADENA .)
    RPAR            reduce using rule 47 (exp_aritmetica -> CADENA .)
    COMMA           reduce using rule 47 (exp_aritmetica -> CADENA .)
    $end            reduce using rule 47 (exp_aritmetica -> CADENA .)
    END             reduce using rule 47 (exp_aritmetica -> CADENA .)
    ELSE            reduce using rule 47 (exp_aritmetica -> CADENA .)


state 30

    (48) exp_aritmetica -> TRUE .

    PLUS            reduce using rule 48 (exp_aritmetica -> TRUE .)
    MINUS           reduce using rule 48 (exp_aritmetica -> TRUE .)
    TIMES           reduce using rule 48 (exp_aritmetica -> TRUE .)
    DIV             reduce using rule 48 (exp_aritmetica -> TRUE .)
    MOD             reduce using rule 48 (exp_aritmetica -> TRUE .)
    POT             reduce using rule 48 (exp_aritmetica -> TRUE .)
    LESS            reduce using rule 48 (exp_aritmetica -> TRUE .)
    LESSEQ          reduce using rule 48 (exp_aritmetica -> TRUE .)
    GREATHER        reduce using rule 48 (exp_aritmetica -> TRUE .)
    GREATHEREQ      reduce using rule 48 (exp_aritmetica -> TRUE .)
    EQUALITY        reduce using rule 48 (exp_aritmetica -> TRUE .)
    DIFERENT        reduce using rule 48 (exp_aritmetica -> TRUE .)
    AND             reduce using rule 48 (exp_aritmetica -> TRUE .)
    OR              reduce using rule 48 (exp_aritmetica -> TRUE .)
    PRINT           reduce using rule 48 (exp_aritmetica -> TRUE .)
    PRINTLN         reduce using rule 48 (exp_aritmetica -> TRUE .)
    ID              reduce using rule 48 (exp_aritmetica -> TRUE .)
    WHILE           reduce using rule 48 (exp_aritmetica -> TRUE .)
    IF              reduce using rule 48 (exp_aritmetica -> TRUE .)
    RPAR            reduce using rule 48 (exp_aritmetica -> TRUE .)
    COMMA           reduce using rule 48 (exp_aritmetica -> TRUE .)
    $end            reduce using rule 48 (exp_aritmetica -> TRUE .)
    END             reduce using rule 48 (exp_aritmetica -> TRUE .)
    ELSE            reduce using rule 48 (exp_aritmetica -> TRUE .)


state 31

    (49) exp_aritmetica -> FALSE .

    PLUS            reduce using rule 49 (exp_aritmetica -> FALSE .)
    MINUS           reduce using rule 49 (exp_aritmetica -> FALSE .)
    TIMES           reduce using rule 49 (exp_aritmetica -> FALSE .)
    DIV             reduce using rule 49 (exp_aritmetica -> FALSE .)
    MOD             reduce using rule 49 (exp_aritmetica -> FALSE .)
    POT             reduce using rule 49 (exp_aritmetica -> FALSE .)
    LESS            reduce using rule 49 (exp_aritmetica -> FALSE .)
    LESSEQ          reduce using rule 49 (exp_aritmetica -> FALSE .)
    GREATHER        reduce using rule 49 (exp_aritmetica -> FALSE .)
    GREATHEREQ      reduce using rule 49 (exp_aritmetica -> FALSE .)
    EQUALITY        reduce using rule 49 (exp_aritmetica -> FALSE .)
    DIFERENT        reduce using rule 49 (exp_aritmetica -> FALSE .)
    AND             reduce using rule 49 (exp_aritmetica -> FALSE .)
    OR              reduce using rule 49 (exp_aritmetica -> FALSE .)
    PRINT           reduce using rule 49 (exp_aritmetica -> FALSE .)
    PRINTLN         reduce using rule 49 (exp_aritmetica -> FALSE .)
    ID              reduce using rule 49 (exp_aritmetica -> FALSE .)
    WHILE           reduce using rule 49 (exp_aritmetica -> FALSE .)
    IF              reduce using rule 49 (exp_aritmetica -> FALSE .)
    RPAR            reduce using rule 49 (exp_aritmetica -> FALSE .)
    COMMA           reduce using rule 49 (exp_aritmetica -> FALSE .)
    $end            reduce using rule 49 (exp_aritmetica -> FALSE .)
    END             reduce using rule 49 (exp_aritmetica -> FALSE .)
    ELSE            reduce using rule 49 (exp_aritmetica -> FALSE .)


state 32

    (50) exp_aritmetica -> ID .

    PLUS            reduce using rule 50 (exp_aritmetica -> ID .)
    MINUS           reduce using rule 50 (exp_aritmetica -> ID .)
    TIMES           reduce using rule 50 (exp_aritmetica -> ID .)
    DIV             reduce using rule 50 (exp_aritmetica -> ID .)
    MOD             reduce using rule 50 (exp_aritmetica -> ID .)
    POT             reduce using rule 50 (exp_aritmetica -> ID .)
    LESS            reduce using rule 50 (exp_aritmetica -> ID .)
    LESSEQ          reduce using rule 50 (exp_aritmetica -> ID .)
    GREATHER        reduce using rule 50 (exp_aritmetica -> ID .)
    GREATHEREQ      reduce using rule 50 (exp_aritmetica -> ID .)
    EQUALITY        reduce using rule 50 (exp_aritmetica -> ID .)
    DIFERENT        reduce using rule 50 (exp_aritmetica -> ID .)
    AND             reduce using rule 50 (exp_aritmetica -> ID .)
    OR              reduce using rule 50 (exp_aritmetica -> ID .)
    PRINT           reduce using rule 50 (exp_aritmetica -> ID .)
    PRINTLN         reduce using rule 50 (exp_aritmetica -> ID .)
    ID              reduce using rule 50 (exp_aritmetica -> ID .)
    WHILE           reduce using rule 50 (exp_aritmetica -> ID .)
    IF              reduce using rule 50 (exp_aritmetica -> ID .)
    RPAR            reduce using rule 50 (exp_aritmetica -> ID .)
    COMMA           reduce using rule 50 (exp_aritmetica -> ID .)
    $end            reduce using rule 50 (exp_aritmetica -> ID .)
    END             reduce using rule 50 (exp_aritmetica -> ID .)
    ELSE            reduce using rule 50 (exp_aritmetica -> ID .)


state 33

    (51) exp_aritmetica -> TYPEOF . LPAR exp_logica RPAR

    LPAR            shift and go to state 66


state 34

    (52) exp_aritmetica -> STRING . LPAR exp_logica RPAR

    LPAR            shift and go to state 67


state 35

    (53) exp_aritmetica -> FLOAT . LPAR exp_logica RPAR

    LPAR            shift and go to state 68


state 36

    (54) exp_aritmetica -> TRUNC . LPAR data_type COMMA exp_logica RPAR

    LPAR            shift and go to state 69


state 37

    (55) exp_aritmetica -> PARSE . LPAR data_type COMMA exp_logica RPAR

    LPAR            shift and go to state 70


state 38

    (56) exp_aritmetica -> SIN . LPAR exp_logica RPAR

    LPAR            shift and go to state 71


state 39

    (57) exp_aritmetica -> COS . LPAR exp_logica RPAR

    LPAR            shift and go to state 72


state 40

    (58) exp_aritmetica -> TAN . LPAR exp_logica RPAR

    LPAR            shift and go to state 73


state 41

    (59) exp_aritmetica -> LOG10 . LPAR exp_logica RPAR

    LPAR            shift and go to state 74


state 42

    (60) exp_aritmetica -> SQRT . LPAR exp_logica RPAR

    LPAR            shift and go to state 75


state 43

    (23) if -> IF exp_logica . instrucciones END SEMICOL
    (24) if_else -> IF exp_logica . instrucciones ELSE instrucciones END SEMICOL
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR print_args RPAR
    (12) println -> . PRINTLN LPAR print_args RPAR
    (15) definicion -> . ID
    (16) asignacion -> . ID EQUAL exp_logica
    (22) while -> . WHILE exp_logica instrucciones END SEMICOL
    (23) if -> . IF exp_logica instrucciones END SEMICOL
    (24) if_else -> . IF exp_logica instrucciones ELSE instrucciones END SEMICOL

    AND             shift and go to state 49
    OR              shift and go to state 50
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instrucciones                  shift and go to state 76
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 44

    (11) print -> PRINT LPAR print_args . RPAR
    (13) print_args -> print_args . COMMA exp_logica

    RPAR            shift and go to state 77
    COMMA           shift and go to state 78


state 45

    (14) print_args -> exp_logica .
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            reduce using rule 14 (print_args -> exp_logica .)
    COMMA           reduce using rule 14 (print_args -> exp_logica .)
    AND             shift and go to state 49
    OR              shift and go to state 50


state 46

    (12) println -> PRINTLN LPAR print_args . RPAR
    (13) print_args -> print_args . COMMA exp_logica

    RPAR            shift and go to state 79
    COMMA           shift and go to state 78


state 47

    (16) asignacion -> ID EQUAL exp_logica .
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    PRINT           reduce using rule 16 (asignacion -> ID EQUAL exp_logica .)
    PRINTLN         reduce using rule 16 (asignacion -> ID EQUAL exp_logica .)
    ID              reduce using rule 16 (asignacion -> ID EQUAL exp_logica .)
    WHILE           reduce using rule 16 (asignacion -> ID EQUAL exp_logica .)
    IF              reduce using rule 16 (asignacion -> ID EQUAL exp_logica .)
    $end            reduce using rule 16 (asignacion -> ID EQUAL exp_logica .)
    END             reduce using rule 16 (asignacion -> ID EQUAL exp_logica .)
    ELSE            reduce using rule 16 (asignacion -> ID EQUAL exp_logica .)
    AND             shift and go to state 49
    OR              shift and go to state 50


state 48

    (22) while -> WHILE exp_logica instrucciones . END SEMICOL
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR print_args RPAR
    (12) println -> . PRINTLN LPAR print_args RPAR
    (15) definicion -> . ID
    (16) asignacion -> . ID EQUAL exp_logica
    (22) while -> . WHILE exp_logica instrucciones END SEMICOL
    (23) if -> . IF exp_logica instrucciones END SEMICOL
    (24) if_else -> . IF exp_logica instrucciones ELSE instrucciones END SEMICOL

    END             shift and go to state 80
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instruccion                    shift and go to state 16
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 49

    (25) exp_logica -> exp_logica AND . exp_logica
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 81
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 50

    (26) exp_logica -> exp_logica OR . exp_logica
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 82
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 51

    (27) exp_logica -> NOT exp_logica .
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    AND             reduce using rule 27 (exp_logica -> NOT exp_logica .)
    OR              reduce using rule 27 (exp_logica -> NOT exp_logica .)
    PRINT           reduce using rule 27 (exp_logica -> NOT exp_logica .)
    PRINTLN         reduce using rule 27 (exp_logica -> NOT exp_logica .)
    ID              reduce using rule 27 (exp_logica -> NOT exp_logica .)
    WHILE           reduce using rule 27 (exp_logica -> NOT exp_logica .)
    IF              reduce using rule 27 (exp_logica -> NOT exp_logica .)
    RPAR            reduce using rule 27 (exp_logica -> NOT exp_logica .)
    COMMA           reduce using rule 27 (exp_logica -> NOT exp_logica .)
    $end            reduce using rule 27 (exp_logica -> NOT exp_logica .)
    END             reduce using rule 27 (exp_logica -> NOT exp_logica .)
    ELSE            reduce using rule 27 (exp_logica -> NOT exp_logica .)

  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]


state 52

    (29) exp_relacional -> exp_relacional LESS . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_relacional                 shift and go to state 83
    exp_aritmetica                 shift and go to state 23

state 53

    (30) exp_relacional -> exp_relacional LESSEQ . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_relacional                 shift and go to state 84
    exp_aritmetica                 shift and go to state 23

state 54

    (31) exp_relacional -> exp_relacional GREATHER . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_relacional                 shift and go to state 85
    exp_aritmetica                 shift and go to state 23

state 55

    (32) exp_relacional -> exp_relacional GREATHEREQ . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_relacional                 shift and go to state 86
    exp_aritmetica                 shift and go to state 23

state 56

    (33) exp_relacional -> exp_relacional EQUALITY . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_relacional                 shift and go to state 87
    exp_aritmetica                 shift and go to state 23

state 57

    (34) exp_relacional -> exp_relacional DIFERENT . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_relacional                 shift and go to state 88
    exp_aritmetica                 shift and go to state 23

state 58

    (36) exp_aritmetica -> exp_aritmetica PLUS . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_aritmetica                 shift and go to state 89

state 59

    (37) exp_aritmetica -> exp_aritmetica MINUS . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_aritmetica                 shift and go to state 90

state 60

    (38) exp_aritmetica -> exp_aritmetica TIMES . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_aritmetica                 shift and go to state 91

state 61

    (39) exp_aritmetica -> exp_aritmetica DIV . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_aritmetica                 shift and go to state 92

state 62

    (40) exp_aritmetica -> exp_aritmetica MOD . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_aritmetica                 shift and go to state 93

state 63

    (41) exp_aritmetica -> exp_aritmetica POT . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_aritmetica                 shift and go to state 94

state 64

    (42) exp_aritmetica -> MINUS exp_aritmetica .
    (36) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (37) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (38) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (39) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    MINUS           reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    TIMES           reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    DIV             reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    MOD             reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    POT             reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    LESS            reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    LESSEQ          reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    GREATHER        reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    EQUALITY        reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    DIFERENT        reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    AND             reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    OR              reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    PRINT           reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    PRINTLN         reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    ID              reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    WHILE           reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    IF              reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    RPAR            reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    COMMA           reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    $end            reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    END             reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)
    ELSE            reduce using rule 42 (exp_aritmetica -> MINUS exp_aritmetica .)

  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! POT             [ shift and go to state 63 ]


state 65

    (43) exp_aritmetica -> LPAR exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 95
    AND             shift and go to state 49
    OR              shift and go to state 50


state 66

    (51) exp_aritmetica -> TYPEOF LPAR . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 96
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 67

    (52) exp_aritmetica -> STRING LPAR . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 97
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 68

    (53) exp_aritmetica -> FLOAT LPAR . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 98
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 69

    (54) exp_aritmetica -> TRUNC LPAR . data_type COMMA exp_logica RPAR
    (17) data_type -> . INT64
    (18) data_type -> . FLOAT64
    (19) data_type -> . STR
    (20) data_type -> . CHR
    (21) data_type -> . BOOL

    INT64           shift and go to state 100
    FLOAT64         shift and go to state 101
    STR             shift and go to state 102
    CHR             shift and go to state 103
    BOOL            shift and go to state 104

    data_type                      shift and go to state 99

state 70

    (55) exp_aritmetica -> PARSE LPAR . data_type COMMA exp_logica RPAR
    (17) data_type -> . INT64
    (18) data_type -> . FLOAT64
    (19) data_type -> . STR
    (20) data_type -> . CHR
    (21) data_type -> . BOOL

    INT64           shift and go to state 100
    FLOAT64         shift and go to state 101
    STR             shift and go to state 102
    CHR             shift and go to state 103
    BOOL            shift and go to state 104

    data_type                      shift and go to state 105

state 71

    (56) exp_aritmetica -> SIN LPAR . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 106
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 72

    (57) exp_aritmetica -> COS LPAR . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 107
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 73

    (58) exp_aritmetica -> TAN LPAR . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 108
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 74

    (59) exp_aritmetica -> LOG10 LPAR . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 109
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 75

    (60) exp_aritmetica -> SQRT LPAR . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 110
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 76

    (23) if -> IF exp_logica instrucciones . END SEMICOL
    (24) if_else -> IF exp_logica instrucciones . ELSE instrucciones END SEMICOL
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR print_args RPAR
    (12) println -> . PRINTLN LPAR print_args RPAR
    (15) definicion -> . ID
    (16) asignacion -> . ID EQUAL exp_logica
    (22) while -> . WHILE exp_logica instrucciones END SEMICOL
    (23) if -> . IF exp_logica instrucciones END SEMICOL
    (24) if_else -> . IF exp_logica instrucciones ELSE instrucciones END SEMICOL

    END             shift and go to state 111
    ELSE            shift and go to state 112
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instruccion                    shift and go to state 16
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 77

    (11) print -> PRINT LPAR print_args RPAR .

    PRINT           reduce using rule 11 (print -> PRINT LPAR print_args RPAR .)
    PRINTLN         reduce using rule 11 (print -> PRINT LPAR print_args RPAR .)
    ID              reduce using rule 11 (print -> PRINT LPAR print_args RPAR .)
    WHILE           reduce using rule 11 (print -> PRINT LPAR print_args RPAR .)
    IF              reduce using rule 11 (print -> PRINT LPAR print_args RPAR .)
    $end            reduce using rule 11 (print -> PRINT LPAR print_args RPAR .)
    END             reduce using rule 11 (print -> PRINT LPAR print_args RPAR .)
    ELSE            reduce using rule 11 (print -> PRINT LPAR print_args RPAR .)


state 78

    (13) print_args -> print_args COMMA . exp_logica
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 113
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 79

    (12) println -> PRINTLN LPAR print_args RPAR .

    PRINT           reduce using rule 12 (println -> PRINTLN LPAR print_args RPAR .)
    PRINTLN         reduce using rule 12 (println -> PRINTLN LPAR print_args RPAR .)
    ID              reduce using rule 12 (println -> PRINTLN LPAR print_args RPAR .)
    WHILE           reduce using rule 12 (println -> PRINTLN LPAR print_args RPAR .)
    IF              reduce using rule 12 (println -> PRINTLN LPAR print_args RPAR .)
    $end            reduce using rule 12 (println -> PRINTLN LPAR print_args RPAR .)
    END             reduce using rule 12 (println -> PRINTLN LPAR print_args RPAR .)
    ELSE            reduce using rule 12 (println -> PRINTLN LPAR print_args RPAR .)


state 80

    (22) while -> WHILE exp_logica instrucciones END . SEMICOL

    SEMICOL         shift and go to state 114


state 81

    (25) exp_logica -> exp_logica AND exp_logica .
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    AND             reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    PRINT           reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    PRINTLN         reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    ID              reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    WHILE           reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    IF              reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    RPAR            reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    COMMA           reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    $end            reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    END             reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    ELSE            reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .)
    OR              shift and go to state 50

  ! OR              [ reduce using rule 25 (exp_logica -> exp_logica AND exp_logica .) ]
  ! AND             [ shift and go to state 49 ]


state 82

    (26) exp_logica -> exp_logica OR exp_logica .
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    AND             reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    OR              reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    PRINT           reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    PRINTLN         reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    ID              reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    WHILE           reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    IF              reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    RPAR            reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    COMMA           reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    $end            reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    END             reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)
    ELSE            reduce using rule 26 (exp_logica -> exp_logica OR exp_logica .)

  ! AND             [ shift and go to state 49 ]
  ! OR              [ shift and go to state 50 ]


state 83

    (29) exp_relacional -> exp_relacional LESS exp_relacional .
    (29) exp_relacional -> exp_relacional . LESS exp_relacional
    (30) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (31) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (32) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (33) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (34) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    LESSEQ          reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    GREATHER        reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    GREATHEREQ      reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    EQUALITY        reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    DIFERENT        reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    AND             reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    OR              reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    PRINT           reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    PRINTLN         reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    ID              reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    WHILE           reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    IF              reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    RPAR            reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    COMMA           reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    $end            reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    END             reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)
    ELSE            reduce using rule 29 (exp_relacional -> exp_relacional LESS exp_relacional .)

  ! LESS            [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! GREATHER        [ shift and go to state 54 ]
  ! GREATHEREQ      [ shift and go to state 55 ]
  ! EQUALITY        [ shift and go to state 56 ]
  ! DIFERENT        [ shift and go to state 57 ]


state 84

    (30) exp_relacional -> exp_relacional LESSEQ exp_relacional .
    (29) exp_relacional -> exp_relacional . LESS exp_relacional
    (30) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (31) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (32) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (33) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (34) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    LESSEQ          reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    GREATHER        reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    GREATHEREQ      reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    EQUALITY        reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    DIFERENT        reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    AND             reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    OR              reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    PRINT           reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    PRINTLN         reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    ID              reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    WHILE           reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    IF              reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    RPAR            reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    COMMA           reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    $end            reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    END             reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    ELSE            reduce using rule 30 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)

  ! LESS            [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! GREATHER        [ shift and go to state 54 ]
  ! GREATHEREQ      [ shift and go to state 55 ]
  ! EQUALITY        [ shift and go to state 56 ]
  ! DIFERENT        [ shift and go to state 57 ]


state 85

    (31) exp_relacional -> exp_relacional GREATHER exp_relacional .
    (29) exp_relacional -> exp_relacional . LESS exp_relacional
    (30) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (31) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (32) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (33) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (34) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    LESSEQ          reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    GREATHER        reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    GREATHEREQ      reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    EQUALITY        reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    DIFERENT        reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    AND             reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    OR              reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    PRINT           reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    PRINTLN         reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    ID              reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    WHILE           reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    IF              reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    RPAR            reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    COMMA           reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    $end            reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    END             reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    ELSE            reduce using rule 31 (exp_relacional -> exp_relacional GREATHER exp_relacional .)

  ! LESS            [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! GREATHER        [ shift and go to state 54 ]
  ! GREATHEREQ      [ shift and go to state 55 ]
  ! EQUALITY        [ shift and go to state 56 ]
  ! DIFERENT        [ shift and go to state 57 ]


state 86

    (32) exp_relacional -> exp_relacional GREATHEREQ exp_relacional .
    (29) exp_relacional -> exp_relacional . LESS exp_relacional
    (30) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (31) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (32) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (33) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (34) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    LESSEQ          reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    GREATHER        reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    GREATHEREQ      reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    EQUALITY        reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    DIFERENT        reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    AND             reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    OR              reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    PRINT           reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    PRINTLN         reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    ID              reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    WHILE           reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    IF              reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    RPAR            reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    COMMA           reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    $end            reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    END             reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    ELSE            reduce using rule 32 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)

  ! LESS            [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! GREATHER        [ shift and go to state 54 ]
  ! GREATHEREQ      [ shift and go to state 55 ]
  ! EQUALITY        [ shift and go to state 56 ]
  ! DIFERENT        [ shift and go to state 57 ]


state 87

    (33) exp_relacional -> exp_relacional EQUALITY exp_relacional .
    (29) exp_relacional -> exp_relacional . LESS exp_relacional
    (30) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (31) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (32) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (33) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (34) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    LESSEQ          reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    GREATHER        reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    GREATHEREQ      reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    EQUALITY        reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    DIFERENT        reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    AND             reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    OR              reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    PRINT           reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    PRINTLN         reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    ID              reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    WHILE           reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    IF              reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    RPAR            reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    COMMA           reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    $end            reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    END             reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    ELSE            reduce using rule 33 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)

  ! LESS            [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! GREATHER        [ shift and go to state 54 ]
  ! GREATHEREQ      [ shift and go to state 55 ]
  ! EQUALITY        [ shift and go to state 56 ]
  ! DIFERENT        [ shift and go to state 57 ]


state 88

    (34) exp_relacional -> exp_relacional DIFERENT exp_relacional .
    (29) exp_relacional -> exp_relacional . LESS exp_relacional
    (30) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (31) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (32) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (33) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (34) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    LESSEQ          reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    GREATHER        reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    GREATHEREQ      reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    EQUALITY        reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    DIFERENT        reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    AND             reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    OR              reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    PRINT           reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    PRINTLN         reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    ID              reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    WHILE           reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    IF              reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    RPAR            reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    COMMA           reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    $end            reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    END             reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    ELSE            reduce using rule 34 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)

  ! LESS            [ shift and go to state 52 ]
  ! LESSEQ          [ shift and go to state 53 ]
  ! GREATHER        [ shift and go to state 54 ]
  ! GREATHEREQ      [ shift and go to state 55 ]
  ! EQUALITY        [ shift and go to state 56 ]
  ! DIFERENT        [ shift and go to state 57 ]


state 89

    (36) exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .
    (36) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (37) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (38) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (39) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    MINUS           reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    LESS            reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    LESSEQ          reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    GREATHER        reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    EQUALITY        reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    DIFERENT        reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    AND             reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    OR              reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    PRINT           reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    PRINTLN         reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    ID              reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    WHILE           reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    IF              reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    RPAR            reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    COMMA           reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    $end            reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    END             reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    ELSE            reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    TIMES           shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    POT             shift and go to state 63

  ! TIMES           [ reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! DIV             [ reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! MOD             [ reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! POT             [ reduce using rule 36 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]


state 90

    (37) exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .
    (36) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (37) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (38) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (39) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    MINUS           reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    LESS            reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    LESSEQ          reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    GREATHER        reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    EQUALITY        reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    DIFERENT        reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    AND             reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    OR              reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    PRINT           reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    PRINTLN         reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    ID              reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    WHILE           reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    IF              reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    RPAR            reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    COMMA           reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    $end            reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    END             reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    ELSE            reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    TIMES           shift and go to state 60
    DIV             shift and go to state 61
    MOD             shift and go to state 62
    POT             shift and go to state 63

  ! TIMES           [ reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! DIV             [ reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! MOD             [ reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! POT             [ reduce using rule 37 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]


state 91

    (38) exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .
    (36) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (37) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (38) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (39) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    MINUS           reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    TIMES           reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    DIV             reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    LESS            reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    LESSEQ          reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    GREATHER        reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    GREATHEREQ      reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    EQUALITY        reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    DIFERENT        reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    AND             reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    OR              reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    PRINT           reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    PRINTLN         reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    ID              reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    WHILE           reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    IF              reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    RPAR            reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    COMMA           reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    $end            reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    END             reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    ELSE            reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    MOD             shift and go to state 62
    POT             shift and go to state 63

  ! MOD             [ reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .) ]
  ! POT             [ reduce using rule 38 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]


state 92

    (39) exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .
    (36) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (37) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (38) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (39) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    MINUS           reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    TIMES           reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    DIV             reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    LESS            reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    LESSEQ          reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    GREATHER        reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    GREATHEREQ      reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    EQUALITY        reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    DIFERENT        reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    AND             reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    OR              reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    PRINT           reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    PRINTLN         reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    ID              reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    WHILE           reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    IF              reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    RPAR            reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    COMMA           reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    $end            reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    END             reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    ELSE            reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    MOD             shift and go to state 62
    POT             shift and go to state 63

  ! MOD             [ reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .) ]
  ! POT             [ reduce using rule 39 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]


state 93

    (40) exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .
    (36) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (37) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (38) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (39) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    MINUS           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    TIMES           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    DIV             reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    MOD             reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    LESS            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    LESSEQ          reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    GREATHER        reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    GREATHEREQ      reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    EQUALITY        reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    DIFERENT        reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    AND             reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    OR              reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    PRINT           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    PRINTLN         reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    ID              reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    WHILE           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    IF              reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    RPAR            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    COMMA           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    $end            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    END             reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    ELSE            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    POT             shift and go to state 63

  ! POT             [ reduce using rule 40 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]


state 94

    (41) exp_aritmetica -> exp_aritmetica POT exp_aritmetica .
    (36) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (37) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (38) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (39) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    MINUS           reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    TIMES           reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    DIV             reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    MOD             reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    POT             reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    LESS            reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    LESSEQ          reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    GREATHER        reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    GREATHEREQ      reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    EQUALITY        reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    DIFERENT        reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    AND             reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    OR              reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    PRINT           reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    PRINTLN         reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    ID              reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    WHILE           reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    IF              reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    RPAR            reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    COMMA           reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    $end            reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    END             reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    ELSE            reduce using rule 41 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)

  ! PLUS            [ shift and go to state 58 ]
  ! MINUS           [ shift and go to state 59 ]
  ! TIMES           [ shift and go to state 60 ]
  ! DIV             [ shift and go to state 61 ]
  ! MOD             [ shift and go to state 62 ]
  ! POT             [ shift and go to state 63 ]


state 95

    (43) exp_aritmetica -> LPAR exp_logica RPAR .

    PLUS            reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    MINUS           reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    TIMES           reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    DIV             reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    MOD             reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    POT             reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    LESS            reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    AND             reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    OR              reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    PRINT           reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    ID              reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    WHILE           reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    IF              reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    RPAR            reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    COMMA           reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    $end            reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    END             reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)
    ELSE            reduce using rule 43 (exp_aritmetica -> LPAR exp_logica RPAR .)


state 96

    (51) exp_aritmetica -> TYPEOF LPAR exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 115
    AND             shift and go to state 49
    OR              shift and go to state 50


state 97

    (52) exp_aritmetica -> STRING LPAR exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 116
    AND             shift and go to state 49
    OR              shift and go to state 50


state 98

    (53) exp_aritmetica -> FLOAT LPAR exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 117
    AND             shift and go to state 49
    OR              shift and go to state 50


state 99

    (54) exp_aritmetica -> TRUNC LPAR data_type . COMMA exp_logica RPAR

    COMMA           shift and go to state 118


state 100

    (17) data_type -> INT64 .

    COMMA           reduce using rule 17 (data_type -> INT64 .)


state 101

    (18) data_type -> FLOAT64 .

    COMMA           reduce using rule 18 (data_type -> FLOAT64 .)


state 102

    (19) data_type -> STR .

    COMMA           reduce using rule 19 (data_type -> STR .)


state 103

    (20) data_type -> CHR .

    COMMA           reduce using rule 20 (data_type -> CHR .)


state 104

    (21) data_type -> BOOL .

    COMMA           reduce using rule 21 (data_type -> BOOL .)


state 105

    (55) exp_aritmetica -> PARSE LPAR data_type . COMMA exp_logica RPAR

    COMMA           shift and go to state 119


state 106

    (56) exp_aritmetica -> SIN LPAR exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 120
    AND             shift and go to state 49
    OR              shift and go to state 50


state 107

    (57) exp_aritmetica -> COS LPAR exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 121
    AND             shift and go to state 49
    OR              shift and go to state 50


state 108

    (58) exp_aritmetica -> TAN LPAR exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 122
    AND             shift and go to state 49
    OR              shift and go to state 50


state 109

    (59) exp_aritmetica -> LOG10 LPAR exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 123
    AND             shift and go to state 49
    OR              shift and go to state 50


state 110

    (60) exp_aritmetica -> SQRT LPAR exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 124
    AND             shift and go to state 49
    OR              shift and go to state 50


state 111

    (23) if -> IF exp_logica instrucciones END . SEMICOL

    SEMICOL         shift and go to state 125


state 112

    (24) if_else -> IF exp_logica instrucciones ELSE . instrucciones END SEMICOL
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR print_args RPAR
    (12) println -> . PRINTLN LPAR print_args RPAR
    (15) definicion -> . ID
    (16) asignacion -> . ID EQUAL exp_logica
    (22) while -> . WHILE exp_logica instrucciones END SEMICOL
    (23) if -> . IF exp_logica instrucciones END SEMICOL
    (24) if_else -> . IF exp_logica instrucciones ELSE instrucciones END SEMICOL

    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instrucciones                  shift and go to state 126
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 113

    (13) print_args -> print_args COMMA exp_logica .
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            reduce using rule 13 (print_args -> print_args COMMA exp_logica .)
    COMMA           reduce using rule 13 (print_args -> print_args COMMA exp_logica .)
    AND             shift and go to state 49
    OR              shift and go to state 50


state 114

    (22) while -> WHILE exp_logica instrucciones END SEMICOL .

    PRINT           reduce using rule 22 (while -> WHILE exp_logica instrucciones END SEMICOL .)
    PRINTLN         reduce using rule 22 (while -> WHILE exp_logica instrucciones END SEMICOL .)
    ID              reduce using rule 22 (while -> WHILE exp_logica instrucciones END SEMICOL .)
    WHILE           reduce using rule 22 (while -> WHILE exp_logica instrucciones END SEMICOL .)
    IF              reduce using rule 22 (while -> WHILE exp_logica instrucciones END SEMICOL .)
    $end            reduce using rule 22 (while -> WHILE exp_logica instrucciones END SEMICOL .)
    END             reduce using rule 22 (while -> WHILE exp_logica instrucciones END SEMICOL .)
    ELSE            reduce using rule 22 (while -> WHILE exp_logica instrucciones END SEMICOL .)


state 115

    (51) exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .

    PLUS            reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    MINUS           reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    TIMES           reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    DIV             reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    MOD             reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    POT             reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    LESS            reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    AND             reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    OR              reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    PRINT           reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    ID              reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    WHILE           reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    IF              reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    RPAR            reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    COMMA           reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    $end            reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    END             reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    ELSE            reduce using rule 51 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)


state 116

    (52) exp_aritmetica -> STRING LPAR exp_logica RPAR .

    PLUS            reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    MINUS           reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    TIMES           reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    DIV             reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    MOD             reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    POT             reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    LESS            reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    AND             reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    OR              reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    PRINT           reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    ID              reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    WHILE           reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    IF              reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    RPAR            reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    COMMA           reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    $end            reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    END             reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    ELSE            reduce using rule 52 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)


state 117

    (53) exp_aritmetica -> FLOAT LPAR exp_logica RPAR .

    PLUS            reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    MINUS           reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    TIMES           reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    DIV             reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    MOD             reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    POT             reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    LESS            reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    AND             reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    OR              reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    PRINT           reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    ID              reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    WHILE           reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    IF              reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    RPAR            reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    COMMA           reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    $end            reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    END             reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    ELSE            reduce using rule 53 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)


state 118

    (54) exp_aritmetica -> TRUNC LPAR data_type COMMA . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 127
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 119

    (55) exp_aritmetica -> PARSE LPAR data_type COMMA . exp_logica RPAR
    (25) exp_logica -> . exp_logica AND exp_logica
    (26) exp_logica -> . exp_logica OR exp_logica
    (27) exp_logica -> . NOT exp_logica
    (28) exp_logica -> . exp_relacional
    (29) exp_relacional -> . exp_relacional LESS exp_relacional
    (30) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (31) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (32) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (33) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (34) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (35) exp_relacional -> . exp_aritmetica
    (36) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (37) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (38) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (42) exp_aritmetica -> . MINUS exp_aritmetica
    (43) exp_aritmetica -> . LPAR exp_logica RPAR
    (44) exp_aritmetica -> . NUMBERO
    (45) exp_aritmetica -> . DECIMAL
    (46) exp_aritmetica -> . CARACTER
    (47) exp_aritmetica -> . CADENA
    (48) exp_aritmetica -> . TRUE
    (49) exp_aritmetica -> . FALSE
    (50) exp_aritmetica -> . ID
    (51) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (52) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (53) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (54) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (55) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (56) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (57) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (59) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (60) exp_aritmetica -> . SQRT LPAR exp_logica RPAR

    NOT             shift and go to state 21
    MINUS           shift and go to state 24
    LPAR            shift and go to state 25
    NUMBERO         shift and go to state 26
    DECIMAL         shift and go to state 27
    CARACTER        shift and go to state 28
    CADENA          shift and go to state 29
    TRUE            shift and go to state 30
    FALSE           shift and go to state 31
    ID              shift and go to state 32
    TYPEOF          shift and go to state 33
    STRING          shift and go to state 34
    FLOAT           shift and go to state 35
    TRUNC           shift and go to state 36
    PARSE           shift and go to state 37
    SIN             shift and go to state 38
    COS             shift and go to state 39
    TAN             shift and go to state 40
    LOG10           shift and go to state 41
    SQRT            shift and go to state 42

    exp_logica                     shift and go to state 128
    exp_relacional                 shift and go to state 22
    exp_aritmetica                 shift and go to state 23

state 120

    (56) exp_aritmetica -> SIN LPAR exp_logica RPAR .

    PLUS            reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    MINUS           reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    TIMES           reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    DIV             reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    MOD             reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    POT             reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    LESS            reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    AND             reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    OR              reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    PRINT           reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    ID              reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    WHILE           reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    IF              reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    RPAR            reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    COMMA           reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    $end            reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    END             reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    ELSE            reduce using rule 56 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)


state 121

    (57) exp_aritmetica -> COS LPAR exp_logica RPAR .

    PLUS            reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    MINUS           reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    TIMES           reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    DIV             reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    MOD             reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    POT             reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    LESS            reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    AND             reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    OR              reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    PRINT           reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    ID              reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    WHILE           reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    IF              reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    RPAR            reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    COMMA           reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    $end            reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    END             reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    ELSE            reduce using rule 57 (exp_aritmetica -> COS LPAR exp_logica RPAR .)


state 122

    (58) exp_aritmetica -> TAN LPAR exp_logica RPAR .

    PLUS            reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    MINUS           reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    TIMES           reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    DIV             reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    MOD             reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    POT             reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    LESS            reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    AND             reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    OR              reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    PRINT           reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    ID              reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    WHILE           reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    IF              reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    RPAR            reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    COMMA           reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    $end            reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    END             reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    ELSE            reduce using rule 58 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)


state 123

    (59) exp_aritmetica -> LOG10 LPAR exp_logica RPAR .

    PLUS            reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    MINUS           reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    TIMES           reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    DIV             reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    MOD             reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    POT             reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    LESS            reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    AND             reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    OR              reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    PRINT           reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    ID              reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    WHILE           reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    IF              reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    RPAR            reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    COMMA           reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    $end            reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    END             reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    ELSE            reduce using rule 59 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)


state 124

    (60) exp_aritmetica -> SQRT LPAR exp_logica RPAR .

    PLUS            reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    MINUS           reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    TIMES           reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    DIV             reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    MOD             reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    POT             reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    LESS            reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    AND             reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    OR              reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    PRINT           reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    ID              reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    WHILE           reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    IF              reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    RPAR            reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    COMMA           reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    $end            reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    END             reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    ELSE            reduce using rule 60 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)


state 125

    (23) if -> IF exp_logica instrucciones END SEMICOL .

    PRINT           reduce using rule 23 (if -> IF exp_logica instrucciones END SEMICOL .)
    PRINTLN         reduce using rule 23 (if -> IF exp_logica instrucciones END SEMICOL .)
    ID              reduce using rule 23 (if -> IF exp_logica instrucciones END SEMICOL .)
    WHILE           reduce using rule 23 (if -> IF exp_logica instrucciones END SEMICOL .)
    IF              reduce using rule 23 (if -> IF exp_logica instrucciones END SEMICOL .)
    $end            reduce using rule 23 (if -> IF exp_logica instrucciones END SEMICOL .)
    END             reduce using rule 23 (if -> IF exp_logica instrucciones END SEMICOL .)
    ELSE            reduce using rule 23 (if -> IF exp_logica instrucciones END SEMICOL .)


state 126

    (24) if_else -> IF exp_logica instrucciones ELSE instrucciones . END SEMICOL
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR print_args RPAR
    (12) println -> . PRINTLN LPAR print_args RPAR
    (15) definicion -> . ID
    (16) asignacion -> . ID EQUAL exp_logica
    (22) while -> . WHILE exp_logica instrucciones END SEMICOL
    (23) if -> . IF exp_logica instrucciones END SEMICOL
    (24) if_else -> . IF exp_logica instrucciones ELSE instrucciones END SEMICOL

    END             shift and go to state 129
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instruccion                    shift and go to state 16
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 127

    (54) exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 130
    AND             shift and go to state 49
    OR              shift and go to state 50


state 128

    (55) exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica . RPAR
    (25) exp_logica -> exp_logica . AND exp_logica
    (26) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 131
    AND             shift and go to state 49
    OR              shift and go to state 50


state 129

    (24) if_else -> IF exp_logica instrucciones ELSE instrucciones END . SEMICOL

    SEMICOL         shift and go to state 132


state 130

    (54) exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .

    PLUS            reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    MINUS           reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    TIMES           reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    DIV             reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    MOD             reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    POT             reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    LESS            reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    LESSEQ          reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    GREATHER        reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    GREATHEREQ      reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    EQUALITY        reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    DIFERENT        reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    AND             reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    OR              reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    PRINT           reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    PRINTLN         reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    ID              reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    WHILE           reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    IF              reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    RPAR            reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    COMMA           reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    $end            reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    END             reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    ELSE            reduce using rule 54 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)


state 131

    (55) exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .

    PLUS            reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    MINUS           reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    TIMES           reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    DIV             reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    MOD             reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    POT             reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    LESS            reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    LESSEQ          reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    GREATHER        reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    GREATHEREQ      reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    EQUALITY        reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    DIFERENT        reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    AND             reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    OR              reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    PRINT           reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    PRINTLN         reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    ID              reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    WHILE           reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    IF              reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    RPAR            reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    COMMA           reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    $end            reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    END             reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    ELSE            reduce using rule 55 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)


state 132

    (24) if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL .

    PRINT           reduce using rule 24 (if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL .)
    PRINTLN         reduce using rule 24 (if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL .)
    ID              reduce using rule 24 (if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL .)
    WHILE           reduce using rule 24 (if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL .)
    IF              reduce using rule 24 (if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL .)
    $end            reduce using rule 24 (if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL .)
    END             reduce using rule 24 (if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL .)
    ELSE            reduce using rule 24 (if_else -> IF exp_logica instrucciones ELSE instrucciones END SEMICOL .)

