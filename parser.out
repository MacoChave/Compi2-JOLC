Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BOOL
    CHR
    FLOAT
    INT
    LOWERCASE
    NOTHING
    PARSE
    SEMICOL
    STR
    TYPEOF
    UPPERCASE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print
Rule 5     instruccion -> println
Rule 6     instruccion -> definicion
Rule 7     instruccion -> asignacion
Rule 8     instruccion -> while
Rule 9     instruccion -> if
Rule 10    instruccion -> if_else
Rule 11    print -> PRINT LPAR exp_logica RPAR
Rule 12    println -> PRINTLN LPAR exp_logica RPAR
Rule 13    definicion -> ID
Rule 14    asignacion -> ID EQUAL exp_logica
Rule 15    while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE
Rule 16    if -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE
Rule 17    if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE
Rule 18    exp_logica -> exp_logica AND exp_logica
Rule 19    exp_logica -> exp_logica OR exp_logica
Rule 20    exp_logica -> NOT exp_logica
Rule 21    exp_logica -> exp_relacional
Rule 22    exp_relacional -> exp_relacional LESS exp_relacional
Rule 23    exp_relacional -> exp_relacional LESSEQ exp_relacional
Rule 24    exp_relacional -> exp_relacional GREATHER exp_relacional
Rule 25    exp_relacional -> exp_relacional GREATHEREQ exp_relacional
Rule 26    exp_relacional -> exp_relacional EQUALITY exp_relacional
Rule 27    exp_relacional -> exp_relacional DIFERENT exp_relacional
Rule 28    exp_relacional -> exp_aritmetica
Rule 29    exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica
Rule 30    exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica
Rule 31    exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica
Rule 32    exp_aritmetica -> exp_aritmetica DIV exp_aritmetica
Rule 33    exp_aritmetica -> exp_aritmetica MOD exp_aritmetica
Rule 34    exp_aritmetica -> exp_aritmetica POT exp_aritmetica
Rule 35    exp_aritmetica -> MINUS exp_aritmetica
Rule 36    exp_aritmetica -> LPAR exp_logica RPAR
Rule 37    exp_aritmetica -> NUMBER
Rule 38    exp_aritmetica -> DECIMAL
Rule 39    exp_aritmetica -> CARACTER
Rule 40    exp_aritmetica -> STRING
Rule 41    exp_aritmetica -> TRUE
Rule 42    exp_aritmetica -> FALSE
Rule 43    exp_aritmetica -> ID

Terminals, with rules where they appear

AND                  : 18
BOOL                 : 
CARACTER             : 39
CHR                  : 
DECIMAL              : 38
DIFERENT             : 27
DIV                  : 32
ELSE                 : 17
EQUAL                : 14
EQUALITY             : 26
FALSE                : 42
FLOAT                : 
GREATHER             : 24
GREATHEREQ           : 25
ID                   : 13 14 43
IF                   : 16 17
INT                  : 
LBRACE               : 15 16 17 17
LESS                 : 22
LESSEQ               : 23
LOWERCASE            : 
LPAR                 : 11 12 15 16 17 36
MINUS                : 30 35
MOD                  : 33
NOT                  : 20
NOTHING              : 
NUMBER               : 37
OR                   : 19
PARSE                : 
PLUS                 : 29
POT                  : 34
PRINT                : 11
PRINTLN              : 12
RBRACE               : 15 16 17 17
RPAR                 : 11 12 15 16 17 36
SEMICOL              : 
STR                  : 
STRING               : 40
TIMES                : 31
TRUE                 : 41
TYPEOF               : 
UPPERCASE            : 
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

asignacion           : 7
definicion           : 6
exp_aritmetica       : 28 29 29 30 30 31 31 32 32 33 33 34 34 35
exp_logica           : 11 12 14 15 16 17 18 18 19 19 20 36
exp_relacional       : 21 22 22 23 23 24 24 25 25 26 26 27 27
if                   : 9
if_else              : 10
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 15 16 17 17
print                : 4
println              : 5
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR exp_logica RPAR
    (12) println -> . PRINTLN LPAR exp_logica RPAR
    (13) definicion -> . ID
    (14) asignacion -> . ID EQUAL exp_logica
    (15) while -> . WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (16) if -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR exp_logica RPAR
    (12) println -> . PRINTLN LPAR exp_logica RPAR
    (13) definicion -> . ID
    (14) asignacion -> . ID EQUAL exp_logica
    (15) while -> . WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (16) if -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    $end            reduce using rule 1 (init -> instrucciones .)
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instruccion                    shift and go to state 16
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 3

    (3) instrucciones -> instruccion .

    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    PRINTLN         reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    RBRACE          reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print .

    PRINT           reduce using rule 4 (instruccion -> print .)
    PRINTLN         reduce using rule 4 (instruccion -> print .)
    ID              reduce using rule 4 (instruccion -> print .)
    WHILE           reduce using rule 4 (instruccion -> print .)
    IF              reduce using rule 4 (instruccion -> print .)
    $end            reduce using rule 4 (instruccion -> print .)
    RBRACE          reduce using rule 4 (instruccion -> print .)


state 5

    (5) instruccion -> println .

    PRINT           reduce using rule 5 (instruccion -> println .)
    PRINTLN         reduce using rule 5 (instruccion -> println .)
    ID              reduce using rule 5 (instruccion -> println .)
    WHILE           reduce using rule 5 (instruccion -> println .)
    IF              reduce using rule 5 (instruccion -> println .)
    $end            reduce using rule 5 (instruccion -> println .)
    RBRACE          reduce using rule 5 (instruccion -> println .)


state 6

    (6) instruccion -> definicion .

    PRINT           reduce using rule 6 (instruccion -> definicion .)
    PRINTLN         reduce using rule 6 (instruccion -> definicion .)
    ID              reduce using rule 6 (instruccion -> definicion .)
    WHILE           reduce using rule 6 (instruccion -> definicion .)
    IF              reduce using rule 6 (instruccion -> definicion .)
    $end            reduce using rule 6 (instruccion -> definicion .)
    RBRACE          reduce using rule 6 (instruccion -> definicion .)


state 7

    (7) instruccion -> asignacion .

    PRINT           reduce using rule 7 (instruccion -> asignacion .)
    PRINTLN         reduce using rule 7 (instruccion -> asignacion .)
    ID              reduce using rule 7 (instruccion -> asignacion .)
    WHILE           reduce using rule 7 (instruccion -> asignacion .)
    IF              reduce using rule 7 (instruccion -> asignacion .)
    $end            reduce using rule 7 (instruccion -> asignacion .)
    RBRACE          reduce using rule 7 (instruccion -> asignacion .)


state 8

    (8) instruccion -> while .

    PRINT           reduce using rule 8 (instruccion -> while .)
    PRINTLN         reduce using rule 8 (instruccion -> while .)
    ID              reduce using rule 8 (instruccion -> while .)
    WHILE           reduce using rule 8 (instruccion -> while .)
    IF              reduce using rule 8 (instruccion -> while .)
    $end            reduce using rule 8 (instruccion -> while .)
    RBRACE          reduce using rule 8 (instruccion -> while .)


state 9

    (9) instruccion -> if .

    PRINT           reduce using rule 9 (instruccion -> if .)
    PRINTLN         reduce using rule 9 (instruccion -> if .)
    ID              reduce using rule 9 (instruccion -> if .)
    WHILE           reduce using rule 9 (instruccion -> if .)
    IF              reduce using rule 9 (instruccion -> if .)
    $end            reduce using rule 9 (instruccion -> if .)
    RBRACE          reduce using rule 9 (instruccion -> if .)


state 10

    (10) instruccion -> if_else .

    PRINT           reduce using rule 10 (instruccion -> if_else .)
    PRINTLN         reduce using rule 10 (instruccion -> if_else .)
    ID              reduce using rule 10 (instruccion -> if_else .)
    WHILE           reduce using rule 10 (instruccion -> if_else .)
    IF              reduce using rule 10 (instruccion -> if_else .)
    $end            reduce using rule 10 (instruccion -> if_else .)
    RBRACE          reduce using rule 10 (instruccion -> if_else .)


state 11

    (11) print -> PRINT . LPAR exp_logica RPAR

    LPAR            shift and go to state 17


state 12

    (12) println -> PRINTLN . LPAR exp_logica RPAR

    LPAR            shift and go to state 18


state 13

    (13) definicion -> ID .
    (14) asignacion -> ID . EQUAL exp_logica

    PRINT           reduce using rule 13 (definicion -> ID .)
    PRINTLN         reduce using rule 13 (definicion -> ID .)
    ID              reduce using rule 13 (definicion -> ID .)
    WHILE           reduce using rule 13 (definicion -> ID .)
    IF              reduce using rule 13 (definicion -> ID .)
    $end            reduce using rule 13 (definicion -> ID .)
    RBRACE          reduce using rule 13 (definicion -> ID .)
    EQUAL           shift and go to state 19


state 14

    (15) while -> WHILE . LPAR exp_logica RPAR LBRACE instrucciones RBRACE

    LPAR            shift and go to state 20


state 15

    (16) if -> IF . LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> IF . LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    LPAR            shift and go to state 21


state 16

    (2) instrucciones -> instrucciones instruccion .

    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINTLN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    RBRACE          reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 17

    (11) print -> PRINT LPAR . exp_logica RPAR
    (18) exp_logica -> . exp_logica AND exp_logica
    (19) exp_logica -> . exp_logica OR exp_logica
    (20) exp_logica -> . NOT exp_logica
    (21) exp_logica -> . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    NOT             shift and go to state 24
    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_logica                     shift and go to state 23
    exp_relacional                 shift and go to state 25
    exp_aritmetica                 shift and go to state 26

state 18

    (12) println -> PRINTLN LPAR . exp_logica RPAR
    (18) exp_logica -> . exp_logica AND exp_logica
    (19) exp_logica -> . exp_logica OR exp_logica
    (20) exp_logica -> . NOT exp_logica
    (21) exp_logica -> . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    NOT             shift and go to state 24
    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_logica                     shift and go to state 35
    exp_relacional                 shift and go to state 25
    exp_aritmetica                 shift and go to state 26

state 19

    (14) asignacion -> ID EQUAL . exp_logica
    (18) exp_logica -> . exp_logica AND exp_logica
    (19) exp_logica -> . exp_logica OR exp_logica
    (20) exp_logica -> . NOT exp_logica
    (21) exp_logica -> . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    NOT             shift and go to state 24
    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_logica                     shift and go to state 36
    exp_relacional                 shift and go to state 25
    exp_aritmetica                 shift and go to state 26

state 20

    (15) while -> WHILE LPAR . exp_logica RPAR LBRACE instrucciones RBRACE
    (18) exp_logica -> . exp_logica AND exp_logica
    (19) exp_logica -> . exp_logica OR exp_logica
    (20) exp_logica -> . NOT exp_logica
    (21) exp_logica -> . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    NOT             shift and go to state 24
    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_logica                     shift and go to state 37
    exp_relacional                 shift and go to state 25
    exp_aritmetica                 shift and go to state 26

state 21

    (16) if -> IF LPAR . exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> IF LPAR . exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE
    (18) exp_logica -> . exp_logica AND exp_logica
    (19) exp_logica -> . exp_logica OR exp_logica
    (20) exp_logica -> . NOT exp_logica
    (21) exp_logica -> . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    NOT             shift and go to state 24
    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_logica                     shift and go to state 38
    exp_relacional                 shift and go to state 25
    exp_aritmetica                 shift and go to state 26

state 22

    (36) exp_aritmetica -> LPAR . exp_logica RPAR
    (18) exp_logica -> . exp_logica AND exp_logica
    (19) exp_logica -> . exp_logica OR exp_logica
    (20) exp_logica -> . NOT exp_logica
    (21) exp_logica -> . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    NOT             shift and go to state 24
    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_logica                     shift and go to state 39
    exp_relacional                 shift and go to state 25
    exp_aritmetica                 shift and go to state 26

state 23

    (11) print -> PRINT LPAR exp_logica . RPAR
    (18) exp_logica -> exp_logica . AND exp_logica
    (19) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 40
    AND             shift and go to state 41
    OR              shift and go to state 42


state 24

    (20) exp_logica -> NOT . exp_logica
    (18) exp_logica -> . exp_logica AND exp_logica
    (19) exp_logica -> . exp_logica OR exp_logica
    (20) exp_logica -> . NOT exp_logica
    (21) exp_logica -> . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    NOT             shift and go to state 24
    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_logica                     shift and go to state 43
    exp_relacional                 shift and go to state 25
    exp_aritmetica                 shift and go to state 26

state 25

    (21) exp_logica -> exp_relacional .
    (22) exp_relacional -> exp_relacional . LESS exp_relacional
    (23) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (24) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (25) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (26) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (27) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    RPAR            reduce using rule 21 (exp_logica -> exp_relacional .)
    AND             reduce using rule 21 (exp_logica -> exp_relacional .)
    OR              reduce using rule 21 (exp_logica -> exp_relacional .)
    PRINT           reduce using rule 21 (exp_logica -> exp_relacional .)
    PRINTLN         reduce using rule 21 (exp_logica -> exp_relacional .)
    ID              reduce using rule 21 (exp_logica -> exp_relacional .)
    WHILE           reduce using rule 21 (exp_logica -> exp_relacional .)
    IF              reduce using rule 21 (exp_logica -> exp_relacional .)
    $end            reduce using rule 21 (exp_logica -> exp_relacional .)
    RBRACE          reduce using rule 21 (exp_logica -> exp_relacional .)
    LESS            shift and go to state 44
    LESSEQ          shift and go to state 45
    GREATHER        shift and go to state 46
    GREATHEREQ      shift and go to state 47
    EQUALITY        shift and go to state 48
    DIFERENT        shift and go to state 49


state 26

    (28) exp_relacional -> exp_aritmetica .
    (29) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (30) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (31) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (32) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (33) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (34) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    LESS            reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    LESSEQ          reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    GREATHER        reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    GREATHEREQ      reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    EQUALITY        reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    DIFERENT        reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    RPAR            reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    AND             reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    OR              reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    PRINT           reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    PRINTLN         reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    ID              reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    WHILE           reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    IF              reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    $end            reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    RBRACE          reduce using rule 28 (exp_relacional -> exp_aritmetica .)
    PLUS            shift and go to state 50
    MINUS           shift and go to state 51
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    POT             shift and go to state 55


state 27

    (35) exp_aritmetica -> MINUS . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_aritmetica                 shift and go to state 56

state 28

    (37) exp_aritmetica -> NUMBER .

    PLUS            reduce using rule 37 (exp_aritmetica -> NUMBER .)
    MINUS           reduce using rule 37 (exp_aritmetica -> NUMBER .)
    TIMES           reduce using rule 37 (exp_aritmetica -> NUMBER .)
    DIV             reduce using rule 37 (exp_aritmetica -> NUMBER .)
    MOD             reduce using rule 37 (exp_aritmetica -> NUMBER .)
    POT             reduce using rule 37 (exp_aritmetica -> NUMBER .)
    LESS            reduce using rule 37 (exp_aritmetica -> NUMBER .)
    LESSEQ          reduce using rule 37 (exp_aritmetica -> NUMBER .)
    GREATHER        reduce using rule 37 (exp_aritmetica -> NUMBER .)
    GREATHEREQ      reduce using rule 37 (exp_aritmetica -> NUMBER .)
    EQUALITY        reduce using rule 37 (exp_aritmetica -> NUMBER .)
    DIFERENT        reduce using rule 37 (exp_aritmetica -> NUMBER .)
    RPAR            reduce using rule 37 (exp_aritmetica -> NUMBER .)
    AND             reduce using rule 37 (exp_aritmetica -> NUMBER .)
    OR              reduce using rule 37 (exp_aritmetica -> NUMBER .)
    PRINT           reduce using rule 37 (exp_aritmetica -> NUMBER .)
    PRINTLN         reduce using rule 37 (exp_aritmetica -> NUMBER .)
    ID              reduce using rule 37 (exp_aritmetica -> NUMBER .)
    WHILE           reduce using rule 37 (exp_aritmetica -> NUMBER .)
    IF              reduce using rule 37 (exp_aritmetica -> NUMBER .)
    $end            reduce using rule 37 (exp_aritmetica -> NUMBER .)
    RBRACE          reduce using rule 37 (exp_aritmetica -> NUMBER .)


state 29

    (38) exp_aritmetica -> DECIMAL .

    PLUS            reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    MINUS           reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    TIMES           reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    DIV             reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    MOD             reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    POT             reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    LESS            reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    LESSEQ          reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    GREATHER        reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    GREATHEREQ      reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    EQUALITY        reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    DIFERENT        reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    RPAR            reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    AND             reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    OR              reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    PRINT           reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    PRINTLN         reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    ID              reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    WHILE           reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    IF              reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    $end            reduce using rule 38 (exp_aritmetica -> DECIMAL .)
    RBRACE          reduce using rule 38 (exp_aritmetica -> DECIMAL .)


state 30

    (39) exp_aritmetica -> CARACTER .

    PLUS            reduce using rule 39 (exp_aritmetica -> CARACTER .)
    MINUS           reduce using rule 39 (exp_aritmetica -> CARACTER .)
    TIMES           reduce using rule 39 (exp_aritmetica -> CARACTER .)
    DIV             reduce using rule 39 (exp_aritmetica -> CARACTER .)
    MOD             reduce using rule 39 (exp_aritmetica -> CARACTER .)
    POT             reduce using rule 39 (exp_aritmetica -> CARACTER .)
    LESS            reduce using rule 39 (exp_aritmetica -> CARACTER .)
    LESSEQ          reduce using rule 39 (exp_aritmetica -> CARACTER .)
    GREATHER        reduce using rule 39 (exp_aritmetica -> CARACTER .)
    GREATHEREQ      reduce using rule 39 (exp_aritmetica -> CARACTER .)
    EQUALITY        reduce using rule 39 (exp_aritmetica -> CARACTER .)
    DIFERENT        reduce using rule 39 (exp_aritmetica -> CARACTER .)
    RPAR            reduce using rule 39 (exp_aritmetica -> CARACTER .)
    AND             reduce using rule 39 (exp_aritmetica -> CARACTER .)
    OR              reduce using rule 39 (exp_aritmetica -> CARACTER .)
    PRINT           reduce using rule 39 (exp_aritmetica -> CARACTER .)
    PRINTLN         reduce using rule 39 (exp_aritmetica -> CARACTER .)
    ID              reduce using rule 39 (exp_aritmetica -> CARACTER .)
    WHILE           reduce using rule 39 (exp_aritmetica -> CARACTER .)
    IF              reduce using rule 39 (exp_aritmetica -> CARACTER .)
    $end            reduce using rule 39 (exp_aritmetica -> CARACTER .)
    RBRACE          reduce using rule 39 (exp_aritmetica -> CARACTER .)


state 31

    (40) exp_aritmetica -> STRING .

    PLUS            reduce using rule 40 (exp_aritmetica -> STRING .)
    MINUS           reduce using rule 40 (exp_aritmetica -> STRING .)
    TIMES           reduce using rule 40 (exp_aritmetica -> STRING .)
    DIV             reduce using rule 40 (exp_aritmetica -> STRING .)
    MOD             reduce using rule 40 (exp_aritmetica -> STRING .)
    POT             reduce using rule 40 (exp_aritmetica -> STRING .)
    LESS            reduce using rule 40 (exp_aritmetica -> STRING .)
    LESSEQ          reduce using rule 40 (exp_aritmetica -> STRING .)
    GREATHER        reduce using rule 40 (exp_aritmetica -> STRING .)
    GREATHEREQ      reduce using rule 40 (exp_aritmetica -> STRING .)
    EQUALITY        reduce using rule 40 (exp_aritmetica -> STRING .)
    DIFERENT        reduce using rule 40 (exp_aritmetica -> STRING .)
    RPAR            reduce using rule 40 (exp_aritmetica -> STRING .)
    AND             reduce using rule 40 (exp_aritmetica -> STRING .)
    OR              reduce using rule 40 (exp_aritmetica -> STRING .)
    PRINT           reduce using rule 40 (exp_aritmetica -> STRING .)
    PRINTLN         reduce using rule 40 (exp_aritmetica -> STRING .)
    ID              reduce using rule 40 (exp_aritmetica -> STRING .)
    WHILE           reduce using rule 40 (exp_aritmetica -> STRING .)
    IF              reduce using rule 40 (exp_aritmetica -> STRING .)
    $end            reduce using rule 40 (exp_aritmetica -> STRING .)
    RBRACE          reduce using rule 40 (exp_aritmetica -> STRING .)


state 32

    (41) exp_aritmetica -> TRUE .

    PLUS            reduce using rule 41 (exp_aritmetica -> TRUE .)
    MINUS           reduce using rule 41 (exp_aritmetica -> TRUE .)
    TIMES           reduce using rule 41 (exp_aritmetica -> TRUE .)
    DIV             reduce using rule 41 (exp_aritmetica -> TRUE .)
    MOD             reduce using rule 41 (exp_aritmetica -> TRUE .)
    POT             reduce using rule 41 (exp_aritmetica -> TRUE .)
    LESS            reduce using rule 41 (exp_aritmetica -> TRUE .)
    LESSEQ          reduce using rule 41 (exp_aritmetica -> TRUE .)
    GREATHER        reduce using rule 41 (exp_aritmetica -> TRUE .)
    GREATHEREQ      reduce using rule 41 (exp_aritmetica -> TRUE .)
    EQUALITY        reduce using rule 41 (exp_aritmetica -> TRUE .)
    DIFERENT        reduce using rule 41 (exp_aritmetica -> TRUE .)
    RPAR            reduce using rule 41 (exp_aritmetica -> TRUE .)
    AND             reduce using rule 41 (exp_aritmetica -> TRUE .)
    OR              reduce using rule 41 (exp_aritmetica -> TRUE .)
    PRINT           reduce using rule 41 (exp_aritmetica -> TRUE .)
    PRINTLN         reduce using rule 41 (exp_aritmetica -> TRUE .)
    ID              reduce using rule 41 (exp_aritmetica -> TRUE .)
    WHILE           reduce using rule 41 (exp_aritmetica -> TRUE .)
    IF              reduce using rule 41 (exp_aritmetica -> TRUE .)
    $end            reduce using rule 41 (exp_aritmetica -> TRUE .)
    RBRACE          reduce using rule 41 (exp_aritmetica -> TRUE .)


state 33

    (42) exp_aritmetica -> FALSE .

    PLUS            reduce using rule 42 (exp_aritmetica -> FALSE .)
    MINUS           reduce using rule 42 (exp_aritmetica -> FALSE .)
    TIMES           reduce using rule 42 (exp_aritmetica -> FALSE .)
    DIV             reduce using rule 42 (exp_aritmetica -> FALSE .)
    MOD             reduce using rule 42 (exp_aritmetica -> FALSE .)
    POT             reduce using rule 42 (exp_aritmetica -> FALSE .)
    LESS            reduce using rule 42 (exp_aritmetica -> FALSE .)
    LESSEQ          reduce using rule 42 (exp_aritmetica -> FALSE .)
    GREATHER        reduce using rule 42 (exp_aritmetica -> FALSE .)
    GREATHEREQ      reduce using rule 42 (exp_aritmetica -> FALSE .)
    EQUALITY        reduce using rule 42 (exp_aritmetica -> FALSE .)
    DIFERENT        reduce using rule 42 (exp_aritmetica -> FALSE .)
    RPAR            reduce using rule 42 (exp_aritmetica -> FALSE .)
    AND             reduce using rule 42 (exp_aritmetica -> FALSE .)
    OR              reduce using rule 42 (exp_aritmetica -> FALSE .)
    PRINT           reduce using rule 42 (exp_aritmetica -> FALSE .)
    PRINTLN         reduce using rule 42 (exp_aritmetica -> FALSE .)
    ID              reduce using rule 42 (exp_aritmetica -> FALSE .)
    WHILE           reduce using rule 42 (exp_aritmetica -> FALSE .)
    IF              reduce using rule 42 (exp_aritmetica -> FALSE .)
    $end            reduce using rule 42 (exp_aritmetica -> FALSE .)
    RBRACE          reduce using rule 42 (exp_aritmetica -> FALSE .)


state 34

    (43) exp_aritmetica -> ID .

    PLUS            reduce using rule 43 (exp_aritmetica -> ID .)
    MINUS           reduce using rule 43 (exp_aritmetica -> ID .)
    TIMES           reduce using rule 43 (exp_aritmetica -> ID .)
    DIV             reduce using rule 43 (exp_aritmetica -> ID .)
    MOD             reduce using rule 43 (exp_aritmetica -> ID .)
    POT             reduce using rule 43 (exp_aritmetica -> ID .)
    LESS            reduce using rule 43 (exp_aritmetica -> ID .)
    LESSEQ          reduce using rule 43 (exp_aritmetica -> ID .)
    GREATHER        reduce using rule 43 (exp_aritmetica -> ID .)
    GREATHEREQ      reduce using rule 43 (exp_aritmetica -> ID .)
    EQUALITY        reduce using rule 43 (exp_aritmetica -> ID .)
    DIFERENT        reduce using rule 43 (exp_aritmetica -> ID .)
    RPAR            reduce using rule 43 (exp_aritmetica -> ID .)
    AND             reduce using rule 43 (exp_aritmetica -> ID .)
    OR              reduce using rule 43 (exp_aritmetica -> ID .)
    PRINT           reduce using rule 43 (exp_aritmetica -> ID .)
    PRINTLN         reduce using rule 43 (exp_aritmetica -> ID .)
    ID              reduce using rule 43 (exp_aritmetica -> ID .)
    WHILE           reduce using rule 43 (exp_aritmetica -> ID .)
    IF              reduce using rule 43 (exp_aritmetica -> ID .)
    $end            reduce using rule 43 (exp_aritmetica -> ID .)
    RBRACE          reduce using rule 43 (exp_aritmetica -> ID .)


state 35

    (12) println -> PRINTLN LPAR exp_logica . RPAR
    (18) exp_logica -> exp_logica . AND exp_logica
    (19) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 57
    AND             shift and go to state 41
    OR              shift and go to state 42


state 36

    (14) asignacion -> ID EQUAL exp_logica .
    (18) exp_logica -> exp_logica . AND exp_logica
    (19) exp_logica -> exp_logica . OR exp_logica

    PRINT           reduce using rule 14 (asignacion -> ID EQUAL exp_logica .)
    PRINTLN         reduce using rule 14 (asignacion -> ID EQUAL exp_logica .)
    ID              reduce using rule 14 (asignacion -> ID EQUAL exp_logica .)
    WHILE           reduce using rule 14 (asignacion -> ID EQUAL exp_logica .)
    IF              reduce using rule 14 (asignacion -> ID EQUAL exp_logica .)
    $end            reduce using rule 14 (asignacion -> ID EQUAL exp_logica .)
    RBRACE          reduce using rule 14 (asignacion -> ID EQUAL exp_logica .)
    AND             shift and go to state 41
    OR              shift and go to state 42


state 37

    (15) while -> WHILE LPAR exp_logica . RPAR LBRACE instrucciones RBRACE
    (18) exp_logica -> exp_logica . AND exp_logica
    (19) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 58
    AND             shift and go to state 41
    OR              shift and go to state 42


state 38

    (16) if -> IF LPAR exp_logica . RPAR LBRACE instrucciones RBRACE
    (17) if_else -> IF LPAR exp_logica . RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE
    (18) exp_logica -> exp_logica . AND exp_logica
    (19) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 59
    AND             shift and go to state 41
    OR              shift and go to state 42


state 39

    (36) exp_aritmetica -> LPAR exp_logica . RPAR
    (18) exp_logica -> exp_logica . AND exp_logica
    (19) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 60
    AND             shift and go to state 41
    OR              shift and go to state 42


state 40

    (11) print -> PRINT LPAR exp_logica RPAR .

    PRINT           reduce using rule 11 (print -> PRINT LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 11 (print -> PRINT LPAR exp_logica RPAR .)
    ID              reduce using rule 11 (print -> PRINT LPAR exp_logica RPAR .)
    WHILE           reduce using rule 11 (print -> PRINT LPAR exp_logica RPAR .)
    IF              reduce using rule 11 (print -> PRINT LPAR exp_logica RPAR .)
    $end            reduce using rule 11 (print -> PRINT LPAR exp_logica RPAR .)
    RBRACE          reduce using rule 11 (print -> PRINT LPAR exp_logica RPAR .)


state 41

    (18) exp_logica -> exp_logica AND . exp_logica
    (18) exp_logica -> . exp_logica AND exp_logica
    (19) exp_logica -> . exp_logica OR exp_logica
    (20) exp_logica -> . NOT exp_logica
    (21) exp_logica -> . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    NOT             shift and go to state 24
    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_logica                     shift and go to state 61
    exp_relacional                 shift and go to state 25
    exp_aritmetica                 shift and go to state 26

state 42

    (19) exp_logica -> exp_logica OR . exp_logica
    (18) exp_logica -> . exp_logica AND exp_logica
    (19) exp_logica -> . exp_logica OR exp_logica
    (20) exp_logica -> . NOT exp_logica
    (21) exp_logica -> . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    NOT             shift and go to state 24
    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_logica                     shift and go to state 62
    exp_relacional                 shift and go to state 25
    exp_aritmetica                 shift and go to state 26

state 43

    (20) exp_logica -> NOT exp_logica .
    (18) exp_logica -> exp_logica . AND exp_logica
    (19) exp_logica -> exp_logica . OR exp_logica

    RPAR            reduce using rule 20 (exp_logica -> NOT exp_logica .)
    AND             reduce using rule 20 (exp_logica -> NOT exp_logica .)
    OR              reduce using rule 20 (exp_logica -> NOT exp_logica .)
    PRINT           reduce using rule 20 (exp_logica -> NOT exp_logica .)
    PRINTLN         reduce using rule 20 (exp_logica -> NOT exp_logica .)
    ID              reduce using rule 20 (exp_logica -> NOT exp_logica .)
    WHILE           reduce using rule 20 (exp_logica -> NOT exp_logica .)
    IF              reduce using rule 20 (exp_logica -> NOT exp_logica .)
    $end            reduce using rule 20 (exp_logica -> NOT exp_logica .)
    RBRACE          reduce using rule 20 (exp_logica -> NOT exp_logica .)

  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 44

    (22) exp_relacional -> exp_relacional LESS . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_relacional                 shift and go to state 63
    exp_aritmetica                 shift and go to state 26

state 45

    (23) exp_relacional -> exp_relacional LESSEQ . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_relacional                 shift and go to state 64
    exp_aritmetica                 shift and go to state 26

state 46

    (24) exp_relacional -> exp_relacional GREATHER . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_relacional                 shift and go to state 65
    exp_aritmetica                 shift and go to state 26

state 47

    (25) exp_relacional -> exp_relacional GREATHEREQ . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_relacional                 shift and go to state 66
    exp_aritmetica                 shift and go to state 26

state 48

    (26) exp_relacional -> exp_relacional EQUALITY . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_relacional                 shift and go to state 67
    exp_aritmetica                 shift and go to state 26

state 49

    (27) exp_relacional -> exp_relacional DIFERENT . exp_relacional
    (22) exp_relacional -> . exp_relacional LESS exp_relacional
    (23) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (24) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (25) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (26) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (27) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (28) exp_relacional -> . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_relacional                 shift and go to state 68
    exp_aritmetica                 shift and go to state 26

state 50

    (29) exp_aritmetica -> exp_aritmetica PLUS . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_aritmetica                 shift and go to state 69

state 51

    (30) exp_aritmetica -> exp_aritmetica MINUS . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_aritmetica                 shift and go to state 70

state 52

    (31) exp_aritmetica -> exp_aritmetica TIMES . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_aritmetica                 shift and go to state 71

state 53

    (32) exp_aritmetica -> exp_aritmetica DIV . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_aritmetica                 shift and go to state 72

state 54

    (33) exp_aritmetica -> exp_aritmetica MOD . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_aritmetica                 shift and go to state 73

state 55

    (34) exp_aritmetica -> exp_aritmetica POT . exp_aritmetica
    (29) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (30) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (31) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (32) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (33) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (34) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (35) exp_aritmetica -> . MINUS exp_aritmetica
    (36) exp_aritmetica -> . LPAR exp_logica RPAR
    (37) exp_aritmetica -> . NUMBER
    (38) exp_aritmetica -> . DECIMAL
    (39) exp_aritmetica -> . CARACTER
    (40) exp_aritmetica -> . STRING
    (41) exp_aritmetica -> . TRUE
    (42) exp_aritmetica -> . FALSE
    (43) exp_aritmetica -> . ID

    MINUS           shift and go to state 27
    LPAR            shift and go to state 22
    NUMBER          shift and go to state 28
    DECIMAL         shift and go to state 29
    CARACTER        shift and go to state 30
    STRING          shift and go to state 31
    TRUE            shift and go to state 32
    FALSE           shift and go to state 33
    ID              shift and go to state 34

    exp_aritmetica                 shift and go to state 74

state 56

    (35) exp_aritmetica -> MINUS exp_aritmetica .
    (29) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (30) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (31) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (32) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (33) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (34) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    MINUS           reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    TIMES           reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    DIV             reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    MOD             reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    POT             reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    LESS            reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    LESSEQ          reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    GREATHER        reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    EQUALITY        reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    DIFERENT        reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    RPAR            reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    AND             reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    OR              reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    PRINT           reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    PRINTLN         reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    ID              reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    WHILE           reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    IF              reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    $end            reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)
    RBRACE          reduce using rule 35 (exp_aritmetica -> MINUS exp_aritmetica .)

  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIV             [ shift and go to state 53 ]
  ! MOD             [ shift and go to state 54 ]
  ! POT             [ shift and go to state 55 ]


state 57

    (12) println -> PRINTLN LPAR exp_logica RPAR .

    PRINT           reduce using rule 12 (println -> PRINTLN LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 12 (println -> PRINTLN LPAR exp_logica RPAR .)
    ID              reduce using rule 12 (println -> PRINTLN LPAR exp_logica RPAR .)
    WHILE           reduce using rule 12 (println -> PRINTLN LPAR exp_logica RPAR .)
    IF              reduce using rule 12 (println -> PRINTLN LPAR exp_logica RPAR .)
    $end            reduce using rule 12 (println -> PRINTLN LPAR exp_logica RPAR .)
    RBRACE          reduce using rule 12 (println -> PRINTLN LPAR exp_logica RPAR .)


state 58

    (15) while -> WHILE LPAR exp_logica RPAR . LBRACE instrucciones RBRACE

    LBRACE          shift and go to state 75


state 59

    (16) if -> IF LPAR exp_logica RPAR . LBRACE instrucciones RBRACE
    (17) if_else -> IF LPAR exp_logica RPAR . LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    LBRACE          shift and go to state 76


state 60

    (36) exp_aritmetica -> LPAR exp_logica RPAR .

    PLUS            reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    MINUS           reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    TIMES           reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    DIV             reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    MOD             reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    POT             reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    LESS            reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    RPAR            reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    AND             reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    OR              reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    PRINT           reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    ID              reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    WHILE           reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    IF              reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    $end            reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)
    RBRACE          reduce using rule 36 (exp_aritmetica -> LPAR exp_logica RPAR .)


state 61

    (18) exp_logica -> exp_logica AND exp_logica .
    (18) exp_logica -> exp_logica . AND exp_logica
    (19) exp_logica -> exp_logica . OR exp_logica

    RPAR            reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .)
    AND             reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .)
    PRINT           reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .)
    PRINTLN         reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .)
    ID              reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .)
    WHILE           reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .)
    IF              reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .)
    $end            reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .)
    RBRACE          reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .)
    OR              shift and go to state 42

  ! OR              [ reduce using rule 18 (exp_logica -> exp_logica AND exp_logica .) ]
  ! AND             [ shift and go to state 41 ]


state 62

    (19) exp_logica -> exp_logica OR exp_logica .
    (18) exp_logica -> exp_logica . AND exp_logica
    (19) exp_logica -> exp_logica . OR exp_logica

    RPAR            reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)
    AND             reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)
    OR              reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)
    PRINT           reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)
    PRINTLN         reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)
    ID              reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)
    WHILE           reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)
    IF              reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)
    $end            reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)
    RBRACE          reduce using rule 19 (exp_logica -> exp_logica OR exp_logica .)

  ! AND             [ shift and go to state 41 ]
  ! OR              [ shift and go to state 42 ]


state 63

    (22) exp_relacional -> exp_relacional LESS exp_relacional .
    (22) exp_relacional -> exp_relacional . LESS exp_relacional
    (23) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (24) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (25) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (26) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (27) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    LESSEQ          reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    GREATHER        reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    GREATHEREQ      reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    EQUALITY        reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    DIFERENT        reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    RPAR            reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    AND             reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    OR              reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    PRINT           reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    PRINTLN         reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    ID              reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    WHILE           reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    IF              reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    $end            reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)
    RBRACE          reduce using rule 22 (exp_relacional -> exp_relacional LESS exp_relacional .)

  ! LESS            [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]
  ! GREATHER        [ shift and go to state 46 ]
  ! GREATHEREQ      [ shift and go to state 47 ]
  ! EQUALITY        [ shift and go to state 48 ]
  ! DIFERENT        [ shift and go to state 49 ]


state 64

    (23) exp_relacional -> exp_relacional LESSEQ exp_relacional .
    (22) exp_relacional -> exp_relacional . LESS exp_relacional
    (23) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (24) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (25) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (26) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (27) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    LESSEQ          reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    GREATHER        reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    GREATHEREQ      reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    EQUALITY        reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    DIFERENT        reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    RPAR            reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    AND             reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    OR              reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    PRINT           reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    PRINTLN         reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    ID              reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    WHILE           reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    IF              reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    $end            reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    RBRACE          reduce using rule 23 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)

  ! LESS            [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]
  ! GREATHER        [ shift and go to state 46 ]
  ! GREATHEREQ      [ shift and go to state 47 ]
  ! EQUALITY        [ shift and go to state 48 ]
  ! DIFERENT        [ shift and go to state 49 ]


state 65

    (24) exp_relacional -> exp_relacional GREATHER exp_relacional .
    (22) exp_relacional -> exp_relacional . LESS exp_relacional
    (23) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (24) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (25) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (26) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (27) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    LESSEQ          reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    GREATHER        reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    GREATHEREQ      reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    EQUALITY        reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    DIFERENT        reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    RPAR            reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    AND             reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    OR              reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    PRINT           reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    PRINTLN         reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    ID              reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    WHILE           reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    IF              reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    $end            reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    RBRACE          reduce using rule 24 (exp_relacional -> exp_relacional GREATHER exp_relacional .)

  ! LESS            [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]
  ! GREATHER        [ shift and go to state 46 ]
  ! GREATHEREQ      [ shift and go to state 47 ]
  ! EQUALITY        [ shift and go to state 48 ]
  ! DIFERENT        [ shift and go to state 49 ]


state 66

    (25) exp_relacional -> exp_relacional GREATHEREQ exp_relacional .
    (22) exp_relacional -> exp_relacional . LESS exp_relacional
    (23) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (24) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (25) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (26) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (27) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    LESSEQ          reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    GREATHER        reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    GREATHEREQ      reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    EQUALITY        reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    DIFERENT        reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    RPAR            reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    AND             reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    OR              reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    PRINT           reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    PRINTLN         reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    ID              reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    WHILE           reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    IF              reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    $end            reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    RBRACE          reduce using rule 25 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)

  ! LESS            [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]
  ! GREATHER        [ shift and go to state 46 ]
  ! GREATHEREQ      [ shift and go to state 47 ]
  ! EQUALITY        [ shift and go to state 48 ]
  ! DIFERENT        [ shift and go to state 49 ]


state 67

    (26) exp_relacional -> exp_relacional EQUALITY exp_relacional .
    (22) exp_relacional -> exp_relacional . LESS exp_relacional
    (23) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (24) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (25) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (26) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (27) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    LESSEQ          reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    GREATHER        reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    GREATHEREQ      reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    EQUALITY        reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    DIFERENT        reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    RPAR            reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    AND             reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    OR              reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    PRINT           reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    PRINTLN         reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    ID              reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    WHILE           reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    IF              reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    $end            reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    RBRACE          reduce using rule 26 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)

  ! LESS            [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]
  ! GREATHER        [ shift and go to state 46 ]
  ! GREATHEREQ      [ shift and go to state 47 ]
  ! EQUALITY        [ shift and go to state 48 ]
  ! DIFERENT        [ shift and go to state 49 ]


state 68

    (27) exp_relacional -> exp_relacional DIFERENT exp_relacional .
    (22) exp_relacional -> exp_relacional . LESS exp_relacional
    (23) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (24) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (25) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (26) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (27) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    LESSEQ          reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    GREATHER        reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    GREATHEREQ      reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    EQUALITY        reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    DIFERENT        reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    RPAR            reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    AND             reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    OR              reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    PRINT           reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    PRINTLN         reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    ID              reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    WHILE           reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    IF              reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    $end            reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    RBRACE          reduce using rule 27 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)

  ! LESS            [ shift and go to state 44 ]
  ! LESSEQ          [ shift and go to state 45 ]
  ! GREATHER        [ shift and go to state 46 ]
  ! GREATHEREQ      [ shift and go to state 47 ]
  ! EQUALITY        [ shift and go to state 48 ]
  ! DIFERENT        [ shift and go to state 49 ]


state 69

    (29) exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .
    (29) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (30) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (31) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (32) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (33) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (34) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    MINUS           reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    LESS            reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    LESSEQ          reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    GREATHER        reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    EQUALITY        reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    DIFERENT        reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    RPAR            reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    AND             reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    OR              reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    PRINT           reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    PRINTLN         reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    ID              reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    WHILE           reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    IF              reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    $end            reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    RBRACE          reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    POT             shift and go to state 55

  ! TIMES           [ reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! DIV             [ reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! MOD             [ reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! POT             [ reduce using rule 29 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]


state 70

    (30) exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .
    (29) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (30) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (31) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (32) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (33) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (34) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    MINUS           reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    LESS            reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    LESSEQ          reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    GREATHER        reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    EQUALITY        reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    DIFERENT        reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    RPAR            reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    AND             reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    OR              reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    PRINT           reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    PRINTLN         reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    ID              reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    WHILE           reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    IF              reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    $end            reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    RBRACE          reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    TIMES           shift and go to state 52
    DIV             shift and go to state 53
    MOD             shift and go to state 54
    POT             shift and go to state 55

  ! TIMES           [ reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! DIV             [ reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! MOD             [ reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! POT             [ reduce using rule 30 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]


state 71

    (31) exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .
    (29) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (30) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (31) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (32) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (33) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (34) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    MINUS           reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    TIMES           reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    DIV             reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    LESS            reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    LESSEQ          reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    GREATHER        reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    GREATHEREQ      reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    EQUALITY        reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    DIFERENT        reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    RPAR            reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    AND             reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    OR              reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    PRINT           reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    PRINTLN         reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    ID              reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    WHILE           reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    IF              reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    $end            reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    RBRACE          reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    MOD             shift and go to state 54
    POT             shift and go to state 55

  ! MOD             [ reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .) ]
  ! POT             [ reduce using rule 31 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIV             [ shift and go to state 53 ]


state 72

    (32) exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .
    (29) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (30) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (31) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (32) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (33) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (34) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    MINUS           reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    TIMES           reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    DIV             reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    LESS            reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    LESSEQ          reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    GREATHER        reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    GREATHEREQ      reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    EQUALITY        reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    DIFERENT        reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    RPAR            reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    AND             reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    OR              reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    PRINT           reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    PRINTLN         reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    ID              reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    WHILE           reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    IF              reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    $end            reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    RBRACE          reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    MOD             shift and go to state 54
    POT             shift and go to state 55

  ! MOD             [ reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .) ]
  ! POT             [ reduce using rule 32 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIV             [ shift and go to state 53 ]


state 73

    (33) exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .
    (29) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (30) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (31) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (32) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (33) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (34) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    MINUS           reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    TIMES           reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    DIV             reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    MOD             reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    LESS            reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    LESSEQ          reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    GREATHER        reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    GREATHEREQ      reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    EQUALITY        reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    DIFERENT        reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    RPAR            reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    AND             reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    OR              reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    PRINT           reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    PRINTLN         reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    ID              reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    WHILE           reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    IF              reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    $end            reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    RBRACE          reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    POT             shift and go to state 55

  ! POT             [ reduce using rule 33 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIV             [ shift and go to state 53 ]
  ! MOD             [ shift and go to state 54 ]


state 74

    (34) exp_aritmetica -> exp_aritmetica POT exp_aritmetica .
    (29) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (30) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (31) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (32) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (33) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (34) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica

    PLUS            reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    MINUS           reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    TIMES           reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    DIV             reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    MOD             reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    POT             reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    LESS            reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    LESSEQ          reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    GREATHER        reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    GREATHEREQ      reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    EQUALITY        reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    DIFERENT        reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    RPAR            reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    AND             reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    OR              reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    PRINT           reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    PRINTLN         reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    ID              reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    WHILE           reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    IF              reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    $end            reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    RBRACE          reduce using rule 34 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)

  ! PLUS            [ shift and go to state 50 ]
  ! MINUS           [ shift and go to state 51 ]
  ! TIMES           [ shift and go to state 52 ]
  ! DIV             [ shift and go to state 53 ]
  ! MOD             [ shift and go to state 54 ]
  ! POT             [ shift and go to state 55 ]


state 75

    (15) while -> WHILE LPAR exp_logica RPAR LBRACE . instrucciones RBRACE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR exp_logica RPAR
    (12) println -> . PRINTLN LPAR exp_logica RPAR
    (13) definicion -> . ID
    (14) asignacion -> . ID EQUAL exp_logica
    (15) while -> . WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (16) if -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instrucciones                  shift and go to state 77
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 76

    (16) if -> IF LPAR exp_logica RPAR LBRACE . instrucciones RBRACE
    (17) if_else -> IF LPAR exp_logica RPAR LBRACE . instrucciones RBRACE ELSE LBRACE instrucciones RBRACE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR exp_logica RPAR
    (12) println -> . PRINTLN LPAR exp_logica RPAR
    (13) definicion -> . ID
    (14) asignacion -> . ID EQUAL exp_logica
    (15) while -> . WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (16) if -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instrucciones                  shift and go to state 78
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 77

    (15) while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones . RBRACE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR exp_logica RPAR
    (12) println -> . PRINTLN LPAR exp_logica RPAR
    (13) definicion -> . ID
    (14) asignacion -> . ID EQUAL exp_logica
    (15) while -> . WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (16) if -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    RBRACE          shift and go to state 79
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instruccion                    shift and go to state 16
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 78

    (16) if -> IF LPAR exp_logica RPAR LBRACE instrucciones . RBRACE
    (17) if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones . RBRACE ELSE LBRACE instrucciones RBRACE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR exp_logica RPAR
    (12) println -> . PRINTLN LPAR exp_logica RPAR
    (13) definicion -> . ID
    (14) asignacion -> . ID EQUAL exp_logica
    (15) while -> . WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (16) if -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    RBRACE          shift and go to state 80
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instruccion                    shift and go to state 16
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 79

    (15) while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE .

    PRINT           reduce using rule 15 (while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    PRINTLN         reduce using rule 15 (while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    ID              reduce using rule 15 (while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    WHILE           reduce using rule 15 (while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    IF              reduce using rule 15 (while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    $end            reduce using rule 15 (while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    RBRACE          reduce using rule 15 (while -> WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)


state 80

    (16) if -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE .
    (17) if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE . ELSE LBRACE instrucciones RBRACE

    PRINT           reduce using rule 16 (if -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    PRINTLN         reduce using rule 16 (if -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    ID              reduce using rule 16 (if -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    WHILE           reduce using rule 16 (if -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    IF              reduce using rule 16 (if -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    $end            reduce using rule 16 (if -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    RBRACE          reduce using rule 16 (if -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE .)
    ELSE            shift and go to state 81


state 81

    (17) if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE . LBRACE instrucciones RBRACE

    LBRACE          shift and go to state 82


state 82

    (17) if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE . instrucciones RBRACE
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR exp_logica RPAR
    (12) println -> . PRINTLN LPAR exp_logica RPAR
    (13) definicion -> . ID
    (14) asignacion -> . ID EQUAL exp_logica
    (15) while -> . WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (16) if -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instrucciones                  shift and go to state 83
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 83

    (17) if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones . RBRACE
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . asignacion
    (8) instruccion -> . while
    (9) instruccion -> . if
    (10) instruccion -> . if_else
    (11) print -> . PRINT LPAR exp_logica RPAR
    (12) println -> . PRINTLN LPAR exp_logica RPAR
    (13) definicion -> . ID
    (14) asignacion -> . ID EQUAL exp_logica
    (15) while -> . WHILE LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (16) if -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE
    (17) if_else -> . IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE

    RBRACE          shift and go to state 84
    PRINT           shift and go to state 11
    PRINTLN         shift and go to state 12
    ID              shift and go to state 13
    WHILE           shift and go to state 14
    IF              shift and go to state 15

    instruccion                    shift and go to state 16
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    asignacion                     shift and go to state 7
    while                          shift and go to state 8
    if                             shift and go to state 9
    if_else                        shift and go to state 10

state 84

    (17) if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE .

    PRINT           reduce using rule 17 (if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE .)
    PRINTLN         reduce using rule 17 (if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE .)
    ID              reduce using rule 17 (if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE .)
    WHILE           reduce using rule 17 (if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE .)
    IF              reduce using rule 17 (if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE .)
    $end            reduce using rule 17 (if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE .)
    RBRACE          reduce using rule 17 (if_else -> IF LPAR exp_logica RPAR LBRACE instrucciones RBRACE ELSE LBRACE instrucciones RBRACE .)

