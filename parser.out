Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print semicolon
Rule 5     instruccion -> println semicolon
Rule 6     instruccion -> definicion semicolon
Rule 7     instruccion -> while semicolon
Rule 8     instruccion -> for semicolon
Rule 9     instruccion -> function semicolon
Rule 10    instruccion -> if semicolon
Rule 11    instruccion -> if_else semicolon
Rule 12    print -> PRINT LPAR print_args RPAR
Rule 13    println -> PRINTLN LPAR print_args RPAR
Rule 14    print_args -> print_args COMMA exp_logica
Rule 15    print_args -> exp_logica
Rule 16    definicion -> ambito ID asignacion
Rule 17    ambito -> LOCAL
Rule 18    ambito -> GLOBAL
Rule 19    ambito -> empty
Rule 20    asignacion -> EQUAL exp_logica assign_type
Rule 21    asignacion -> empty
Rule 22    assign_type -> AS data_type
Rule 23    assign_type -> empty
Rule 24    data_type -> INT64
Rule 25    data_type -> FLOAT64
Rule 26    data_type -> STR
Rule 27    data_type -> CHR
Rule 28    data_type -> BOOL
Rule 29    data_type -> NOTHING
Rule 30    while -> WHILE exp_logica instrucciones END
Rule 31    if -> IF exp_logica instrucciones END
Rule 32    if_else -> IF exp_logica instrucciones ELSE instrucciones END
Rule 33    for -> FOR ID IN for_list instrucciones END
Rule 34    for_list -> CADENA
Rule 35    function -> FUNCTION ID LPAR param RPAR instrucciones END
Rule 36    param -> params
Rule 37    param -> empty
Rule 38    params -> params COMMA ID
Rule 39    params -> ID
Rule 40    semicolon -> SEMICOL
Rule 41    semicolon -> empty
Rule 42    exp_logica -> exp_logica AND exp_logica
Rule 43    exp_logica -> exp_logica OR exp_logica
Rule 44    exp_logica -> NOT exp_logica
Rule 45    exp_logica -> exp_relacional
Rule 46    exp_relacional -> exp_relacional LESS exp_relacional
Rule 47    exp_relacional -> exp_relacional LESSEQ exp_relacional
Rule 48    exp_relacional -> exp_relacional GREATHER exp_relacional
Rule 49    exp_relacional -> exp_relacional GREATHEREQ exp_relacional
Rule 50    exp_relacional -> exp_relacional EQUALITY exp_relacional
Rule 51    exp_relacional -> exp_relacional DIFERENT exp_relacional
Rule 52    exp_relacional -> exp_aritmetica
Rule 53    exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica
Rule 54    exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica
Rule 55    exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica
Rule 56    exp_aritmetica -> exp_aritmetica DIV exp_aritmetica
Rule 57    exp_aritmetica -> exp_aritmetica MOD exp_aritmetica
Rule 58    exp_aritmetica -> exp_aritmetica POT exp_aritmetica
Rule 59    exp_aritmetica -> exp_aritmetica COLON exp_aritmetica
Rule 60    exp_aritmetica -> MINUS exp_aritmetica
Rule 61    exp_aritmetica -> LPAR exp_logica RPAR
Rule 62    exp_aritmetica -> NUMERO
Rule 63    exp_aritmetica -> DECIMAL
Rule 64    exp_aritmetica -> CARACTER
Rule 65    exp_aritmetica -> CADENA
Rule 66    exp_aritmetica -> TRUE
Rule 67    exp_aritmetica -> FALSE
Rule 68    exp_aritmetica -> ID
Rule 69    exp_aritmetica -> TYPEOF LPAR exp_logica RPAR
Rule 70    exp_aritmetica -> STRING LPAR exp_logica RPAR
Rule 71    exp_aritmetica -> FLOAT LPAR exp_logica RPAR
Rule 72    exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR
Rule 73    exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR
Rule 74    exp_aritmetica -> SIN LPAR exp_logica RPAR
Rule 75    exp_aritmetica -> COS LPAR exp_logica RPAR
Rule 76    exp_aritmetica -> TAN LPAR exp_logica RPAR
Rule 77    exp_aritmetica -> LOG10 LPAR exp_logica RPAR
Rule 78    exp_aritmetica -> SQRT LPAR exp_logica RPAR
Rule 79    exp_aritmetica -> LENGTH LPAR exp_logica RPAR
Rule 80    exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR
Rule 81    exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR
Rule 82    exp_aritmetica -> ID LPAR arg RPAR
Rule 83    arg -> args
Rule 84    arg -> empty
Rule 85    args -> args COMMA exp_logica
Rule 86    args -> exp_logica
Rule 87    empty -> <empty>

Terminals, with rules where they appear

AND                  : 42
AS                   : 22
BOOL                 : 28
CADENA               : 34 65
CARACTER             : 64
CHR                  : 27
COLON                : 59
COMMA                : 14 38 72 73 85
COS                  : 75
DECIMAL              : 63
DIFERENT             : 51
DIV                  : 56
ELSE                 : 32
END                  : 30 31 32 33 35
EQUAL                : 20
EQUALITY             : 50
FALSE                : 67
FLOAT                : 71
FLOAT64              : 25
FOR                  : 33
FUNCTION             : 35
GLOBAL               : 18
GREATHER             : 48
GREATHEREQ           : 49
ID                   : 16 33 35 38 39 68 82
IF                   : 31 32
IN                   : 33
INT64                : 24
LENGTH               : 79
LESS                 : 46
LESSEQ               : 47
LOCAL                : 17
LOG10                : 77
LOWERCASE            : 81
LPAR                 : 12 13 35 61 69 70 71 72 73 74 75 76 77 78 79 80 81 82
MINUS                : 54 60
MOD                  : 57
NOT                  : 44
NOTHING              : 29
NUMERO               : 62
OR                   : 43
PARSE                : 73
PLUS                 : 53
POT                  : 58
PRINT                : 12
PRINTLN              : 13
RPAR                 : 12 13 35 61 69 70 71 72 73 74 75 76 77 78 79 80 81 82
SEMICOL              : 40
SIN                  : 74
SQRT                 : 78
STR                  : 26
STRING               : 70
TAN                  : 76
TIMES                : 55
TRUE                 : 66
TRUNC                : 72
TYPEOF               : 69
UPPERCASE            : 80
WHILE                : 30
error                : 

Nonterminals, with rules where they appear

ambito               : 16
arg                  : 82
args                 : 83 85
asignacion           : 16
assign_type          : 20
data_type            : 22 72 73
definicion           : 6
empty                : 19 21 23 37 41 84
exp_aritmetica       : 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60
exp_logica           : 14 15 20 30 31 32 42 42 43 43 44 61 69 70 71 72 73 74 75 76 77 78 79 80 81 85 86
exp_relacional       : 45 46 46 47 47 48 48 49 49 50 50 51 51
for                  : 8
for_list             : 33
function             : 9
if                   : 10
if_else              : 11
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 30 31 32 32 33 35
param                : 35
params               : 36 38
print                : 4
print_args           : 12 13 14
println              : 5
semicolon            : 4 5 6 7 8 9 10 11
while                : 7

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    $end            reduce using rule 1 (init -> instrucciones .)
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instruccion                    shift and go to state 22
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 3

    (3) instrucciones -> instruccion .

    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    PRINTLN         reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    FOR             reduce using rule 3 (instrucciones -> instruccion .)
    FUNCTION        reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    LOCAL           reduce using rule 3 (instrucciones -> instruccion .)
    GLOBAL          reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    END             reduce using rule 3 (instrucciones -> instruccion .)
    ELSE            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print . semicolon
    (40) semicolon -> . SEMICOL
    (41) semicolon -> . empty
    (87) empty -> .

    SEMICOL         shift and go to state 24
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    semicolon                      shift and go to state 23
    empty                          shift and go to state 25

state 5

    (5) instruccion -> println . semicolon
    (40) semicolon -> . SEMICOL
    (41) semicolon -> . empty
    (87) empty -> .

    SEMICOL         shift and go to state 24
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    semicolon                      shift and go to state 26
    empty                          shift and go to state 25

state 6

    (6) instruccion -> definicion . semicolon
    (40) semicolon -> . SEMICOL
    (41) semicolon -> . empty
    (87) empty -> .

    SEMICOL         shift and go to state 24
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    semicolon                      shift and go to state 27
    empty                          shift and go to state 25

state 7

    (7) instruccion -> while . semicolon
    (40) semicolon -> . SEMICOL
    (41) semicolon -> . empty
    (87) empty -> .

    SEMICOL         shift and go to state 24
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    semicolon                      shift and go to state 28
    empty                          shift and go to state 25

state 8

    (8) instruccion -> for . semicolon
    (40) semicolon -> . SEMICOL
    (41) semicolon -> . empty
    (87) empty -> .

    SEMICOL         shift and go to state 24
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    semicolon                      shift and go to state 29
    empty                          shift and go to state 25

state 9

    (9) instruccion -> function . semicolon
    (40) semicolon -> . SEMICOL
    (41) semicolon -> . empty
    (87) empty -> .

    SEMICOL         shift and go to state 24
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    semicolon                      shift and go to state 30
    empty                          shift and go to state 25

state 10

    (10) instruccion -> if . semicolon
    (40) semicolon -> . SEMICOL
    (41) semicolon -> . empty
    (87) empty -> .

    SEMICOL         shift and go to state 24
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    semicolon                      shift and go to state 31
    empty                          shift and go to state 25

state 11

    (11) instruccion -> if_else . semicolon
    (40) semicolon -> . SEMICOL
    (41) semicolon -> . empty
    (87) empty -> .

    SEMICOL         shift and go to state 24
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    semicolon                      shift and go to state 32
    empty                          shift and go to state 25

state 12

    (12) print -> PRINT . LPAR print_args RPAR

    LPAR            shift and go to state 33


state 13

    (13) println -> PRINTLN . LPAR print_args RPAR

    LPAR            shift and go to state 34


state 14

    (16) definicion -> ambito . ID asignacion

    ID              shift and go to state 35


state 15

    (30) while -> WHILE . exp_logica instrucciones END
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 36
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 16

    (33) for -> FOR . ID IN for_list instrucciones END

    ID              shift and go to state 62


state 17

    (35) function -> FUNCTION . ID LPAR param RPAR instrucciones END

    ID              shift and go to state 63


state 18

    (31) if -> IF . exp_logica instrucciones END
    (32) if_else -> IF . exp_logica instrucciones ELSE instrucciones END
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 64
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 19

    (17) ambito -> LOCAL .

    ID              reduce using rule 17 (ambito -> LOCAL .)


state 20

    (18) ambito -> GLOBAL .

    ID              reduce using rule 18 (ambito -> GLOBAL .)


state 21

    (19) ambito -> empty .

    ID              reduce using rule 19 (ambito -> empty .)


state 22

    (2) instrucciones -> instrucciones instruccion .

    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINTLN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FOR             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    FUNCTION        reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    LOCAL           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    GLOBAL          reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    END             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 23

    (4) instruccion -> print semicolon .

    PRINT           reduce using rule 4 (instruccion -> print semicolon .)
    PRINTLN         reduce using rule 4 (instruccion -> print semicolon .)
    WHILE           reduce using rule 4 (instruccion -> print semicolon .)
    FOR             reduce using rule 4 (instruccion -> print semicolon .)
    FUNCTION        reduce using rule 4 (instruccion -> print semicolon .)
    IF              reduce using rule 4 (instruccion -> print semicolon .)
    LOCAL           reduce using rule 4 (instruccion -> print semicolon .)
    GLOBAL          reduce using rule 4 (instruccion -> print semicolon .)
    ID              reduce using rule 4 (instruccion -> print semicolon .)
    $end            reduce using rule 4 (instruccion -> print semicolon .)
    END             reduce using rule 4 (instruccion -> print semicolon .)
    ELSE            reduce using rule 4 (instruccion -> print semicolon .)


state 24

    (40) semicolon -> SEMICOL .

    PRINT           reduce using rule 40 (semicolon -> SEMICOL .)
    PRINTLN         reduce using rule 40 (semicolon -> SEMICOL .)
    WHILE           reduce using rule 40 (semicolon -> SEMICOL .)
    FOR             reduce using rule 40 (semicolon -> SEMICOL .)
    FUNCTION        reduce using rule 40 (semicolon -> SEMICOL .)
    IF              reduce using rule 40 (semicolon -> SEMICOL .)
    LOCAL           reduce using rule 40 (semicolon -> SEMICOL .)
    GLOBAL          reduce using rule 40 (semicolon -> SEMICOL .)
    ID              reduce using rule 40 (semicolon -> SEMICOL .)
    $end            reduce using rule 40 (semicolon -> SEMICOL .)
    END             reduce using rule 40 (semicolon -> SEMICOL .)
    ELSE            reduce using rule 40 (semicolon -> SEMICOL .)


state 25

    (41) semicolon -> empty .

    PRINT           reduce using rule 41 (semicolon -> empty .)
    PRINTLN         reduce using rule 41 (semicolon -> empty .)
    WHILE           reduce using rule 41 (semicolon -> empty .)
    FOR             reduce using rule 41 (semicolon -> empty .)
    FUNCTION        reduce using rule 41 (semicolon -> empty .)
    IF              reduce using rule 41 (semicolon -> empty .)
    LOCAL           reduce using rule 41 (semicolon -> empty .)
    GLOBAL          reduce using rule 41 (semicolon -> empty .)
    ID              reduce using rule 41 (semicolon -> empty .)
    $end            reduce using rule 41 (semicolon -> empty .)
    END             reduce using rule 41 (semicolon -> empty .)
    ELSE            reduce using rule 41 (semicolon -> empty .)


state 26

    (5) instruccion -> println semicolon .

    PRINT           reduce using rule 5 (instruccion -> println semicolon .)
    PRINTLN         reduce using rule 5 (instruccion -> println semicolon .)
    WHILE           reduce using rule 5 (instruccion -> println semicolon .)
    FOR             reduce using rule 5 (instruccion -> println semicolon .)
    FUNCTION        reduce using rule 5 (instruccion -> println semicolon .)
    IF              reduce using rule 5 (instruccion -> println semicolon .)
    LOCAL           reduce using rule 5 (instruccion -> println semicolon .)
    GLOBAL          reduce using rule 5 (instruccion -> println semicolon .)
    ID              reduce using rule 5 (instruccion -> println semicolon .)
    $end            reduce using rule 5 (instruccion -> println semicolon .)
    END             reduce using rule 5 (instruccion -> println semicolon .)
    ELSE            reduce using rule 5 (instruccion -> println semicolon .)


state 27

    (6) instruccion -> definicion semicolon .

    PRINT           reduce using rule 6 (instruccion -> definicion semicolon .)
    PRINTLN         reduce using rule 6 (instruccion -> definicion semicolon .)
    WHILE           reduce using rule 6 (instruccion -> definicion semicolon .)
    FOR             reduce using rule 6 (instruccion -> definicion semicolon .)
    FUNCTION        reduce using rule 6 (instruccion -> definicion semicolon .)
    IF              reduce using rule 6 (instruccion -> definicion semicolon .)
    LOCAL           reduce using rule 6 (instruccion -> definicion semicolon .)
    GLOBAL          reduce using rule 6 (instruccion -> definicion semicolon .)
    ID              reduce using rule 6 (instruccion -> definicion semicolon .)
    $end            reduce using rule 6 (instruccion -> definicion semicolon .)
    END             reduce using rule 6 (instruccion -> definicion semicolon .)
    ELSE            reduce using rule 6 (instruccion -> definicion semicolon .)


state 28

    (7) instruccion -> while semicolon .

    PRINT           reduce using rule 7 (instruccion -> while semicolon .)
    PRINTLN         reduce using rule 7 (instruccion -> while semicolon .)
    WHILE           reduce using rule 7 (instruccion -> while semicolon .)
    FOR             reduce using rule 7 (instruccion -> while semicolon .)
    FUNCTION        reduce using rule 7 (instruccion -> while semicolon .)
    IF              reduce using rule 7 (instruccion -> while semicolon .)
    LOCAL           reduce using rule 7 (instruccion -> while semicolon .)
    GLOBAL          reduce using rule 7 (instruccion -> while semicolon .)
    ID              reduce using rule 7 (instruccion -> while semicolon .)
    $end            reduce using rule 7 (instruccion -> while semicolon .)
    END             reduce using rule 7 (instruccion -> while semicolon .)
    ELSE            reduce using rule 7 (instruccion -> while semicolon .)


state 29

    (8) instruccion -> for semicolon .

    PRINT           reduce using rule 8 (instruccion -> for semicolon .)
    PRINTLN         reduce using rule 8 (instruccion -> for semicolon .)
    WHILE           reduce using rule 8 (instruccion -> for semicolon .)
    FOR             reduce using rule 8 (instruccion -> for semicolon .)
    FUNCTION        reduce using rule 8 (instruccion -> for semicolon .)
    IF              reduce using rule 8 (instruccion -> for semicolon .)
    LOCAL           reduce using rule 8 (instruccion -> for semicolon .)
    GLOBAL          reduce using rule 8 (instruccion -> for semicolon .)
    ID              reduce using rule 8 (instruccion -> for semicolon .)
    $end            reduce using rule 8 (instruccion -> for semicolon .)
    END             reduce using rule 8 (instruccion -> for semicolon .)
    ELSE            reduce using rule 8 (instruccion -> for semicolon .)


state 30

    (9) instruccion -> function semicolon .

    PRINT           reduce using rule 9 (instruccion -> function semicolon .)
    PRINTLN         reduce using rule 9 (instruccion -> function semicolon .)
    WHILE           reduce using rule 9 (instruccion -> function semicolon .)
    FOR             reduce using rule 9 (instruccion -> function semicolon .)
    FUNCTION        reduce using rule 9 (instruccion -> function semicolon .)
    IF              reduce using rule 9 (instruccion -> function semicolon .)
    LOCAL           reduce using rule 9 (instruccion -> function semicolon .)
    GLOBAL          reduce using rule 9 (instruccion -> function semicolon .)
    ID              reduce using rule 9 (instruccion -> function semicolon .)
    $end            reduce using rule 9 (instruccion -> function semicolon .)
    END             reduce using rule 9 (instruccion -> function semicolon .)
    ELSE            reduce using rule 9 (instruccion -> function semicolon .)


state 31

    (10) instruccion -> if semicolon .

    PRINT           reduce using rule 10 (instruccion -> if semicolon .)
    PRINTLN         reduce using rule 10 (instruccion -> if semicolon .)
    WHILE           reduce using rule 10 (instruccion -> if semicolon .)
    FOR             reduce using rule 10 (instruccion -> if semicolon .)
    FUNCTION        reduce using rule 10 (instruccion -> if semicolon .)
    IF              reduce using rule 10 (instruccion -> if semicolon .)
    LOCAL           reduce using rule 10 (instruccion -> if semicolon .)
    GLOBAL          reduce using rule 10 (instruccion -> if semicolon .)
    ID              reduce using rule 10 (instruccion -> if semicolon .)
    $end            reduce using rule 10 (instruccion -> if semicolon .)
    END             reduce using rule 10 (instruccion -> if semicolon .)
    ELSE            reduce using rule 10 (instruccion -> if semicolon .)


state 32

    (11) instruccion -> if_else semicolon .

    PRINT           reduce using rule 11 (instruccion -> if_else semicolon .)
    PRINTLN         reduce using rule 11 (instruccion -> if_else semicolon .)
    WHILE           reduce using rule 11 (instruccion -> if_else semicolon .)
    FOR             reduce using rule 11 (instruccion -> if_else semicolon .)
    FUNCTION        reduce using rule 11 (instruccion -> if_else semicolon .)
    IF              reduce using rule 11 (instruccion -> if_else semicolon .)
    LOCAL           reduce using rule 11 (instruccion -> if_else semicolon .)
    GLOBAL          reduce using rule 11 (instruccion -> if_else semicolon .)
    ID              reduce using rule 11 (instruccion -> if_else semicolon .)
    $end            reduce using rule 11 (instruccion -> if_else semicolon .)
    END             reduce using rule 11 (instruccion -> if_else semicolon .)
    ELSE            reduce using rule 11 (instruccion -> if_else semicolon .)


state 33

    (12) print -> PRINT LPAR . print_args RPAR
    (14) print_args -> . print_args COMMA exp_logica
    (15) print_args -> . exp_logica
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    print_args                     shift and go to state 65
    exp_logica                     shift and go to state 66
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 34

    (13) println -> PRINTLN LPAR . print_args RPAR
    (14) print_args -> . print_args COMMA exp_logica
    (15) print_args -> . exp_logica
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    print_args                     shift and go to state 67
    exp_logica                     shift and go to state 66
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 35

    (16) definicion -> ambito ID . asignacion
    (20) asignacion -> . EQUAL exp_logica assign_type
    (21) asignacion -> . empty
    (87) empty -> .

    EQUAL           shift and go to state 69
    SEMICOL         reduce using rule 87 (empty -> .)
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    asignacion                     shift and go to state 68
    empty                          shift and go to state 70

state 36

    (30) while -> WHILE exp_logica . instrucciones END
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    AND             shift and go to state 72
    OR              shift and go to state 73
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instrucciones                  shift and go to state 71
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 37

    (44) exp_logica -> NOT . exp_logica
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 74
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 38

    (45) exp_logica -> exp_relacional .
    (46) exp_relacional -> exp_relacional . LESS exp_relacional
    (47) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (48) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (49) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (50) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (51) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    AND             reduce using rule 45 (exp_logica -> exp_relacional .)
    OR              reduce using rule 45 (exp_logica -> exp_relacional .)
    PRINT           reduce using rule 45 (exp_logica -> exp_relacional .)
    PRINTLN         reduce using rule 45 (exp_logica -> exp_relacional .)
    WHILE           reduce using rule 45 (exp_logica -> exp_relacional .)
    FOR             reduce using rule 45 (exp_logica -> exp_relacional .)
    FUNCTION        reduce using rule 45 (exp_logica -> exp_relacional .)
    IF              reduce using rule 45 (exp_logica -> exp_relacional .)
    LOCAL           reduce using rule 45 (exp_logica -> exp_relacional .)
    GLOBAL          reduce using rule 45 (exp_logica -> exp_relacional .)
    ID              reduce using rule 45 (exp_logica -> exp_relacional .)
    RPAR            reduce using rule 45 (exp_logica -> exp_relacional .)
    COMMA           reduce using rule 45 (exp_logica -> exp_relacional .)
    AS              reduce using rule 45 (exp_logica -> exp_relacional .)
    SEMICOL         reduce using rule 45 (exp_logica -> exp_relacional .)
    $end            reduce using rule 45 (exp_logica -> exp_relacional .)
    END             reduce using rule 45 (exp_logica -> exp_relacional .)
    ELSE            reduce using rule 45 (exp_logica -> exp_relacional .)
    LESS            shift and go to state 75
    LESSEQ          shift and go to state 76
    GREATHER        shift and go to state 77
    GREATHEREQ      shift and go to state 78
    EQUALITY        shift and go to state 79
    DIFERENT        shift and go to state 80


state 39

    (52) exp_relacional -> exp_aritmetica .
    (53) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (54) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (55) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (56) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (57) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (58) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (59) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    LESS            reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    LESSEQ          reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    GREATHER        reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    GREATHEREQ      reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    EQUALITY        reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    DIFERENT        reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    AND             reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    OR              reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    PRINT           reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    PRINTLN         reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    WHILE           reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    FOR             reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    FUNCTION        reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    IF              reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    LOCAL           reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    GLOBAL          reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    ID              reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    RPAR            reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    COMMA           reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    AS              reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    SEMICOL         reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    $end            reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    END             reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    ELSE            reduce using rule 52 (exp_relacional -> exp_aritmetica .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIV             shift and go to state 84
    MOD             shift and go to state 85
    POT             shift and go to state 86
    COLON           shift and go to state 87


state 40

    (60) exp_aritmetica -> MINUS . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_aritmetica                 shift and go to state 88

state 41

    (61) exp_aritmetica -> LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 89
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 42

    (62) exp_aritmetica -> NUMERO .

    PLUS            reduce using rule 62 (exp_aritmetica -> NUMERO .)
    MINUS           reduce using rule 62 (exp_aritmetica -> NUMERO .)
    TIMES           reduce using rule 62 (exp_aritmetica -> NUMERO .)
    DIV             reduce using rule 62 (exp_aritmetica -> NUMERO .)
    MOD             reduce using rule 62 (exp_aritmetica -> NUMERO .)
    POT             reduce using rule 62 (exp_aritmetica -> NUMERO .)
    COLON           reduce using rule 62 (exp_aritmetica -> NUMERO .)
    LESS            reduce using rule 62 (exp_aritmetica -> NUMERO .)
    LESSEQ          reduce using rule 62 (exp_aritmetica -> NUMERO .)
    GREATHER        reduce using rule 62 (exp_aritmetica -> NUMERO .)
    GREATHEREQ      reduce using rule 62 (exp_aritmetica -> NUMERO .)
    EQUALITY        reduce using rule 62 (exp_aritmetica -> NUMERO .)
    DIFERENT        reduce using rule 62 (exp_aritmetica -> NUMERO .)
    AND             reduce using rule 62 (exp_aritmetica -> NUMERO .)
    OR              reduce using rule 62 (exp_aritmetica -> NUMERO .)
    PRINT           reduce using rule 62 (exp_aritmetica -> NUMERO .)
    PRINTLN         reduce using rule 62 (exp_aritmetica -> NUMERO .)
    WHILE           reduce using rule 62 (exp_aritmetica -> NUMERO .)
    FOR             reduce using rule 62 (exp_aritmetica -> NUMERO .)
    FUNCTION        reduce using rule 62 (exp_aritmetica -> NUMERO .)
    IF              reduce using rule 62 (exp_aritmetica -> NUMERO .)
    LOCAL           reduce using rule 62 (exp_aritmetica -> NUMERO .)
    GLOBAL          reduce using rule 62 (exp_aritmetica -> NUMERO .)
    ID              reduce using rule 62 (exp_aritmetica -> NUMERO .)
    RPAR            reduce using rule 62 (exp_aritmetica -> NUMERO .)
    COMMA           reduce using rule 62 (exp_aritmetica -> NUMERO .)
    AS              reduce using rule 62 (exp_aritmetica -> NUMERO .)
    SEMICOL         reduce using rule 62 (exp_aritmetica -> NUMERO .)
    $end            reduce using rule 62 (exp_aritmetica -> NUMERO .)
    END             reduce using rule 62 (exp_aritmetica -> NUMERO .)
    ELSE            reduce using rule 62 (exp_aritmetica -> NUMERO .)


state 43

    (63) exp_aritmetica -> DECIMAL .

    PLUS            reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    MINUS           reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    TIMES           reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    DIV             reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    MOD             reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    POT             reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    COLON           reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    LESS            reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    LESSEQ          reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    GREATHER        reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    GREATHEREQ      reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    EQUALITY        reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    DIFERENT        reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    AND             reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    OR              reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    PRINT           reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    PRINTLN         reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    WHILE           reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    FOR             reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    FUNCTION        reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    IF              reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    LOCAL           reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    GLOBAL          reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    ID              reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    RPAR            reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    COMMA           reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    AS              reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    SEMICOL         reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    $end            reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    END             reduce using rule 63 (exp_aritmetica -> DECIMAL .)
    ELSE            reduce using rule 63 (exp_aritmetica -> DECIMAL .)


state 44

    (64) exp_aritmetica -> CARACTER .

    PLUS            reduce using rule 64 (exp_aritmetica -> CARACTER .)
    MINUS           reduce using rule 64 (exp_aritmetica -> CARACTER .)
    TIMES           reduce using rule 64 (exp_aritmetica -> CARACTER .)
    DIV             reduce using rule 64 (exp_aritmetica -> CARACTER .)
    MOD             reduce using rule 64 (exp_aritmetica -> CARACTER .)
    POT             reduce using rule 64 (exp_aritmetica -> CARACTER .)
    COLON           reduce using rule 64 (exp_aritmetica -> CARACTER .)
    LESS            reduce using rule 64 (exp_aritmetica -> CARACTER .)
    LESSEQ          reduce using rule 64 (exp_aritmetica -> CARACTER .)
    GREATHER        reduce using rule 64 (exp_aritmetica -> CARACTER .)
    GREATHEREQ      reduce using rule 64 (exp_aritmetica -> CARACTER .)
    EQUALITY        reduce using rule 64 (exp_aritmetica -> CARACTER .)
    DIFERENT        reduce using rule 64 (exp_aritmetica -> CARACTER .)
    AND             reduce using rule 64 (exp_aritmetica -> CARACTER .)
    OR              reduce using rule 64 (exp_aritmetica -> CARACTER .)
    PRINT           reduce using rule 64 (exp_aritmetica -> CARACTER .)
    PRINTLN         reduce using rule 64 (exp_aritmetica -> CARACTER .)
    WHILE           reduce using rule 64 (exp_aritmetica -> CARACTER .)
    FOR             reduce using rule 64 (exp_aritmetica -> CARACTER .)
    FUNCTION        reduce using rule 64 (exp_aritmetica -> CARACTER .)
    IF              reduce using rule 64 (exp_aritmetica -> CARACTER .)
    LOCAL           reduce using rule 64 (exp_aritmetica -> CARACTER .)
    GLOBAL          reduce using rule 64 (exp_aritmetica -> CARACTER .)
    ID              reduce using rule 64 (exp_aritmetica -> CARACTER .)
    RPAR            reduce using rule 64 (exp_aritmetica -> CARACTER .)
    COMMA           reduce using rule 64 (exp_aritmetica -> CARACTER .)
    AS              reduce using rule 64 (exp_aritmetica -> CARACTER .)
    SEMICOL         reduce using rule 64 (exp_aritmetica -> CARACTER .)
    $end            reduce using rule 64 (exp_aritmetica -> CARACTER .)
    END             reduce using rule 64 (exp_aritmetica -> CARACTER .)
    ELSE            reduce using rule 64 (exp_aritmetica -> CARACTER .)


state 45

    (65) exp_aritmetica -> CADENA .

    PLUS            reduce using rule 65 (exp_aritmetica -> CADENA .)
    MINUS           reduce using rule 65 (exp_aritmetica -> CADENA .)
    TIMES           reduce using rule 65 (exp_aritmetica -> CADENA .)
    DIV             reduce using rule 65 (exp_aritmetica -> CADENA .)
    MOD             reduce using rule 65 (exp_aritmetica -> CADENA .)
    POT             reduce using rule 65 (exp_aritmetica -> CADENA .)
    COLON           reduce using rule 65 (exp_aritmetica -> CADENA .)
    LESS            reduce using rule 65 (exp_aritmetica -> CADENA .)
    LESSEQ          reduce using rule 65 (exp_aritmetica -> CADENA .)
    GREATHER        reduce using rule 65 (exp_aritmetica -> CADENA .)
    GREATHEREQ      reduce using rule 65 (exp_aritmetica -> CADENA .)
    EQUALITY        reduce using rule 65 (exp_aritmetica -> CADENA .)
    DIFERENT        reduce using rule 65 (exp_aritmetica -> CADENA .)
    AND             reduce using rule 65 (exp_aritmetica -> CADENA .)
    OR              reduce using rule 65 (exp_aritmetica -> CADENA .)
    PRINT           reduce using rule 65 (exp_aritmetica -> CADENA .)
    PRINTLN         reduce using rule 65 (exp_aritmetica -> CADENA .)
    WHILE           reduce using rule 65 (exp_aritmetica -> CADENA .)
    FOR             reduce using rule 65 (exp_aritmetica -> CADENA .)
    FUNCTION        reduce using rule 65 (exp_aritmetica -> CADENA .)
    IF              reduce using rule 65 (exp_aritmetica -> CADENA .)
    LOCAL           reduce using rule 65 (exp_aritmetica -> CADENA .)
    GLOBAL          reduce using rule 65 (exp_aritmetica -> CADENA .)
    ID              reduce using rule 65 (exp_aritmetica -> CADENA .)
    RPAR            reduce using rule 65 (exp_aritmetica -> CADENA .)
    COMMA           reduce using rule 65 (exp_aritmetica -> CADENA .)
    AS              reduce using rule 65 (exp_aritmetica -> CADENA .)
    SEMICOL         reduce using rule 65 (exp_aritmetica -> CADENA .)
    $end            reduce using rule 65 (exp_aritmetica -> CADENA .)
    END             reduce using rule 65 (exp_aritmetica -> CADENA .)
    ELSE            reduce using rule 65 (exp_aritmetica -> CADENA .)


state 46

    (66) exp_aritmetica -> TRUE .

    PLUS            reduce using rule 66 (exp_aritmetica -> TRUE .)
    MINUS           reduce using rule 66 (exp_aritmetica -> TRUE .)
    TIMES           reduce using rule 66 (exp_aritmetica -> TRUE .)
    DIV             reduce using rule 66 (exp_aritmetica -> TRUE .)
    MOD             reduce using rule 66 (exp_aritmetica -> TRUE .)
    POT             reduce using rule 66 (exp_aritmetica -> TRUE .)
    COLON           reduce using rule 66 (exp_aritmetica -> TRUE .)
    LESS            reduce using rule 66 (exp_aritmetica -> TRUE .)
    LESSEQ          reduce using rule 66 (exp_aritmetica -> TRUE .)
    GREATHER        reduce using rule 66 (exp_aritmetica -> TRUE .)
    GREATHEREQ      reduce using rule 66 (exp_aritmetica -> TRUE .)
    EQUALITY        reduce using rule 66 (exp_aritmetica -> TRUE .)
    DIFERENT        reduce using rule 66 (exp_aritmetica -> TRUE .)
    AND             reduce using rule 66 (exp_aritmetica -> TRUE .)
    OR              reduce using rule 66 (exp_aritmetica -> TRUE .)
    PRINT           reduce using rule 66 (exp_aritmetica -> TRUE .)
    PRINTLN         reduce using rule 66 (exp_aritmetica -> TRUE .)
    WHILE           reduce using rule 66 (exp_aritmetica -> TRUE .)
    FOR             reduce using rule 66 (exp_aritmetica -> TRUE .)
    FUNCTION        reduce using rule 66 (exp_aritmetica -> TRUE .)
    IF              reduce using rule 66 (exp_aritmetica -> TRUE .)
    LOCAL           reduce using rule 66 (exp_aritmetica -> TRUE .)
    GLOBAL          reduce using rule 66 (exp_aritmetica -> TRUE .)
    ID              reduce using rule 66 (exp_aritmetica -> TRUE .)
    RPAR            reduce using rule 66 (exp_aritmetica -> TRUE .)
    COMMA           reduce using rule 66 (exp_aritmetica -> TRUE .)
    AS              reduce using rule 66 (exp_aritmetica -> TRUE .)
    SEMICOL         reduce using rule 66 (exp_aritmetica -> TRUE .)
    $end            reduce using rule 66 (exp_aritmetica -> TRUE .)
    END             reduce using rule 66 (exp_aritmetica -> TRUE .)
    ELSE            reduce using rule 66 (exp_aritmetica -> TRUE .)


state 47

    (67) exp_aritmetica -> FALSE .

    PLUS            reduce using rule 67 (exp_aritmetica -> FALSE .)
    MINUS           reduce using rule 67 (exp_aritmetica -> FALSE .)
    TIMES           reduce using rule 67 (exp_aritmetica -> FALSE .)
    DIV             reduce using rule 67 (exp_aritmetica -> FALSE .)
    MOD             reduce using rule 67 (exp_aritmetica -> FALSE .)
    POT             reduce using rule 67 (exp_aritmetica -> FALSE .)
    COLON           reduce using rule 67 (exp_aritmetica -> FALSE .)
    LESS            reduce using rule 67 (exp_aritmetica -> FALSE .)
    LESSEQ          reduce using rule 67 (exp_aritmetica -> FALSE .)
    GREATHER        reduce using rule 67 (exp_aritmetica -> FALSE .)
    GREATHEREQ      reduce using rule 67 (exp_aritmetica -> FALSE .)
    EQUALITY        reduce using rule 67 (exp_aritmetica -> FALSE .)
    DIFERENT        reduce using rule 67 (exp_aritmetica -> FALSE .)
    AND             reduce using rule 67 (exp_aritmetica -> FALSE .)
    OR              reduce using rule 67 (exp_aritmetica -> FALSE .)
    PRINT           reduce using rule 67 (exp_aritmetica -> FALSE .)
    PRINTLN         reduce using rule 67 (exp_aritmetica -> FALSE .)
    WHILE           reduce using rule 67 (exp_aritmetica -> FALSE .)
    FOR             reduce using rule 67 (exp_aritmetica -> FALSE .)
    FUNCTION        reduce using rule 67 (exp_aritmetica -> FALSE .)
    IF              reduce using rule 67 (exp_aritmetica -> FALSE .)
    LOCAL           reduce using rule 67 (exp_aritmetica -> FALSE .)
    GLOBAL          reduce using rule 67 (exp_aritmetica -> FALSE .)
    ID              reduce using rule 67 (exp_aritmetica -> FALSE .)
    RPAR            reduce using rule 67 (exp_aritmetica -> FALSE .)
    COMMA           reduce using rule 67 (exp_aritmetica -> FALSE .)
    AS              reduce using rule 67 (exp_aritmetica -> FALSE .)
    SEMICOL         reduce using rule 67 (exp_aritmetica -> FALSE .)
    $end            reduce using rule 67 (exp_aritmetica -> FALSE .)
    END             reduce using rule 67 (exp_aritmetica -> FALSE .)
    ELSE            reduce using rule 67 (exp_aritmetica -> FALSE .)


state 48

    (68) exp_aritmetica -> ID .
    (82) exp_aritmetica -> ID . LPAR arg RPAR

    PLUS            reduce using rule 68 (exp_aritmetica -> ID .)
    MINUS           reduce using rule 68 (exp_aritmetica -> ID .)
    TIMES           reduce using rule 68 (exp_aritmetica -> ID .)
    DIV             reduce using rule 68 (exp_aritmetica -> ID .)
    MOD             reduce using rule 68 (exp_aritmetica -> ID .)
    POT             reduce using rule 68 (exp_aritmetica -> ID .)
    COLON           reduce using rule 68 (exp_aritmetica -> ID .)
    LESS            reduce using rule 68 (exp_aritmetica -> ID .)
    LESSEQ          reduce using rule 68 (exp_aritmetica -> ID .)
    GREATHER        reduce using rule 68 (exp_aritmetica -> ID .)
    GREATHEREQ      reduce using rule 68 (exp_aritmetica -> ID .)
    EQUALITY        reduce using rule 68 (exp_aritmetica -> ID .)
    DIFERENT        reduce using rule 68 (exp_aritmetica -> ID .)
    AND             reduce using rule 68 (exp_aritmetica -> ID .)
    OR              reduce using rule 68 (exp_aritmetica -> ID .)
    PRINT           reduce using rule 68 (exp_aritmetica -> ID .)
    PRINTLN         reduce using rule 68 (exp_aritmetica -> ID .)
    WHILE           reduce using rule 68 (exp_aritmetica -> ID .)
    FOR             reduce using rule 68 (exp_aritmetica -> ID .)
    FUNCTION        reduce using rule 68 (exp_aritmetica -> ID .)
    IF              reduce using rule 68 (exp_aritmetica -> ID .)
    LOCAL           reduce using rule 68 (exp_aritmetica -> ID .)
    GLOBAL          reduce using rule 68 (exp_aritmetica -> ID .)
    ID              reduce using rule 68 (exp_aritmetica -> ID .)
    RPAR            reduce using rule 68 (exp_aritmetica -> ID .)
    COMMA           reduce using rule 68 (exp_aritmetica -> ID .)
    AS              reduce using rule 68 (exp_aritmetica -> ID .)
    SEMICOL         reduce using rule 68 (exp_aritmetica -> ID .)
    $end            reduce using rule 68 (exp_aritmetica -> ID .)
    END             reduce using rule 68 (exp_aritmetica -> ID .)
    ELSE            reduce using rule 68 (exp_aritmetica -> ID .)
    LPAR            shift and go to state 90


state 49

    (69) exp_aritmetica -> TYPEOF . LPAR exp_logica RPAR

    LPAR            shift and go to state 91


state 50

    (70) exp_aritmetica -> STRING . LPAR exp_logica RPAR

    LPAR            shift and go to state 92


state 51

    (71) exp_aritmetica -> FLOAT . LPAR exp_logica RPAR

    LPAR            shift and go to state 93


state 52

    (72) exp_aritmetica -> TRUNC . LPAR data_type COMMA exp_logica RPAR

    LPAR            shift and go to state 94


state 53

    (73) exp_aritmetica -> PARSE . LPAR data_type COMMA exp_logica RPAR

    LPAR            shift and go to state 95


state 54

    (74) exp_aritmetica -> SIN . LPAR exp_logica RPAR

    LPAR            shift and go to state 96


state 55

    (75) exp_aritmetica -> COS . LPAR exp_logica RPAR

    LPAR            shift and go to state 97


state 56

    (76) exp_aritmetica -> TAN . LPAR exp_logica RPAR

    LPAR            shift and go to state 98


state 57

    (77) exp_aritmetica -> LOG10 . LPAR exp_logica RPAR

    LPAR            shift and go to state 99


state 58

    (78) exp_aritmetica -> SQRT . LPAR exp_logica RPAR

    LPAR            shift and go to state 100


state 59

    (79) exp_aritmetica -> LENGTH . LPAR exp_logica RPAR

    LPAR            shift and go to state 101


state 60

    (80) exp_aritmetica -> UPPERCASE . LPAR exp_logica RPAR

    LPAR            shift and go to state 102


state 61

    (81) exp_aritmetica -> LOWERCASE . LPAR exp_logica RPAR

    LPAR            shift and go to state 103


state 62

    (33) for -> FOR ID . IN for_list instrucciones END

    IN              shift and go to state 104


state 63

    (35) function -> FUNCTION ID . LPAR param RPAR instrucciones END

    LPAR            shift and go to state 105


state 64

    (31) if -> IF exp_logica . instrucciones END
    (32) if_else -> IF exp_logica . instrucciones ELSE instrucciones END
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    AND             shift and go to state 72
    OR              shift and go to state 73
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instrucciones                  shift and go to state 106
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 65

    (12) print -> PRINT LPAR print_args . RPAR
    (14) print_args -> print_args . COMMA exp_logica

    RPAR            shift and go to state 107
    COMMA           shift and go to state 108


state 66

    (15) print_args -> exp_logica .
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            reduce using rule 15 (print_args -> exp_logica .)
    COMMA           reduce using rule 15 (print_args -> exp_logica .)
    AND             shift and go to state 72
    OR              shift and go to state 73


state 67

    (13) println -> PRINTLN LPAR print_args . RPAR
    (14) print_args -> print_args . COMMA exp_logica

    RPAR            shift and go to state 109
    COMMA           shift and go to state 108


state 68

    (16) definicion -> ambito ID asignacion .

    SEMICOL         reduce using rule 16 (definicion -> ambito ID asignacion .)
    PRINT           reduce using rule 16 (definicion -> ambito ID asignacion .)
    PRINTLN         reduce using rule 16 (definicion -> ambito ID asignacion .)
    WHILE           reduce using rule 16 (definicion -> ambito ID asignacion .)
    FOR             reduce using rule 16 (definicion -> ambito ID asignacion .)
    FUNCTION        reduce using rule 16 (definicion -> ambito ID asignacion .)
    IF              reduce using rule 16 (definicion -> ambito ID asignacion .)
    LOCAL           reduce using rule 16 (definicion -> ambito ID asignacion .)
    GLOBAL          reduce using rule 16 (definicion -> ambito ID asignacion .)
    ID              reduce using rule 16 (definicion -> ambito ID asignacion .)
    $end            reduce using rule 16 (definicion -> ambito ID asignacion .)
    END             reduce using rule 16 (definicion -> ambito ID asignacion .)
    ELSE            reduce using rule 16 (definicion -> ambito ID asignacion .)


state 69

    (20) asignacion -> EQUAL . exp_logica assign_type
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 110
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 70

    (21) asignacion -> empty .

    SEMICOL         reduce using rule 21 (asignacion -> empty .)
    PRINT           reduce using rule 21 (asignacion -> empty .)
    PRINTLN         reduce using rule 21 (asignacion -> empty .)
    WHILE           reduce using rule 21 (asignacion -> empty .)
    FOR             reduce using rule 21 (asignacion -> empty .)
    FUNCTION        reduce using rule 21 (asignacion -> empty .)
    IF              reduce using rule 21 (asignacion -> empty .)
    LOCAL           reduce using rule 21 (asignacion -> empty .)
    GLOBAL          reduce using rule 21 (asignacion -> empty .)
    ID              reduce using rule 21 (asignacion -> empty .)
    $end            reduce using rule 21 (asignacion -> empty .)
    END             reduce using rule 21 (asignacion -> empty .)
    ELSE            reduce using rule 21 (asignacion -> empty .)


state 71

    (30) while -> WHILE exp_logica instrucciones . END
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    END             shift and go to state 111
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instruccion                    shift and go to state 22
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 72

    (42) exp_logica -> exp_logica AND . exp_logica
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 112
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 73

    (43) exp_logica -> exp_logica OR . exp_logica
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 113
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 74

    (44) exp_logica -> NOT exp_logica .
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    AND             reduce using rule 44 (exp_logica -> NOT exp_logica .)
    OR              reduce using rule 44 (exp_logica -> NOT exp_logica .)
    PRINT           reduce using rule 44 (exp_logica -> NOT exp_logica .)
    PRINTLN         reduce using rule 44 (exp_logica -> NOT exp_logica .)
    WHILE           reduce using rule 44 (exp_logica -> NOT exp_logica .)
    FOR             reduce using rule 44 (exp_logica -> NOT exp_logica .)
    FUNCTION        reduce using rule 44 (exp_logica -> NOT exp_logica .)
    IF              reduce using rule 44 (exp_logica -> NOT exp_logica .)
    LOCAL           reduce using rule 44 (exp_logica -> NOT exp_logica .)
    GLOBAL          reduce using rule 44 (exp_logica -> NOT exp_logica .)
    ID              reduce using rule 44 (exp_logica -> NOT exp_logica .)
    RPAR            reduce using rule 44 (exp_logica -> NOT exp_logica .)
    COMMA           reduce using rule 44 (exp_logica -> NOT exp_logica .)
    AS              reduce using rule 44 (exp_logica -> NOT exp_logica .)
    SEMICOL         reduce using rule 44 (exp_logica -> NOT exp_logica .)
    $end            reduce using rule 44 (exp_logica -> NOT exp_logica .)
    END             reduce using rule 44 (exp_logica -> NOT exp_logica .)
    ELSE            reduce using rule 44 (exp_logica -> NOT exp_logica .)

  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 75

    (46) exp_relacional -> exp_relacional LESS . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_relacional                 shift and go to state 114
    exp_aritmetica                 shift and go to state 39

state 76

    (47) exp_relacional -> exp_relacional LESSEQ . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_relacional                 shift and go to state 115
    exp_aritmetica                 shift and go to state 39

state 77

    (48) exp_relacional -> exp_relacional GREATHER . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_relacional                 shift and go to state 116
    exp_aritmetica                 shift and go to state 39

state 78

    (49) exp_relacional -> exp_relacional GREATHEREQ . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_relacional                 shift and go to state 117
    exp_aritmetica                 shift and go to state 39

state 79

    (50) exp_relacional -> exp_relacional EQUALITY . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_relacional                 shift and go to state 118
    exp_aritmetica                 shift and go to state 39

state 80

    (51) exp_relacional -> exp_relacional DIFERENT . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_relacional                 shift and go to state 119
    exp_aritmetica                 shift and go to state 39

state 81

    (53) exp_aritmetica -> exp_aritmetica PLUS . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_aritmetica                 shift and go to state 120

state 82

    (54) exp_aritmetica -> exp_aritmetica MINUS . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_aritmetica                 shift and go to state 121

state 83

    (55) exp_aritmetica -> exp_aritmetica TIMES . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_aritmetica                 shift and go to state 122

state 84

    (56) exp_aritmetica -> exp_aritmetica DIV . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_aritmetica                 shift and go to state 123

state 85

    (57) exp_aritmetica -> exp_aritmetica MOD . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_aritmetica                 shift and go to state 124

state 86

    (58) exp_aritmetica -> exp_aritmetica POT . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_aritmetica                 shift and go to state 125

state 87

    (59) exp_aritmetica -> exp_aritmetica COLON . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_aritmetica                 shift and go to state 126

state 88

    (60) exp_aritmetica -> MINUS exp_aritmetica .
    (53) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (54) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (55) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (56) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (57) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (58) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (59) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    MINUS           reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    TIMES           reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    DIV             reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    MOD             reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    POT             reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    COLON           reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    LESS            reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    LESSEQ          reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    GREATHER        reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    EQUALITY        reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    DIFERENT        reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    AND             reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    OR              reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    PRINT           reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    PRINTLN         reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    WHILE           reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    FOR             reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    FUNCTION        reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    IF              reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    LOCAL           reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    GLOBAL          reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    ID              reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    RPAR            reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    COMMA           reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    AS              reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    SEMICOL         reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    $end            reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    END             reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)
    ELSE            reduce using rule 60 (exp_aritmetica -> MINUS exp_aritmetica .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIV             [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 85 ]
  ! POT             [ shift and go to state 86 ]
  ! COLON           [ shift and go to state 87 ]


state 89

    (61) exp_aritmetica -> LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 127
    AND             shift and go to state 72
    OR              shift and go to state 73


state 90

    (82) exp_aritmetica -> ID LPAR . arg RPAR
    (83) arg -> . args
    (84) arg -> . empty
    (85) args -> . args COMMA exp_logica
    (86) args -> . exp_logica
    (87) empty -> .
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    RPAR            reduce using rule 87 (empty -> .)
    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    arg                            shift and go to state 128
    args                           shift and go to state 129
    empty                          shift and go to state 130
    exp_logica                     shift and go to state 131
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 91

    (69) exp_aritmetica -> TYPEOF LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 132
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 92

    (70) exp_aritmetica -> STRING LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 133
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 93

    (71) exp_aritmetica -> FLOAT LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 134
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 94

    (72) exp_aritmetica -> TRUNC LPAR . data_type COMMA exp_logica RPAR
    (24) data_type -> . INT64
    (25) data_type -> . FLOAT64
    (26) data_type -> . STR
    (27) data_type -> . CHR
    (28) data_type -> . BOOL
    (29) data_type -> . NOTHING

    INT64           shift and go to state 136
    FLOAT64         shift and go to state 137
    STR             shift and go to state 138
    CHR             shift and go to state 139
    BOOL            shift and go to state 140
    NOTHING         shift and go to state 141

    data_type                      shift and go to state 135

state 95

    (73) exp_aritmetica -> PARSE LPAR . data_type COMMA exp_logica RPAR
    (24) data_type -> . INT64
    (25) data_type -> . FLOAT64
    (26) data_type -> . STR
    (27) data_type -> . CHR
    (28) data_type -> . BOOL
    (29) data_type -> . NOTHING

    INT64           shift and go to state 136
    FLOAT64         shift and go to state 137
    STR             shift and go to state 138
    CHR             shift and go to state 139
    BOOL            shift and go to state 140
    NOTHING         shift and go to state 141

    data_type                      shift and go to state 142

state 96

    (74) exp_aritmetica -> SIN LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 143
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 97

    (75) exp_aritmetica -> COS LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 144
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 98

    (76) exp_aritmetica -> TAN LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 145
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 99

    (77) exp_aritmetica -> LOG10 LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 146
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 100

    (78) exp_aritmetica -> SQRT LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 147
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 101

    (79) exp_aritmetica -> LENGTH LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 148
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 102

    (80) exp_aritmetica -> UPPERCASE LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 149
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 103

    (81) exp_aritmetica -> LOWERCASE LPAR . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 150
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 104

    (33) for -> FOR ID IN . for_list instrucciones END
    (34) for_list -> . CADENA

    CADENA          shift and go to state 152

    for_list                       shift and go to state 151

state 105

    (35) function -> FUNCTION ID LPAR . param RPAR instrucciones END
    (36) param -> . params
    (37) param -> . empty
    (38) params -> . params COMMA ID
    (39) params -> . ID
    (87) empty -> .

    ID              shift and go to state 153
    RPAR            reduce using rule 87 (empty -> .)

    param                          shift and go to state 154
    params                         shift and go to state 155
    empty                          shift and go to state 156

state 106

    (31) if -> IF exp_logica instrucciones . END
    (32) if_else -> IF exp_logica instrucciones . ELSE instrucciones END
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    END             shift and go to state 157
    ELSE            shift and go to state 158
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instruccion                    shift and go to state 22
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 107

    (12) print -> PRINT LPAR print_args RPAR .

    SEMICOL         reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    PRINT           reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    PRINTLN         reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    WHILE           reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    FOR             reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    FUNCTION        reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    IF              reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    LOCAL           reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    GLOBAL          reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    ID              reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    $end            reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    END             reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)
    ELSE            reduce using rule 12 (print -> PRINT LPAR print_args RPAR .)


state 108

    (14) print_args -> print_args COMMA . exp_logica
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 159
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 109

    (13) println -> PRINTLN LPAR print_args RPAR .

    SEMICOL         reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    PRINT           reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    PRINTLN         reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    WHILE           reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    FOR             reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    FUNCTION        reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    IF              reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    LOCAL           reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    GLOBAL          reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    ID              reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    $end            reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    END             reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)
    ELSE            reduce using rule 13 (println -> PRINTLN LPAR print_args RPAR .)


state 110

    (20) asignacion -> EQUAL exp_logica . assign_type
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica
    (22) assign_type -> . AS data_type
    (23) assign_type -> . empty
    (87) empty -> .

    AND             shift and go to state 72
    OR              shift and go to state 73
    AS              shift and go to state 161
    SEMICOL         reduce using rule 87 (empty -> .)
    PRINT           reduce using rule 87 (empty -> .)
    PRINTLN         reduce using rule 87 (empty -> .)
    WHILE           reduce using rule 87 (empty -> .)
    FOR             reduce using rule 87 (empty -> .)
    FUNCTION        reduce using rule 87 (empty -> .)
    IF              reduce using rule 87 (empty -> .)
    LOCAL           reduce using rule 87 (empty -> .)
    GLOBAL          reduce using rule 87 (empty -> .)
    ID              reduce using rule 87 (empty -> .)
    $end            reduce using rule 87 (empty -> .)
    END             reduce using rule 87 (empty -> .)
    ELSE            reduce using rule 87 (empty -> .)

    assign_type                    shift and go to state 160
    empty                          shift and go to state 162

state 111

    (30) while -> WHILE exp_logica instrucciones END .

    SEMICOL         reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    PRINT           reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    PRINTLN         reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    WHILE           reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    FOR             reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    FUNCTION        reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    IF              reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    LOCAL           reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    GLOBAL          reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    ID              reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    $end            reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    END             reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)
    ELSE            reduce using rule 30 (while -> WHILE exp_logica instrucciones END .)


state 112

    (42) exp_logica -> exp_logica AND exp_logica .
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    AND             reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    PRINT           reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    PRINTLN         reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    WHILE           reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    FOR             reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    FUNCTION        reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    IF              reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    LOCAL           reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    GLOBAL          reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    ID              reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    RPAR            reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    COMMA           reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    AS              reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    SEMICOL         reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    $end            reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    END             reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    ELSE            reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .)
    OR              shift and go to state 73

  ! OR              [ reduce using rule 42 (exp_logica -> exp_logica AND exp_logica .) ]
  ! AND             [ shift and go to state 72 ]


state 113

    (43) exp_logica -> exp_logica OR exp_logica .
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    AND             reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    OR              reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    PRINT           reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    PRINTLN         reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    WHILE           reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    FOR             reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    FUNCTION        reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    IF              reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    LOCAL           reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    GLOBAL          reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    ID              reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    RPAR            reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    COMMA           reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    AS              reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    SEMICOL         reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    $end            reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    END             reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)
    ELSE            reduce using rule 43 (exp_logica -> exp_logica OR exp_logica .)

  ! AND             [ shift and go to state 72 ]
  ! OR              [ shift and go to state 73 ]


state 114

    (46) exp_relacional -> exp_relacional LESS exp_relacional .
    (46) exp_relacional -> exp_relacional . LESS exp_relacional
    (47) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (48) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (49) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (50) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (51) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    LESSEQ          reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    GREATHER        reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    GREATHEREQ      reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    EQUALITY        reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    DIFERENT        reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    AND             reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    OR              reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    PRINT           reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    PRINTLN         reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    WHILE           reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    FOR             reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    FUNCTION        reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    IF              reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    LOCAL           reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    GLOBAL          reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    ID              reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    RPAR            reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    COMMA           reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    AS              reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    SEMICOL         reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    $end            reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    END             reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)
    ELSE            reduce using rule 46 (exp_relacional -> exp_relacional LESS exp_relacional .)

  ! LESS            [ shift and go to state 75 ]
  ! LESSEQ          [ shift and go to state 76 ]
  ! GREATHER        [ shift and go to state 77 ]
  ! GREATHEREQ      [ shift and go to state 78 ]
  ! EQUALITY        [ shift and go to state 79 ]
  ! DIFERENT        [ shift and go to state 80 ]


state 115

    (47) exp_relacional -> exp_relacional LESSEQ exp_relacional .
    (46) exp_relacional -> exp_relacional . LESS exp_relacional
    (47) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (48) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (49) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (50) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (51) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    LESSEQ          reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    GREATHER        reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    GREATHEREQ      reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    EQUALITY        reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    DIFERENT        reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    AND             reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    OR              reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    PRINT           reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    PRINTLN         reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    WHILE           reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    FOR             reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    FUNCTION        reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    IF              reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    LOCAL           reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    GLOBAL          reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    ID              reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    RPAR            reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    COMMA           reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    AS              reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    SEMICOL         reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    $end            reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    END             reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    ELSE            reduce using rule 47 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)

  ! LESS            [ shift and go to state 75 ]
  ! LESSEQ          [ shift and go to state 76 ]
  ! GREATHER        [ shift and go to state 77 ]
  ! GREATHEREQ      [ shift and go to state 78 ]
  ! EQUALITY        [ shift and go to state 79 ]
  ! DIFERENT        [ shift and go to state 80 ]


state 116

    (48) exp_relacional -> exp_relacional GREATHER exp_relacional .
    (46) exp_relacional -> exp_relacional . LESS exp_relacional
    (47) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (48) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (49) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (50) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (51) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    LESSEQ          reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    GREATHER        reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    GREATHEREQ      reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    EQUALITY        reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    DIFERENT        reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    AND             reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    OR              reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    PRINT           reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    PRINTLN         reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    WHILE           reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    FOR             reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    FUNCTION        reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    IF              reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    LOCAL           reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    GLOBAL          reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    ID              reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    RPAR            reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    COMMA           reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    AS              reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    SEMICOL         reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    $end            reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    END             reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    ELSE            reduce using rule 48 (exp_relacional -> exp_relacional GREATHER exp_relacional .)

  ! LESS            [ shift and go to state 75 ]
  ! LESSEQ          [ shift and go to state 76 ]
  ! GREATHER        [ shift and go to state 77 ]
  ! GREATHEREQ      [ shift and go to state 78 ]
  ! EQUALITY        [ shift and go to state 79 ]
  ! DIFERENT        [ shift and go to state 80 ]


state 117

    (49) exp_relacional -> exp_relacional GREATHEREQ exp_relacional .
    (46) exp_relacional -> exp_relacional . LESS exp_relacional
    (47) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (48) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (49) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (50) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (51) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    LESSEQ          reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    GREATHER        reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    GREATHEREQ      reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    EQUALITY        reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    DIFERENT        reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    AND             reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    OR              reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    PRINT           reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    PRINTLN         reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    WHILE           reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    FOR             reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    FUNCTION        reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    IF              reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    LOCAL           reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    GLOBAL          reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    ID              reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    RPAR            reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    COMMA           reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    AS              reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    SEMICOL         reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    $end            reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    END             reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    ELSE            reduce using rule 49 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)

  ! LESS            [ shift and go to state 75 ]
  ! LESSEQ          [ shift and go to state 76 ]
  ! GREATHER        [ shift and go to state 77 ]
  ! GREATHEREQ      [ shift and go to state 78 ]
  ! EQUALITY        [ shift and go to state 79 ]
  ! DIFERENT        [ shift and go to state 80 ]


state 118

    (50) exp_relacional -> exp_relacional EQUALITY exp_relacional .
    (46) exp_relacional -> exp_relacional . LESS exp_relacional
    (47) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (48) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (49) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (50) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (51) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    EQUALITY        reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    DIFERENT        reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    AND             reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    OR              reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    PRINT           reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    PRINTLN         reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    WHILE           reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    FOR             reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    FUNCTION        reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    IF              reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    LOCAL           reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    GLOBAL          reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    ID              reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    RPAR            reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    COMMA           reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    AS              reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    SEMICOL         reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    $end            reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    END             reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    ELSE            reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    LESS            shift and go to state 75
    LESSEQ          shift and go to state 76
    GREATHER        shift and go to state 77
    GREATHEREQ      shift and go to state 78

  ! LESS            [ reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .) ]
  ! LESSEQ          [ reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .) ]
  ! GREATHER        [ reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .) ]
  ! GREATHEREQ      [ reduce using rule 50 (exp_relacional -> exp_relacional EQUALITY exp_relacional .) ]
  ! EQUALITY        [ shift and go to state 79 ]
  ! DIFERENT        [ shift and go to state 80 ]


state 119

    (51) exp_relacional -> exp_relacional DIFERENT exp_relacional .
    (46) exp_relacional -> exp_relacional . LESS exp_relacional
    (47) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (48) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (49) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (50) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (51) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    EQUALITY        reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    DIFERENT        reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    AND             reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    OR              reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    PRINT           reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    PRINTLN         reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    WHILE           reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    FOR             reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    FUNCTION        reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    IF              reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    LOCAL           reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    GLOBAL          reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    ID              reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    RPAR            reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    COMMA           reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    AS              reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    SEMICOL         reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    $end            reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    END             reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    ELSE            reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    LESS            shift and go to state 75
    LESSEQ          shift and go to state 76
    GREATHER        shift and go to state 77
    GREATHEREQ      shift and go to state 78

  ! LESS            [ reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .) ]
  ! LESSEQ          [ reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .) ]
  ! GREATHER        [ reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .) ]
  ! GREATHEREQ      [ reduce using rule 51 (exp_relacional -> exp_relacional DIFERENT exp_relacional .) ]
  ! EQUALITY        [ shift and go to state 79 ]
  ! DIFERENT        [ shift and go to state 80 ]


state 120

    (53) exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .
    (53) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (54) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (55) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (56) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (57) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (58) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (59) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    MINUS           reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    COLON           reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    LESS            reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    LESSEQ          reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    GREATHER        reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    EQUALITY        reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    DIFERENT        reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    AND             reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    OR              reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    PRINT           reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    PRINTLN         reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    WHILE           reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    FOR             reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    FUNCTION        reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    IF              reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    LOCAL           reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    GLOBAL          reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    ID              reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    RPAR            reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    COMMA           reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    AS              reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    SEMICOL         reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    $end            reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    END             reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    ELSE            reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    TIMES           shift and go to state 83
    DIV             shift and go to state 84
    MOD             shift and go to state 85
    POT             shift and go to state 86

  ! TIMES           [ reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! DIV             [ reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! MOD             [ reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! POT             [ reduce using rule 53 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! COLON           [ shift and go to state 87 ]


state 121

    (54) exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .
    (53) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (54) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (55) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (56) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (57) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (58) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (59) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    MINUS           reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    COLON           reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    LESS            reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    LESSEQ          reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    GREATHER        reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    EQUALITY        reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    DIFERENT        reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    AND             reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    OR              reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    PRINT           reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    PRINTLN         reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    WHILE           reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    FOR             reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    FUNCTION        reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    IF              reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    LOCAL           reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    GLOBAL          reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    ID              reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    RPAR            reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    COMMA           reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    AS              reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    SEMICOL         reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    $end            reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    END             reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    ELSE            reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    TIMES           shift and go to state 83
    DIV             shift and go to state 84
    MOD             shift and go to state 85
    POT             shift and go to state 86

  ! TIMES           [ reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! DIV             [ reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! MOD             [ reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! POT             [ reduce using rule 54 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! COLON           [ shift and go to state 87 ]


state 122

    (55) exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .
    (53) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (54) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (55) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (56) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (57) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (58) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (59) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    MINUS           reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    TIMES           reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    DIV             reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    MOD             reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    COLON           reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    LESS            reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    LESSEQ          reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    GREATHER        reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    GREATHEREQ      reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    EQUALITY        reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    DIFERENT        reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    AND             reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    OR              reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    PRINT           reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    PRINTLN         reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    WHILE           reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    FOR             reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    FUNCTION        reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    IF              reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    LOCAL           reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    GLOBAL          reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    ID              reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    RPAR            reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    COMMA           reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    AS              reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    SEMICOL         reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    $end            reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    END             reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    ELSE            reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    POT             shift and go to state 86

  ! POT             [ reduce using rule 55 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIV             [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 85 ]
  ! COLON           [ shift and go to state 87 ]


state 123

    (56) exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .
    (53) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (54) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (55) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (56) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (57) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (58) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (59) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    MINUS           reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    TIMES           reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    DIV             reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    MOD             reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    COLON           reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    LESS            reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    LESSEQ          reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    GREATHER        reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    GREATHEREQ      reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    EQUALITY        reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    DIFERENT        reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    AND             reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    OR              reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    PRINT           reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    PRINTLN         reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    WHILE           reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    FOR             reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    FUNCTION        reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    IF              reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    LOCAL           reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    GLOBAL          reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    ID              reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    RPAR            reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    COMMA           reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    AS              reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    SEMICOL         reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    $end            reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    END             reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    ELSE            reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    POT             shift and go to state 86

  ! POT             [ reduce using rule 56 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIV             [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 85 ]
  ! COLON           [ shift and go to state 87 ]


state 124

    (57) exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .
    (53) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (54) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (55) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (56) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (57) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (58) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (59) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    MINUS           reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    TIMES           reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    DIV             reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    MOD             reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    COLON           reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    LESS            reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    LESSEQ          reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    GREATHER        reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    GREATHEREQ      reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    EQUALITY        reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    DIFERENT        reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    AND             reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    OR              reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    PRINT           reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    PRINTLN         reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    WHILE           reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    FOR             reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    FUNCTION        reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    IF              reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    LOCAL           reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    GLOBAL          reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    ID              reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    RPAR            reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    COMMA           reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    AS              reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    SEMICOL         reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    $end            reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    END             reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    ELSE            reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    POT             shift and go to state 86

  ! POT             [ reduce using rule 57 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIV             [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 85 ]
  ! COLON           [ shift and go to state 87 ]


state 125

    (58) exp_aritmetica -> exp_aritmetica POT exp_aritmetica .
    (53) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (54) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (55) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (56) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (57) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (58) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (59) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    MINUS           reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    TIMES           reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    DIV             reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    MOD             reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    POT             reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    COLON           reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    LESS            reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    LESSEQ          reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    GREATHER        reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    GREATHEREQ      reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    EQUALITY        reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    DIFERENT        reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    AND             reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    OR              reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    PRINT           reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    PRINTLN         reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    WHILE           reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    FOR             reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    FUNCTION        reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    IF              reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    LOCAL           reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    GLOBAL          reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    ID              reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    RPAR            reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    COMMA           reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    AS              reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    SEMICOL         reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    $end            reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    END             reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    ELSE            reduce using rule 58 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)

  ! PLUS            [ shift and go to state 81 ]
  ! MINUS           [ shift and go to state 82 ]
  ! TIMES           [ shift and go to state 83 ]
  ! DIV             [ shift and go to state 84 ]
  ! MOD             [ shift and go to state 85 ]
  ! POT             [ shift and go to state 86 ]
  ! COLON           [ shift and go to state 87 ]


state 126

    (59) exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .
    (53) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (54) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (55) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (56) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (57) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (58) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (59) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    COLON           reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    LESS            reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    LESSEQ          reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    GREATHER        reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    GREATHEREQ      reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    EQUALITY        reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    DIFERENT        reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    AND             reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    OR              reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    PRINT           reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    PRINTLN         reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    WHILE           reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    FOR             reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    FUNCTION        reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    IF              reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    LOCAL           reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    GLOBAL          reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    ID              reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    RPAR            reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    COMMA           reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    AS              reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    SEMICOL         reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    $end            reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    END             reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    ELSE            reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    PLUS            shift and go to state 81
    MINUS           shift and go to state 82
    TIMES           shift and go to state 83
    DIV             shift and go to state 84
    MOD             shift and go to state 85
    POT             shift and go to state 86

  ! PLUS            [ reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! MINUS           [ reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! TIMES           [ reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! DIV             [ reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! MOD             [ reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! POT             [ reduce using rule 59 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! COLON           [ shift and go to state 87 ]


state 127

    (61) exp_aritmetica -> LPAR exp_logica RPAR .

    PLUS            reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    MINUS           reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    TIMES           reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    DIV             reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    MOD             reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    POT             reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    COLON           reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    LESS            reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    AND             reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    OR              reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    PRINT           reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    WHILE           reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    FOR             reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    IF              reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    ID              reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    RPAR            reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    COMMA           reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    AS              reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    $end            reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    END             reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)
    ELSE            reduce using rule 61 (exp_aritmetica -> LPAR exp_logica RPAR .)


state 128

    (82) exp_aritmetica -> ID LPAR arg . RPAR

    RPAR            shift and go to state 163


state 129

    (83) arg -> args .
    (85) args -> args . COMMA exp_logica

    RPAR            reduce using rule 83 (arg -> args .)
    COMMA           shift and go to state 164


state 130

    (84) arg -> empty .

    RPAR            reduce using rule 84 (arg -> empty .)


state 131

    (86) args -> exp_logica .
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    COMMA           reduce using rule 86 (args -> exp_logica .)
    RPAR            reduce using rule 86 (args -> exp_logica .)
    AND             shift and go to state 72
    OR              shift and go to state 73


state 132

    (69) exp_aritmetica -> TYPEOF LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 165
    AND             shift and go to state 72
    OR              shift and go to state 73


state 133

    (70) exp_aritmetica -> STRING LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 166
    AND             shift and go to state 72
    OR              shift and go to state 73


state 134

    (71) exp_aritmetica -> FLOAT LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 167
    AND             shift and go to state 72
    OR              shift and go to state 73


state 135

    (72) exp_aritmetica -> TRUNC LPAR data_type . COMMA exp_logica RPAR

    COMMA           shift and go to state 168


state 136

    (24) data_type -> INT64 .

    COMMA           reduce using rule 24 (data_type -> INT64 .)
    SEMICOL         reduce using rule 24 (data_type -> INT64 .)
    PRINT           reduce using rule 24 (data_type -> INT64 .)
    PRINTLN         reduce using rule 24 (data_type -> INT64 .)
    WHILE           reduce using rule 24 (data_type -> INT64 .)
    FOR             reduce using rule 24 (data_type -> INT64 .)
    FUNCTION        reduce using rule 24 (data_type -> INT64 .)
    IF              reduce using rule 24 (data_type -> INT64 .)
    LOCAL           reduce using rule 24 (data_type -> INT64 .)
    GLOBAL          reduce using rule 24 (data_type -> INT64 .)
    ID              reduce using rule 24 (data_type -> INT64 .)
    $end            reduce using rule 24 (data_type -> INT64 .)
    END             reduce using rule 24 (data_type -> INT64 .)
    ELSE            reduce using rule 24 (data_type -> INT64 .)


state 137

    (25) data_type -> FLOAT64 .

    COMMA           reduce using rule 25 (data_type -> FLOAT64 .)
    SEMICOL         reduce using rule 25 (data_type -> FLOAT64 .)
    PRINT           reduce using rule 25 (data_type -> FLOAT64 .)
    PRINTLN         reduce using rule 25 (data_type -> FLOAT64 .)
    WHILE           reduce using rule 25 (data_type -> FLOAT64 .)
    FOR             reduce using rule 25 (data_type -> FLOAT64 .)
    FUNCTION        reduce using rule 25 (data_type -> FLOAT64 .)
    IF              reduce using rule 25 (data_type -> FLOAT64 .)
    LOCAL           reduce using rule 25 (data_type -> FLOAT64 .)
    GLOBAL          reduce using rule 25 (data_type -> FLOAT64 .)
    ID              reduce using rule 25 (data_type -> FLOAT64 .)
    $end            reduce using rule 25 (data_type -> FLOAT64 .)
    END             reduce using rule 25 (data_type -> FLOAT64 .)
    ELSE            reduce using rule 25 (data_type -> FLOAT64 .)


state 138

    (26) data_type -> STR .

    COMMA           reduce using rule 26 (data_type -> STR .)
    SEMICOL         reduce using rule 26 (data_type -> STR .)
    PRINT           reduce using rule 26 (data_type -> STR .)
    PRINTLN         reduce using rule 26 (data_type -> STR .)
    WHILE           reduce using rule 26 (data_type -> STR .)
    FOR             reduce using rule 26 (data_type -> STR .)
    FUNCTION        reduce using rule 26 (data_type -> STR .)
    IF              reduce using rule 26 (data_type -> STR .)
    LOCAL           reduce using rule 26 (data_type -> STR .)
    GLOBAL          reduce using rule 26 (data_type -> STR .)
    ID              reduce using rule 26 (data_type -> STR .)
    $end            reduce using rule 26 (data_type -> STR .)
    END             reduce using rule 26 (data_type -> STR .)
    ELSE            reduce using rule 26 (data_type -> STR .)


state 139

    (27) data_type -> CHR .

    COMMA           reduce using rule 27 (data_type -> CHR .)
    SEMICOL         reduce using rule 27 (data_type -> CHR .)
    PRINT           reduce using rule 27 (data_type -> CHR .)
    PRINTLN         reduce using rule 27 (data_type -> CHR .)
    WHILE           reduce using rule 27 (data_type -> CHR .)
    FOR             reduce using rule 27 (data_type -> CHR .)
    FUNCTION        reduce using rule 27 (data_type -> CHR .)
    IF              reduce using rule 27 (data_type -> CHR .)
    LOCAL           reduce using rule 27 (data_type -> CHR .)
    GLOBAL          reduce using rule 27 (data_type -> CHR .)
    ID              reduce using rule 27 (data_type -> CHR .)
    $end            reduce using rule 27 (data_type -> CHR .)
    END             reduce using rule 27 (data_type -> CHR .)
    ELSE            reduce using rule 27 (data_type -> CHR .)


state 140

    (28) data_type -> BOOL .

    COMMA           reduce using rule 28 (data_type -> BOOL .)
    SEMICOL         reduce using rule 28 (data_type -> BOOL .)
    PRINT           reduce using rule 28 (data_type -> BOOL .)
    PRINTLN         reduce using rule 28 (data_type -> BOOL .)
    WHILE           reduce using rule 28 (data_type -> BOOL .)
    FOR             reduce using rule 28 (data_type -> BOOL .)
    FUNCTION        reduce using rule 28 (data_type -> BOOL .)
    IF              reduce using rule 28 (data_type -> BOOL .)
    LOCAL           reduce using rule 28 (data_type -> BOOL .)
    GLOBAL          reduce using rule 28 (data_type -> BOOL .)
    ID              reduce using rule 28 (data_type -> BOOL .)
    $end            reduce using rule 28 (data_type -> BOOL .)
    END             reduce using rule 28 (data_type -> BOOL .)
    ELSE            reduce using rule 28 (data_type -> BOOL .)


state 141

    (29) data_type -> NOTHING .

    COMMA           reduce using rule 29 (data_type -> NOTHING .)
    SEMICOL         reduce using rule 29 (data_type -> NOTHING .)
    PRINT           reduce using rule 29 (data_type -> NOTHING .)
    PRINTLN         reduce using rule 29 (data_type -> NOTHING .)
    WHILE           reduce using rule 29 (data_type -> NOTHING .)
    FOR             reduce using rule 29 (data_type -> NOTHING .)
    FUNCTION        reduce using rule 29 (data_type -> NOTHING .)
    IF              reduce using rule 29 (data_type -> NOTHING .)
    LOCAL           reduce using rule 29 (data_type -> NOTHING .)
    GLOBAL          reduce using rule 29 (data_type -> NOTHING .)
    ID              reduce using rule 29 (data_type -> NOTHING .)
    $end            reduce using rule 29 (data_type -> NOTHING .)
    END             reduce using rule 29 (data_type -> NOTHING .)
    ELSE            reduce using rule 29 (data_type -> NOTHING .)


state 142

    (73) exp_aritmetica -> PARSE LPAR data_type . COMMA exp_logica RPAR

    COMMA           shift and go to state 169


state 143

    (74) exp_aritmetica -> SIN LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 170
    AND             shift and go to state 72
    OR              shift and go to state 73


state 144

    (75) exp_aritmetica -> COS LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 171
    AND             shift and go to state 72
    OR              shift and go to state 73


state 145

    (76) exp_aritmetica -> TAN LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 172
    AND             shift and go to state 72
    OR              shift and go to state 73


state 146

    (77) exp_aritmetica -> LOG10 LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 173
    AND             shift and go to state 72
    OR              shift and go to state 73


state 147

    (78) exp_aritmetica -> SQRT LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 174
    AND             shift and go to state 72
    OR              shift and go to state 73


state 148

    (79) exp_aritmetica -> LENGTH LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 175
    AND             shift and go to state 72
    OR              shift and go to state 73


state 149

    (80) exp_aritmetica -> UPPERCASE LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 176
    AND             shift and go to state 72
    OR              shift and go to state 73


state 150

    (81) exp_aritmetica -> LOWERCASE LPAR exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 177
    AND             shift and go to state 72
    OR              shift and go to state 73


state 151

    (33) for -> FOR ID IN for_list . instrucciones END
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instrucciones                  shift and go to state 178
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 152

    (34) for_list -> CADENA .

    PRINT           reduce using rule 34 (for_list -> CADENA .)
    PRINTLN         reduce using rule 34 (for_list -> CADENA .)
    WHILE           reduce using rule 34 (for_list -> CADENA .)
    FOR             reduce using rule 34 (for_list -> CADENA .)
    FUNCTION        reduce using rule 34 (for_list -> CADENA .)
    IF              reduce using rule 34 (for_list -> CADENA .)
    LOCAL           reduce using rule 34 (for_list -> CADENA .)
    GLOBAL          reduce using rule 34 (for_list -> CADENA .)
    ID              reduce using rule 34 (for_list -> CADENA .)


state 153

    (39) params -> ID .

    COMMA           reduce using rule 39 (params -> ID .)
    RPAR            reduce using rule 39 (params -> ID .)


state 154

    (35) function -> FUNCTION ID LPAR param . RPAR instrucciones END

    RPAR            shift and go to state 179


state 155

    (36) param -> params .
    (38) params -> params . COMMA ID

    RPAR            reduce using rule 36 (param -> params .)
    COMMA           shift and go to state 180


state 156

    (37) param -> empty .

    RPAR            reduce using rule 37 (param -> empty .)


state 157

    (31) if -> IF exp_logica instrucciones END .

    SEMICOL         reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    PRINT           reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    PRINTLN         reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    WHILE           reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    FOR             reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    FUNCTION        reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    IF              reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    LOCAL           reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    GLOBAL          reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    ID              reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    $end            reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    END             reduce using rule 31 (if -> IF exp_logica instrucciones END .)
    ELSE            reduce using rule 31 (if -> IF exp_logica instrucciones END .)


state 158

    (32) if_else -> IF exp_logica instrucciones ELSE . instrucciones END
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instrucciones                  shift and go to state 181
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 159

    (14) print_args -> print_args COMMA exp_logica .
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            reduce using rule 14 (print_args -> print_args COMMA exp_logica .)
    COMMA           reduce using rule 14 (print_args -> print_args COMMA exp_logica .)
    AND             shift and go to state 72
    OR              shift and go to state 73


state 160

    (20) asignacion -> EQUAL exp_logica assign_type .

    SEMICOL         reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    PRINT           reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    PRINTLN         reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    WHILE           reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    FOR             reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    FUNCTION        reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    IF              reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    LOCAL           reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    GLOBAL          reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    ID              reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    $end            reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    END             reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)
    ELSE            reduce using rule 20 (asignacion -> EQUAL exp_logica assign_type .)


state 161

    (22) assign_type -> AS . data_type
    (24) data_type -> . INT64
    (25) data_type -> . FLOAT64
    (26) data_type -> . STR
    (27) data_type -> . CHR
    (28) data_type -> . BOOL
    (29) data_type -> . NOTHING

    INT64           shift and go to state 136
    FLOAT64         shift and go to state 137
    STR             shift and go to state 138
    CHR             shift and go to state 139
    BOOL            shift and go to state 140
    NOTHING         shift and go to state 141

    data_type                      shift and go to state 182

state 162

    (23) assign_type -> empty .

    SEMICOL         reduce using rule 23 (assign_type -> empty .)
    PRINT           reduce using rule 23 (assign_type -> empty .)
    PRINTLN         reduce using rule 23 (assign_type -> empty .)
    WHILE           reduce using rule 23 (assign_type -> empty .)
    FOR             reduce using rule 23 (assign_type -> empty .)
    FUNCTION        reduce using rule 23 (assign_type -> empty .)
    IF              reduce using rule 23 (assign_type -> empty .)
    LOCAL           reduce using rule 23 (assign_type -> empty .)
    GLOBAL          reduce using rule 23 (assign_type -> empty .)
    ID              reduce using rule 23 (assign_type -> empty .)
    $end            reduce using rule 23 (assign_type -> empty .)
    END             reduce using rule 23 (assign_type -> empty .)
    ELSE            reduce using rule 23 (assign_type -> empty .)


state 163

    (82) exp_aritmetica -> ID LPAR arg RPAR .

    PLUS            reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    MINUS           reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    TIMES           reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    DIV             reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    MOD             reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    POT             reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    COLON           reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    LESS            reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    LESSEQ          reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    GREATHER        reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    GREATHEREQ      reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    EQUALITY        reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    DIFERENT        reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    AND             reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    OR              reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    PRINT           reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    PRINTLN         reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    WHILE           reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    FOR             reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    FUNCTION        reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    IF              reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    LOCAL           reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    GLOBAL          reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    ID              reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    RPAR            reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    COMMA           reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    AS              reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    SEMICOL         reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    $end            reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    END             reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)
    ELSE            reduce using rule 82 (exp_aritmetica -> ID LPAR arg RPAR .)


state 164

    (85) args -> args COMMA . exp_logica
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 183
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 165

    (69) exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .

    PLUS            reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    MINUS           reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    TIMES           reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    DIV             reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    MOD             reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    POT             reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    COLON           reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    LESS            reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    AND             reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    OR              reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    PRINT           reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    WHILE           reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    FOR             reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    IF              reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    ID              reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    RPAR            reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    COMMA           reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    AS              reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    $end            reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    END             reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    ELSE            reduce using rule 69 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)


state 166

    (70) exp_aritmetica -> STRING LPAR exp_logica RPAR .

    PLUS            reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    MINUS           reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    TIMES           reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    DIV             reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    MOD             reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    POT             reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    COLON           reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    LESS            reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    AND             reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    OR              reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    PRINT           reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    WHILE           reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    FOR             reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    IF              reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    ID              reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    RPAR            reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    COMMA           reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    AS              reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    $end            reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    END             reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    ELSE            reduce using rule 70 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)


state 167

    (71) exp_aritmetica -> FLOAT LPAR exp_logica RPAR .

    PLUS            reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    MINUS           reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    TIMES           reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    DIV             reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    MOD             reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    POT             reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    COLON           reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    LESS            reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    AND             reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    OR              reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    PRINT           reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    WHILE           reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    FOR             reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    IF              reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    ID              reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    RPAR            reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    COMMA           reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    AS              reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    $end            reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    END             reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    ELSE            reduce using rule 71 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)


state 168

    (72) exp_aritmetica -> TRUNC LPAR data_type COMMA . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 184
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 169

    (73) exp_aritmetica -> PARSE LPAR data_type COMMA . exp_logica RPAR
    (42) exp_logica -> . exp_logica AND exp_logica
    (43) exp_logica -> . exp_logica OR exp_logica
    (44) exp_logica -> . NOT exp_logica
    (45) exp_logica -> . exp_relacional
    (46) exp_relacional -> . exp_relacional LESS exp_relacional
    (47) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (48) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (49) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (50) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (51) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (52) exp_relacional -> . exp_aritmetica
    (53) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (54) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (55) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (56) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (57) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (58) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (59) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (60) exp_aritmetica -> . MINUS exp_aritmetica
    (61) exp_aritmetica -> . LPAR exp_logica RPAR
    (62) exp_aritmetica -> . NUMERO
    (63) exp_aritmetica -> . DECIMAL
    (64) exp_aritmetica -> . CARACTER
    (65) exp_aritmetica -> . CADENA
    (66) exp_aritmetica -> . TRUE
    (67) exp_aritmetica -> . FALSE
    (68) exp_aritmetica -> . ID
    (69) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (70) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (71) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (72) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (73) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (74) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (75) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (76) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (77) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (78) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (79) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (80) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (81) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR
    (82) exp_aritmetica -> . ID LPAR arg RPAR

    NOT             shift and go to state 37
    MINUS           shift and go to state 40
    LPAR            shift and go to state 41
    NUMERO          shift and go to state 42
    DECIMAL         shift and go to state 43
    CARACTER        shift and go to state 44
    CADENA          shift and go to state 45
    TRUE            shift and go to state 46
    FALSE           shift and go to state 47
    ID              shift and go to state 48
    TYPEOF          shift and go to state 49
    STRING          shift and go to state 50
    FLOAT           shift and go to state 51
    TRUNC           shift and go to state 52
    PARSE           shift and go to state 53
    SIN             shift and go to state 54
    COS             shift and go to state 55
    TAN             shift and go to state 56
    LOG10           shift and go to state 57
    SQRT            shift and go to state 58
    LENGTH          shift and go to state 59
    UPPERCASE       shift and go to state 60
    LOWERCASE       shift and go to state 61

    exp_logica                     shift and go to state 185
    exp_relacional                 shift and go to state 38
    exp_aritmetica                 shift and go to state 39

state 170

    (74) exp_aritmetica -> SIN LPAR exp_logica RPAR .

    PLUS            reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    MINUS           reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    TIMES           reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    DIV             reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    MOD             reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    POT             reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    COLON           reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    LESS            reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    AND             reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    OR              reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    PRINT           reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    WHILE           reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    FOR             reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    IF              reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    ID              reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    RPAR            reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    COMMA           reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    AS              reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    $end            reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    END             reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    ELSE            reduce using rule 74 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)


state 171

    (75) exp_aritmetica -> COS LPAR exp_logica RPAR .

    PLUS            reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    MINUS           reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    TIMES           reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    DIV             reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    MOD             reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    POT             reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    COLON           reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    LESS            reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    AND             reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    OR              reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    PRINT           reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    WHILE           reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    FOR             reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    IF              reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    ID              reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    RPAR            reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    COMMA           reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    AS              reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    $end            reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    END             reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    ELSE            reduce using rule 75 (exp_aritmetica -> COS LPAR exp_logica RPAR .)


state 172

    (76) exp_aritmetica -> TAN LPAR exp_logica RPAR .

    PLUS            reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    MINUS           reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    TIMES           reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    DIV             reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    MOD             reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    POT             reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    COLON           reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    LESS            reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    AND             reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    OR              reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    PRINT           reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    WHILE           reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    FOR             reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    IF              reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    ID              reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    RPAR            reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    COMMA           reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    AS              reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    $end            reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    END             reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    ELSE            reduce using rule 76 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)


state 173

    (77) exp_aritmetica -> LOG10 LPAR exp_logica RPAR .

    PLUS            reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    MINUS           reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    TIMES           reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    DIV             reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    MOD             reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    POT             reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    COLON           reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    LESS            reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    AND             reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    OR              reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    PRINT           reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    WHILE           reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    FOR             reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    IF              reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    ID              reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    RPAR            reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    COMMA           reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    AS              reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    $end            reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    END             reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    ELSE            reduce using rule 77 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)


state 174

    (78) exp_aritmetica -> SQRT LPAR exp_logica RPAR .

    PLUS            reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    MINUS           reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    TIMES           reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    DIV             reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    MOD             reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    POT             reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    COLON           reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    LESS            reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    AND             reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    OR              reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    PRINT           reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    WHILE           reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    FOR             reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    IF              reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    ID              reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    RPAR            reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    COMMA           reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    AS              reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    $end            reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    END             reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    ELSE            reduce using rule 78 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)


state 175

    (79) exp_aritmetica -> LENGTH LPAR exp_logica RPAR .

    PLUS            reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    MINUS           reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    TIMES           reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    DIV             reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    MOD             reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    POT             reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    COLON           reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    LESS            reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    AND             reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    OR              reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    PRINT           reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    WHILE           reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    FOR             reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    IF              reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    ID              reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    RPAR            reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    COMMA           reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    AS              reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    $end            reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    END             reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    ELSE            reduce using rule 79 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)


state 176

    (80) exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .

    PLUS            reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    MINUS           reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    TIMES           reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    DIV             reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    MOD             reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    POT             reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    COLON           reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    LESS            reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    AND             reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    OR              reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    PRINT           reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    WHILE           reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    FOR             reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    IF              reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    ID              reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    RPAR            reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    COMMA           reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    AS              reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    $end            reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    END             reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    ELSE            reduce using rule 80 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)


state 177

    (81) exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .

    PLUS            reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    MINUS           reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    TIMES           reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    DIV             reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    MOD             reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    POT             reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    COLON           reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    LESS            reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    AND             reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    OR              reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    PRINT           reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    WHILE           reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    FOR             reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    FUNCTION        reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    IF              reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    LOCAL           reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    GLOBAL          reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    ID              reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    RPAR            reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    COMMA           reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    AS              reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    $end            reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    END             reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    ELSE            reduce using rule 81 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)


state 178

    (33) for -> FOR ID IN for_list instrucciones . END
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    END             shift and go to state 186
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instruccion                    shift and go to state 22
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 179

    (35) function -> FUNCTION ID LPAR param RPAR . instrucciones END
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instrucciones                  shift and go to state 187
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 180

    (38) params -> params COMMA . ID

    ID              shift and go to state 188


state 181

    (32) if_else -> IF exp_logica instrucciones ELSE instrucciones . END
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    END             shift and go to state 189
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instruccion                    shift and go to state 22
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 182

    (22) assign_type -> AS data_type .

    SEMICOL         reduce using rule 22 (assign_type -> AS data_type .)
    PRINT           reduce using rule 22 (assign_type -> AS data_type .)
    PRINTLN         reduce using rule 22 (assign_type -> AS data_type .)
    WHILE           reduce using rule 22 (assign_type -> AS data_type .)
    FOR             reduce using rule 22 (assign_type -> AS data_type .)
    FUNCTION        reduce using rule 22 (assign_type -> AS data_type .)
    IF              reduce using rule 22 (assign_type -> AS data_type .)
    LOCAL           reduce using rule 22 (assign_type -> AS data_type .)
    GLOBAL          reduce using rule 22 (assign_type -> AS data_type .)
    ID              reduce using rule 22 (assign_type -> AS data_type .)
    $end            reduce using rule 22 (assign_type -> AS data_type .)
    END             reduce using rule 22 (assign_type -> AS data_type .)
    ELSE            reduce using rule 22 (assign_type -> AS data_type .)


state 183

    (85) args -> args COMMA exp_logica .
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    COMMA           reduce using rule 85 (args -> args COMMA exp_logica .)
    RPAR            reduce using rule 85 (args -> args COMMA exp_logica .)
    AND             shift and go to state 72
    OR              shift and go to state 73


state 184

    (72) exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 190
    AND             shift and go to state 72
    OR              shift and go to state 73


state 185

    (73) exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica . RPAR
    (42) exp_logica -> exp_logica . AND exp_logica
    (43) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 191
    AND             shift and go to state 72
    OR              shift and go to state 73


state 186

    (33) for -> FOR ID IN for_list instrucciones END .

    SEMICOL         reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    PRINT           reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    PRINTLN         reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    WHILE           reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    FOR             reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    FUNCTION        reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    IF              reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    LOCAL           reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    GLOBAL          reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    ID              reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    $end            reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    END             reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)
    ELSE            reduce using rule 33 (for -> FOR ID IN for_list instrucciones END .)


state 187

    (35) function -> FUNCTION ID LPAR param RPAR instrucciones . END
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print semicolon
    (5) instruccion -> . println semicolon
    (6) instruccion -> . definicion semicolon
    (7) instruccion -> . while semicolon
    (8) instruccion -> . for semicolon
    (9) instruccion -> . function semicolon
    (10) instruccion -> . if semicolon
    (11) instruccion -> . if_else semicolon
    (12) print -> . PRINT LPAR print_args RPAR
    (13) println -> . PRINTLN LPAR print_args RPAR
    (16) definicion -> . ambito ID asignacion
    (30) while -> . WHILE exp_logica instrucciones END
    (33) for -> . FOR ID IN for_list instrucciones END
    (35) function -> . FUNCTION ID LPAR param RPAR instrucciones END
    (31) if -> . IF exp_logica instrucciones END
    (32) if_else -> . IF exp_logica instrucciones ELSE instrucciones END
    (17) ambito -> . LOCAL
    (18) ambito -> . GLOBAL
    (19) ambito -> . empty
    (87) empty -> .

    END             shift and go to state 192
    PRINT           shift and go to state 12
    PRINTLN         shift and go to state 13
    WHILE           shift and go to state 15
    FOR             shift and go to state 16
    FUNCTION        shift and go to state 17
    IF              shift and go to state 18
    LOCAL           shift and go to state 19
    GLOBAL          shift and go to state 20
    ID              reduce using rule 87 (empty -> .)

    instruccion                    shift and go to state 22
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    for                            shift and go to state 8
    function                       shift and go to state 9
    if                             shift and go to state 10
    if_else                        shift and go to state 11
    ambito                         shift and go to state 14
    empty                          shift and go to state 21

state 188

    (38) params -> params COMMA ID .

    COMMA           reduce using rule 38 (params -> params COMMA ID .)
    RPAR            reduce using rule 38 (params -> params COMMA ID .)


state 189

    (32) if_else -> IF exp_logica instrucciones ELSE instrucciones END .

    SEMICOL         reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    PRINT           reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    PRINTLN         reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    WHILE           reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    FOR             reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    FUNCTION        reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    IF              reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    LOCAL           reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    GLOBAL          reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    ID              reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    $end            reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    END             reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)
    ELSE            reduce using rule 32 (if_else -> IF exp_logica instrucciones ELSE instrucciones END .)


state 190

    (72) exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .

    PLUS            reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    MINUS           reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    TIMES           reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    DIV             reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    MOD             reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    POT             reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    COLON           reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    LESS            reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    LESSEQ          reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    GREATHER        reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    GREATHEREQ      reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    EQUALITY        reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    DIFERENT        reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    AND             reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    OR              reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    PRINT           reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    PRINTLN         reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    WHILE           reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    FOR             reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    FUNCTION        reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    IF              reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    LOCAL           reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    GLOBAL          reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    ID              reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    RPAR            reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    COMMA           reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    AS              reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    SEMICOL         reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    $end            reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    END             reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    ELSE            reduce using rule 72 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)


state 191

    (73) exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .

    PLUS            reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    MINUS           reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    TIMES           reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    DIV             reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    MOD             reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    POT             reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    COLON           reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    LESS            reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    LESSEQ          reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    GREATHER        reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    GREATHEREQ      reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    EQUALITY        reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    DIFERENT        reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    AND             reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    OR              reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    PRINT           reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    PRINTLN         reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    WHILE           reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    FOR             reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    FUNCTION        reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    IF              reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    LOCAL           reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    GLOBAL          reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    ID              reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    RPAR            reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    COMMA           reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    AS              reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    SEMICOL         reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    $end            reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    END             reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    ELSE            reduce using rule 73 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)


state 192

    (35) function -> FUNCTION ID LPAR param RPAR instrucciones END .

    SEMICOL         reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    PRINT           reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    PRINTLN         reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    WHILE           reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    FOR             reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    FUNCTION        reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    IF              reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    LOCAL           reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    GLOBAL          reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    ID              reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    $end            reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    END             reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)
    ELSE            reduce using rule 35 (function -> FUNCTION ID LPAR param RPAR instrucciones END .)

