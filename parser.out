Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    ADDITION
    AS
    DIFFERENCE
    FOR
    IN
    LBRACE
    NOTHING
    PRODUCT
    QUESTION
    QUOTIENT
    RBRACE

Grammar

Rule 0     S' -> init
Rule 1     init -> instrucciones
Rule 2     instrucciones -> instrucciones instruccion
Rule 3     instrucciones -> instruccion
Rule 4     instruccion -> print
Rule 5     instruccion -> println
Rule 6     instruccion -> definicion
Rule 7     instruccion -> while
Rule 8     instruccion -> if
Rule 9     instruccion -> if_else
Rule 10    print -> PRINT LPAR print_args RPAR semicolon
Rule 11    println -> PRINTLN LPAR print_args RPAR semicolon
Rule 12    print_args -> print_args COMMA exp_logica
Rule 13    print_args -> exp_logica
Rule 14    definicion -> ID asignacion semicolon
Rule 15    asignacion -> EQUAL exp_logica assign_type
Rule 16    asignacion -> empty
Rule 17    assign_type -> empty
Rule 18    data_type -> INT64
Rule 19    data_type -> FLOAT64
Rule 20    data_type -> STR
Rule 21    data_type -> CHR
Rule 22    data_type -> BOOL
Rule 23    while -> WHILE exp_logica instrucciones END semicolon
Rule 24    if -> IF exp_logica instrucciones END semicolon
Rule 25    if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon
Rule 26    semicolon -> SEMICOL
Rule 27    semicolon -> empty
Rule 28    exp_logica -> exp_logica AND exp_logica
Rule 29    exp_logica -> exp_logica OR exp_logica
Rule 30    exp_logica -> NOT exp_logica
Rule 31    exp_logica -> exp_relacional
Rule 32    exp_relacional -> exp_relacional LESS exp_relacional
Rule 33    exp_relacional -> exp_relacional LESSEQ exp_relacional
Rule 34    exp_relacional -> exp_relacional GREATHER exp_relacional
Rule 35    exp_relacional -> exp_relacional GREATHEREQ exp_relacional
Rule 36    exp_relacional -> exp_relacional EQUALITY exp_relacional
Rule 37    exp_relacional -> exp_relacional DIFERENT exp_relacional
Rule 38    exp_relacional -> exp_aritmetica
Rule 39    exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica
Rule 40    exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica
Rule 41    exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica
Rule 42    exp_aritmetica -> exp_aritmetica DIV exp_aritmetica
Rule 43    exp_aritmetica -> exp_aritmetica MOD exp_aritmetica
Rule 44    exp_aritmetica -> exp_aritmetica POT exp_aritmetica
Rule 45    exp_aritmetica -> exp_aritmetica COLON exp_aritmetica
Rule 46    exp_aritmetica -> MINUS exp_aritmetica
Rule 47    exp_aritmetica -> LPAR exp_logica RPAR
Rule 48    exp_aritmetica -> NUMERO
Rule 49    exp_aritmetica -> DECIMAL
Rule 50    exp_aritmetica -> CARACTER
Rule 51    exp_aritmetica -> CADENA
Rule 52    exp_aritmetica -> TRUE
Rule 53    exp_aritmetica -> FALSE
Rule 54    exp_aritmetica -> ID
Rule 55    exp_aritmetica -> TYPEOF LPAR exp_logica RPAR
Rule 56    exp_aritmetica -> STRING LPAR exp_logica RPAR
Rule 57    exp_aritmetica -> FLOAT LPAR exp_logica RPAR
Rule 58    exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR
Rule 59    exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR
Rule 60    exp_aritmetica -> SIN LPAR exp_logica RPAR
Rule 61    exp_aritmetica -> COS LPAR exp_logica RPAR
Rule 62    exp_aritmetica -> TAN LPAR exp_logica RPAR
Rule 63    exp_aritmetica -> LOG10 LPAR exp_logica RPAR
Rule 64    exp_aritmetica -> SQRT LPAR exp_logica RPAR
Rule 65    exp_aritmetica -> LENGTH LPAR exp_logica RPAR
Rule 66    exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR
Rule 67    exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR
Rule 68    empty -> <empty>

Terminals, with rules where they appear

ADDITION             : 
AND                  : 28
AS                   : 
BOOL                 : 22
CADENA               : 51
CARACTER             : 50
CHR                  : 21
COLON                : 45
COMMA                : 12 58 59
COS                  : 61
DECIMAL              : 49
DIFERENT             : 37
DIFFERENCE           : 
DIV                  : 42
ELSE                 : 25
END                  : 23 24 25
EQUAL                : 15
EQUALITY             : 36
FALSE                : 53
FLOAT                : 57
FLOAT64              : 19
FOR                  : 
GREATHER             : 34
GREATHEREQ           : 35
ID                   : 14 54
IF                   : 24 25
IN                   : 
INT64                : 18
LBRACE               : 
LENGTH               : 65
LESS                 : 32
LESSEQ               : 33
LOG10                : 63
LOWERCASE            : 67
LPAR                 : 10 11 47 55 56 57 58 59 60 61 62 63 64 65 66 67
MINUS                : 40 46
MOD                  : 43
NOT                  : 30
NOTHING              : 
NUMERO               : 48
OR                   : 29
PARSE                : 59
PLUS                 : 39
POT                  : 44
PRINT                : 10
PRINTLN              : 11
PRODUCT              : 
QUESTION             : 
QUOTIENT             : 
RBRACE               : 
RPAR                 : 10 11 47 55 56 57 58 59 60 61 62 63 64 65 66 67
SEMICOL              : 26
SIN                  : 60
SQRT                 : 64
STR                  : 20
STRING               : 56
TAN                  : 62
TIMES                : 41
TRUE                 : 52
TRUNC                : 58
TYPEOF               : 55
UPPERCASE            : 66
WHILE                : 23
error                : 

Nonterminals, with rules where they appear

asignacion           : 14
assign_type          : 15
data_type            : 58 59
definicion           : 6
empty                : 16 17 27
exp_aritmetica       : 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46
exp_logica           : 12 13 15 23 24 25 28 28 29 29 30 47 55 56 57 58 59 60 61 62 63 64 65 66 67
exp_relacional       : 31 32 32 33 33 34 34 35 35 36 36 37 37
if                   : 8
if_else              : 9
init                 : 0
instruccion          : 2 3
instrucciones        : 1 2 23 24 25 25
print                : 4
print_args           : 10 11 12
println              : 5
semicolon            : 10 11 14 23 24 25
while                : 7

Parsing method: LALR

state 0

    (0) S' -> . init
    (1) init -> . instrucciones
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . while
    (8) instruccion -> . if
    (9) instruccion -> . if_else
    (10) print -> . PRINT LPAR print_args RPAR semicolon
    (11) println -> . PRINTLN LPAR print_args RPAR semicolon
    (14) definicion -> . ID asignacion semicolon
    (23) while -> . WHILE exp_logica instrucciones END semicolon
    (24) if -> . IF exp_logica instrucciones END semicolon
    (25) if_else -> . IF exp_logica instrucciones ELSE instrucciones END semicolon

    PRINT           shift and go to state 10
    PRINTLN         shift and go to state 11
    ID              shift and go to state 12
    WHILE           shift and go to state 13
    IF              shift and go to state 14

    init                           shift and go to state 1
    instrucciones                  shift and go to state 2
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    if_else                        shift and go to state 9

state 1

    (0) S' -> init .



state 2

    (1) init -> instrucciones .
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . while
    (8) instruccion -> . if
    (9) instruccion -> . if_else
    (10) print -> . PRINT LPAR print_args RPAR semicolon
    (11) println -> . PRINTLN LPAR print_args RPAR semicolon
    (14) definicion -> . ID asignacion semicolon
    (23) while -> . WHILE exp_logica instrucciones END semicolon
    (24) if -> . IF exp_logica instrucciones END semicolon
    (25) if_else -> . IF exp_logica instrucciones ELSE instrucciones END semicolon

    $end            reduce using rule 1 (init -> instrucciones .)
    PRINT           shift and go to state 10
    PRINTLN         shift and go to state 11
    ID              shift and go to state 12
    WHILE           shift and go to state 13
    IF              shift and go to state 14

    instruccion                    shift and go to state 15
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    if_else                        shift and go to state 9

state 3

    (3) instrucciones -> instruccion .

    PRINT           reduce using rule 3 (instrucciones -> instruccion .)
    PRINTLN         reduce using rule 3 (instrucciones -> instruccion .)
    ID              reduce using rule 3 (instrucciones -> instruccion .)
    WHILE           reduce using rule 3 (instrucciones -> instruccion .)
    IF              reduce using rule 3 (instrucciones -> instruccion .)
    $end            reduce using rule 3 (instrucciones -> instruccion .)
    END             reduce using rule 3 (instrucciones -> instruccion .)
    ELSE            reduce using rule 3 (instrucciones -> instruccion .)


state 4

    (4) instruccion -> print .

    PRINT           reduce using rule 4 (instruccion -> print .)
    PRINTLN         reduce using rule 4 (instruccion -> print .)
    ID              reduce using rule 4 (instruccion -> print .)
    WHILE           reduce using rule 4 (instruccion -> print .)
    IF              reduce using rule 4 (instruccion -> print .)
    $end            reduce using rule 4 (instruccion -> print .)
    END             reduce using rule 4 (instruccion -> print .)
    ELSE            reduce using rule 4 (instruccion -> print .)


state 5

    (5) instruccion -> println .

    PRINT           reduce using rule 5 (instruccion -> println .)
    PRINTLN         reduce using rule 5 (instruccion -> println .)
    ID              reduce using rule 5 (instruccion -> println .)
    WHILE           reduce using rule 5 (instruccion -> println .)
    IF              reduce using rule 5 (instruccion -> println .)
    $end            reduce using rule 5 (instruccion -> println .)
    END             reduce using rule 5 (instruccion -> println .)
    ELSE            reduce using rule 5 (instruccion -> println .)


state 6

    (6) instruccion -> definicion .

    PRINT           reduce using rule 6 (instruccion -> definicion .)
    PRINTLN         reduce using rule 6 (instruccion -> definicion .)
    ID              reduce using rule 6 (instruccion -> definicion .)
    WHILE           reduce using rule 6 (instruccion -> definicion .)
    IF              reduce using rule 6 (instruccion -> definicion .)
    $end            reduce using rule 6 (instruccion -> definicion .)
    END             reduce using rule 6 (instruccion -> definicion .)
    ELSE            reduce using rule 6 (instruccion -> definicion .)


state 7

    (7) instruccion -> while .

    PRINT           reduce using rule 7 (instruccion -> while .)
    PRINTLN         reduce using rule 7 (instruccion -> while .)
    ID              reduce using rule 7 (instruccion -> while .)
    WHILE           reduce using rule 7 (instruccion -> while .)
    IF              reduce using rule 7 (instruccion -> while .)
    $end            reduce using rule 7 (instruccion -> while .)
    END             reduce using rule 7 (instruccion -> while .)
    ELSE            reduce using rule 7 (instruccion -> while .)


state 8

    (8) instruccion -> if .

    PRINT           reduce using rule 8 (instruccion -> if .)
    PRINTLN         reduce using rule 8 (instruccion -> if .)
    ID              reduce using rule 8 (instruccion -> if .)
    WHILE           reduce using rule 8 (instruccion -> if .)
    IF              reduce using rule 8 (instruccion -> if .)
    $end            reduce using rule 8 (instruccion -> if .)
    END             reduce using rule 8 (instruccion -> if .)
    ELSE            reduce using rule 8 (instruccion -> if .)


state 9

    (9) instruccion -> if_else .

    PRINT           reduce using rule 9 (instruccion -> if_else .)
    PRINTLN         reduce using rule 9 (instruccion -> if_else .)
    ID              reduce using rule 9 (instruccion -> if_else .)
    WHILE           reduce using rule 9 (instruccion -> if_else .)
    IF              reduce using rule 9 (instruccion -> if_else .)
    $end            reduce using rule 9 (instruccion -> if_else .)
    END             reduce using rule 9 (instruccion -> if_else .)
    ELSE            reduce using rule 9 (instruccion -> if_else .)


state 10

    (10) print -> PRINT . LPAR print_args RPAR semicolon

    LPAR            shift and go to state 16


state 11

    (11) println -> PRINTLN . LPAR print_args RPAR semicolon

    LPAR            shift and go to state 17


state 12

    (14) definicion -> ID . asignacion semicolon
    (15) asignacion -> . EQUAL exp_logica assign_type
    (16) asignacion -> . empty
    (68) empty -> .

    EQUAL           shift and go to state 19
    SEMICOL         reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    PRINTLN         reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    END             reduce using rule 68 (empty -> .)
    ELSE            reduce using rule 68 (empty -> .)

    asignacion                     shift and go to state 18
    empty                          shift and go to state 20

state 13

    (23) while -> WHILE . exp_logica instrucciones END semicolon
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 21
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 14

    (24) if -> IF . exp_logica instrucciones END semicolon
    (25) if_else -> IF . exp_logica instrucciones ELSE instrucciones END semicolon
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 47
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 15

    (2) instrucciones -> instrucciones instruccion .

    PRINT           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    PRINTLN         reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ID              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    WHILE           reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    IF              reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    $end            reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    END             reduce using rule 2 (instrucciones -> instrucciones instruccion .)
    ELSE            reduce using rule 2 (instrucciones -> instrucciones instruccion .)


state 16

    (10) print -> PRINT LPAR . print_args RPAR semicolon
    (12) print_args -> . print_args COMMA exp_logica
    (13) print_args -> . exp_logica
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    print_args                     shift and go to state 48
    exp_logica                     shift and go to state 49
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 17

    (11) println -> PRINTLN LPAR . print_args RPAR semicolon
    (12) print_args -> . print_args COMMA exp_logica
    (13) print_args -> . exp_logica
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    print_args                     shift and go to state 50
    exp_logica                     shift and go to state 49
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 18

    (14) definicion -> ID asignacion . semicolon
    (26) semicolon -> . SEMICOL
    (27) semicolon -> . empty
    (68) empty -> .

    SEMICOL         shift and go to state 52
    PRINT           reduce using rule 68 (empty -> .)
    PRINTLN         reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    END             reduce using rule 68 (empty -> .)
    ELSE            reduce using rule 68 (empty -> .)

    semicolon                      shift and go to state 51
    empty                          shift and go to state 53

state 19

    (15) asignacion -> EQUAL . exp_logica assign_type
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 54
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 20

    (16) asignacion -> empty .

    SEMICOL         reduce using rule 16 (asignacion -> empty .)
    PRINT           reduce using rule 16 (asignacion -> empty .)
    PRINTLN         reduce using rule 16 (asignacion -> empty .)
    ID              reduce using rule 16 (asignacion -> empty .)
    WHILE           reduce using rule 16 (asignacion -> empty .)
    IF              reduce using rule 16 (asignacion -> empty .)
    $end            reduce using rule 16 (asignacion -> empty .)
    END             reduce using rule 16 (asignacion -> empty .)
    ELSE            reduce using rule 16 (asignacion -> empty .)


state 21

    (23) while -> WHILE exp_logica . instrucciones END semicolon
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . while
    (8) instruccion -> . if
    (9) instruccion -> . if_else
    (10) print -> . PRINT LPAR print_args RPAR semicolon
    (11) println -> . PRINTLN LPAR print_args RPAR semicolon
    (14) definicion -> . ID asignacion semicolon
    (23) while -> . WHILE exp_logica instrucciones END semicolon
    (24) if -> . IF exp_logica instrucciones END semicolon
    (25) if_else -> . IF exp_logica instrucciones ELSE instrucciones END semicolon

    AND             shift and go to state 56
    OR              shift and go to state 57
    PRINT           shift and go to state 10
    PRINTLN         shift and go to state 11
    ID              shift and go to state 12
    WHILE           shift and go to state 13
    IF              shift and go to state 14

    instrucciones                  shift and go to state 55
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    if_else                        shift and go to state 9

state 22

    (30) exp_logica -> NOT . exp_logica
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 58
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 23

    (31) exp_logica -> exp_relacional .
    (32) exp_relacional -> exp_relacional . LESS exp_relacional
    (33) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (34) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (35) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (36) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (37) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    AND             reduce using rule 31 (exp_logica -> exp_relacional .)
    OR              reduce using rule 31 (exp_logica -> exp_relacional .)
    PRINT           reduce using rule 31 (exp_logica -> exp_relacional .)
    PRINTLN         reduce using rule 31 (exp_logica -> exp_relacional .)
    ID              reduce using rule 31 (exp_logica -> exp_relacional .)
    WHILE           reduce using rule 31 (exp_logica -> exp_relacional .)
    IF              reduce using rule 31 (exp_logica -> exp_relacional .)
    RPAR            reduce using rule 31 (exp_logica -> exp_relacional .)
    COMMA           reduce using rule 31 (exp_logica -> exp_relacional .)
    SEMICOL         reduce using rule 31 (exp_logica -> exp_relacional .)
    $end            reduce using rule 31 (exp_logica -> exp_relacional .)
    END             reduce using rule 31 (exp_logica -> exp_relacional .)
    ELSE            reduce using rule 31 (exp_logica -> exp_relacional .)
    LESS            shift and go to state 59
    LESSEQ          shift and go to state 60
    GREATHER        shift and go to state 61
    GREATHEREQ      shift and go to state 62
    EQUALITY        shift and go to state 63
    DIFERENT        shift and go to state 64


state 24

    (38) exp_relacional -> exp_aritmetica .
    (39) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (42) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (43) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (44) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (45) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    LESS            reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    LESSEQ          reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    GREATHER        reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    GREATHEREQ      reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    EQUALITY        reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    DIFERENT        reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    AND             reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    OR              reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    PRINT           reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    PRINTLN         reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    ID              reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    WHILE           reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    IF              reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    RPAR            reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    COMMA           reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    SEMICOL         reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    $end            reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    END             reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    ELSE            reduce using rule 38 (exp_relacional -> exp_aritmetica .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POT             shift and go to state 70
    COLON           shift and go to state 71


state 25

    (46) exp_aritmetica -> MINUS . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_aritmetica                 shift and go to state 72

state 26

    (47) exp_aritmetica -> LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 73
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 27

    (48) exp_aritmetica -> NUMERO .

    PLUS            reduce using rule 48 (exp_aritmetica -> NUMERO .)
    MINUS           reduce using rule 48 (exp_aritmetica -> NUMERO .)
    TIMES           reduce using rule 48 (exp_aritmetica -> NUMERO .)
    DIV             reduce using rule 48 (exp_aritmetica -> NUMERO .)
    MOD             reduce using rule 48 (exp_aritmetica -> NUMERO .)
    POT             reduce using rule 48 (exp_aritmetica -> NUMERO .)
    COLON           reduce using rule 48 (exp_aritmetica -> NUMERO .)
    LESS            reduce using rule 48 (exp_aritmetica -> NUMERO .)
    LESSEQ          reduce using rule 48 (exp_aritmetica -> NUMERO .)
    GREATHER        reduce using rule 48 (exp_aritmetica -> NUMERO .)
    GREATHEREQ      reduce using rule 48 (exp_aritmetica -> NUMERO .)
    EQUALITY        reduce using rule 48 (exp_aritmetica -> NUMERO .)
    DIFERENT        reduce using rule 48 (exp_aritmetica -> NUMERO .)
    AND             reduce using rule 48 (exp_aritmetica -> NUMERO .)
    OR              reduce using rule 48 (exp_aritmetica -> NUMERO .)
    PRINT           reduce using rule 48 (exp_aritmetica -> NUMERO .)
    PRINTLN         reduce using rule 48 (exp_aritmetica -> NUMERO .)
    ID              reduce using rule 48 (exp_aritmetica -> NUMERO .)
    WHILE           reduce using rule 48 (exp_aritmetica -> NUMERO .)
    IF              reduce using rule 48 (exp_aritmetica -> NUMERO .)
    RPAR            reduce using rule 48 (exp_aritmetica -> NUMERO .)
    COMMA           reduce using rule 48 (exp_aritmetica -> NUMERO .)
    SEMICOL         reduce using rule 48 (exp_aritmetica -> NUMERO .)
    $end            reduce using rule 48 (exp_aritmetica -> NUMERO .)
    END             reduce using rule 48 (exp_aritmetica -> NUMERO .)
    ELSE            reduce using rule 48 (exp_aritmetica -> NUMERO .)


state 28

    (49) exp_aritmetica -> DECIMAL .

    PLUS            reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    MINUS           reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    TIMES           reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    DIV             reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    MOD             reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    POT             reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    COLON           reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    LESS            reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    LESSEQ          reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    GREATHER        reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    GREATHEREQ      reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    EQUALITY        reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    DIFERENT        reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    AND             reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    OR              reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    PRINT           reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    PRINTLN         reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    ID              reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    WHILE           reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    IF              reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    RPAR            reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    COMMA           reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    SEMICOL         reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    $end            reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    END             reduce using rule 49 (exp_aritmetica -> DECIMAL .)
    ELSE            reduce using rule 49 (exp_aritmetica -> DECIMAL .)


state 29

    (50) exp_aritmetica -> CARACTER .

    PLUS            reduce using rule 50 (exp_aritmetica -> CARACTER .)
    MINUS           reduce using rule 50 (exp_aritmetica -> CARACTER .)
    TIMES           reduce using rule 50 (exp_aritmetica -> CARACTER .)
    DIV             reduce using rule 50 (exp_aritmetica -> CARACTER .)
    MOD             reduce using rule 50 (exp_aritmetica -> CARACTER .)
    POT             reduce using rule 50 (exp_aritmetica -> CARACTER .)
    COLON           reduce using rule 50 (exp_aritmetica -> CARACTER .)
    LESS            reduce using rule 50 (exp_aritmetica -> CARACTER .)
    LESSEQ          reduce using rule 50 (exp_aritmetica -> CARACTER .)
    GREATHER        reduce using rule 50 (exp_aritmetica -> CARACTER .)
    GREATHEREQ      reduce using rule 50 (exp_aritmetica -> CARACTER .)
    EQUALITY        reduce using rule 50 (exp_aritmetica -> CARACTER .)
    DIFERENT        reduce using rule 50 (exp_aritmetica -> CARACTER .)
    AND             reduce using rule 50 (exp_aritmetica -> CARACTER .)
    OR              reduce using rule 50 (exp_aritmetica -> CARACTER .)
    PRINT           reduce using rule 50 (exp_aritmetica -> CARACTER .)
    PRINTLN         reduce using rule 50 (exp_aritmetica -> CARACTER .)
    ID              reduce using rule 50 (exp_aritmetica -> CARACTER .)
    WHILE           reduce using rule 50 (exp_aritmetica -> CARACTER .)
    IF              reduce using rule 50 (exp_aritmetica -> CARACTER .)
    RPAR            reduce using rule 50 (exp_aritmetica -> CARACTER .)
    COMMA           reduce using rule 50 (exp_aritmetica -> CARACTER .)
    SEMICOL         reduce using rule 50 (exp_aritmetica -> CARACTER .)
    $end            reduce using rule 50 (exp_aritmetica -> CARACTER .)
    END             reduce using rule 50 (exp_aritmetica -> CARACTER .)
    ELSE            reduce using rule 50 (exp_aritmetica -> CARACTER .)


state 30

    (51) exp_aritmetica -> CADENA .

    PLUS            reduce using rule 51 (exp_aritmetica -> CADENA .)
    MINUS           reduce using rule 51 (exp_aritmetica -> CADENA .)
    TIMES           reduce using rule 51 (exp_aritmetica -> CADENA .)
    DIV             reduce using rule 51 (exp_aritmetica -> CADENA .)
    MOD             reduce using rule 51 (exp_aritmetica -> CADENA .)
    POT             reduce using rule 51 (exp_aritmetica -> CADENA .)
    COLON           reduce using rule 51 (exp_aritmetica -> CADENA .)
    LESS            reduce using rule 51 (exp_aritmetica -> CADENA .)
    LESSEQ          reduce using rule 51 (exp_aritmetica -> CADENA .)
    GREATHER        reduce using rule 51 (exp_aritmetica -> CADENA .)
    GREATHEREQ      reduce using rule 51 (exp_aritmetica -> CADENA .)
    EQUALITY        reduce using rule 51 (exp_aritmetica -> CADENA .)
    DIFERENT        reduce using rule 51 (exp_aritmetica -> CADENA .)
    AND             reduce using rule 51 (exp_aritmetica -> CADENA .)
    OR              reduce using rule 51 (exp_aritmetica -> CADENA .)
    PRINT           reduce using rule 51 (exp_aritmetica -> CADENA .)
    PRINTLN         reduce using rule 51 (exp_aritmetica -> CADENA .)
    ID              reduce using rule 51 (exp_aritmetica -> CADENA .)
    WHILE           reduce using rule 51 (exp_aritmetica -> CADENA .)
    IF              reduce using rule 51 (exp_aritmetica -> CADENA .)
    RPAR            reduce using rule 51 (exp_aritmetica -> CADENA .)
    COMMA           reduce using rule 51 (exp_aritmetica -> CADENA .)
    SEMICOL         reduce using rule 51 (exp_aritmetica -> CADENA .)
    $end            reduce using rule 51 (exp_aritmetica -> CADENA .)
    END             reduce using rule 51 (exp_aritmetica -> CADENA .)
    ELSE            reduce using rule 51 (exp_aritmetica -> CADENA .)


state 31

    (52) exp_aritmetica -> TRUE .

    PLUS            reduce using rule 52 (exp_aritmetica -> TRUE .)
    MINUS           reduce using rule 52 (exp_aritmetica -> TRUE .)
    TIMES           reduce using rule 52 (exp_aritmetica -> TRUE .)
    DIV             reduce using rule 52 (exp_aritmetica -> TRUE .)
    MOD             reduce using rule 52 (exp_aritmetica -> TRUE .)
    POT             reduce using rule 52 (exp_aritmetica -> TRUE .)
    COLON           reduce using rule 52 (exp_aritmetica -> TRUE .)
    LESS            reduce using rule 52 (exp_aritmetica -> TRUE .)
    LESSEQ          reduce using rule 52 (exp_aritmetica -> TRUE .)
    GREATHER        reduce using rule 52 (exp_aritmetica -> TRUE .)
    GREATHEREQ      reduce using rule 52 (exp_aritmetica -> TRUE .)
    EQUALITY        reduce using rule 52 (exp_aritmetica -> TRUE .)
    DIFERENT        reduce using rule 52 (exp_aritmetica -> TRUE .)
    AND             reduce using rule 52 (exp_aritmetica -> TRUE .)
    OR              reduce using rule 52 (exp_aritmetica -> TRUE .)
    PRINT           reduce using rule 52 (exp_aritmetica -> TRUE .)
    PRINTLN         reduce using rule 52 (exp_aritmetica -> TRUE .)
    ID              reduce using rule 52 (exp_aritmetica -> TRUE .)
    WHILE           reduce using rule 52 (exp_aritmetica -> TRUE .)
    IF              reduce using rule 52 (exp_aritmetica -> TRUE .)
    RPAR            reduce using rule 52 (exp_aritmetica -> TRUE .)
    COMMA           reduce using rule 52 (exp_aritmetica -> TRUE .)
    SEMICOL         reduce using rule 52 (exp_aritmetica -> TRUE .)
    $end            reduce using rule 52 (exp_aritmetica -> TRUE .)
    END             reduce using rule 52 (exp_aritmetica -> TRUE .)
    ELSE            reduce using rule 52 (exp_aritmetica -> TRUE .)


state 32

    (53) exp_aritmetica -> FALSE .

    PLUS            reduce using rule 53 (exp_aritmetica -> FALSE .)
    MINUS           reduce using rule 53 (exp_aritmetica -> FALSE .)
    TIMES           reduce using rule 53 (exp_aritmetica -> FALSE .)
    DIV             reduce using rule 53 (exp_aritmetica -> FALSE .)
    MOD             reduce using rule 53 (exp_aritmetica -> FALSE .)
    POT             reduce using rule 53 (exp_aritmetica -> FALSE .)
    COLON           reduce using rule 53 (exp_aritmetica -> FALSE .)
    LESS            reduce using rule 53 (exp_aritmetica -> FALSE .)
    LESSEQ          reduce using rule 53 (exp_aritmetica -> FALSE .)
    GREATHER        reduce using rule 53 (exp_aritmetica -> FALSE .)
    GREATHEREQ      reduce using rule 53 (exp_aritmetica -> FALSE .)
    EQUALITY        reduce using rule 53 (exp_aritmetica -> FALSE .)
    DIFERENT        reduce using rule 53 (exp_aritmetica -> FALSE .)
    AND             reduce using rule 53 (exp_aritmetica -> FALSE .)
    OR              reduce using rule 53 (exp_aritmetica -> FALSE .)
    PRINT           reduce using rule 53 (exp_aritmetica -> FALSE .)
    PRINTLN         reduce using rule 53 (exp_aritmetica -> FALSE .)
    ID              reduce using rule 53 (exp_aritmetica -> FALSE .)
    WHILE           reduce using rule 53 (exp_aritmetica -> FALSE .)
    IF              reduce using rule 53 (exp_aritmetica -> FALSE .)
    RPAR            reduce using rule 53 (exp_aritmetica -> FALSE .)
    COMMA           reduce using rule 53 (exp_aritmetica -> FALSE .)
    SEMICOL         reduce using rule 53 (exp_aritmetica -> FALSE .)
    $end            reduce using rule 53 (exp_aritmetica -> FALSE .)
    END             reduce using rule 53 (exp_aritmetica -> FALSE .)
    ELSE            reduce using rule 53 (exp_aritmetica -> FALSE .)


state 33

    (54) exp_aritmetica -> ID .

    PLUS            reduce using rule 54 (exp_aritmetica -> ID .)
    MINUS           reduce using rule 54 (exp_aritmetica -> ID .)
    TIMES           reduce using rule 54 (exp_aritmetica -> ID .)
    DIV             reduce using rule 54 (exp_aritmetica -> ID .)
    MOD             reduce using rule 54 (exp_aritmetica -> ID .)
    POT             reduce using rule 54 (exp_aritmetica -> ID .)
    COLON           reduce using rule 54 (exp_aritmetica -> ID .)
    LESS            reduce using rule 54 (exp_aritmetica -> ID .)
    LESSEQ          reduce using rule 54 (exp_aritmetica -> ID .)
    GREATHER        reduce using rule 54 (exp_aritmetica -> ID .)
    GREATHEREQ      reduce using rule 54 (exp_aritmetica -> ID .)
    EQUALITY        reduce using rule 54 (exp_aritmetica -> ID .)
    DIFERENT        reduce using rule 54 (exp_aritmetica -> ID .)
    AND             reduce using rule 54 (exp_aritmetica -> ID .)
    OR              reduce using rule 54 (exp_aritmetica -> ID .)
    PRINT           reduce using rule 54 (exp_aritmetica -> ID .)
    PRINTLN         reduce using rule 54 (exp_aritmetica -> ID .)
    ID              reduce using rule 54 (exp_aritmetica -> ID .)
    WHILE           reduce using rule 54 (exp_aritmetica -> ID .)
    IF              reduce using rule 54 (exp_aritmetica -> ID .)
    RPAR            reduce using rule 54 (exp_aritmetica -> ID .)
    COMMA           reduce using rule 54 (exp_aritmetica -> ID .)
    SEMICOL         reduce using rule 54 (exp_aritmetica -> ID .)
    $end            reduce using rule 54 (exp_aritmetica -> ID .)
    END             reduce using rule 54 (exp_aritmetica -> ID .)
    ELSE            reduce using rule 54 (exp_aritmetica -> ID .)


state 34

    (55) exp_aritmetica -> TYPEOF . LPAR exp_logica RPAR

    LPAR            shift and go to state 74


state 35

    (56) exp_aritmetica -> STRING . LPAR exp_logica RPAR

    LPAR            shift and go to state 75


state 36

    (57) exp_aritmetica -> FLOAT . LPAR exp_logica RPAR

    LPAR            shift and go to state 76


state 37

    (58) exp_aritmetica -> TRUNC . LPAR data_type COMMA exp_logica RPAR

    LPAR            shift and go to state 77


state 38

    (59) exp_aritmetica -> PARSE . LPAR data_type COMMA exp_logica RPAR

    LPAR            shift and go to state 78


state 39

    (60) exp_aritmetica -> SIN . LPAR exp_logica RPAR

    LPAR            shift and go to state 79


state 40

    (61) exp_aritmetica -> COS . LPAR exp_logica RPAR

    LPAR            shift and go to state 80


state 41

    (62) exp_aritmetica -> TAN . LPAR exp_logica RPAR

    LPAR            shift and go to state 81


state 42

    (63) exp_aritmetica -> LOG10 . LPAR exp_logica RPAR

    LPAR            shift and go to state 82


state 43

    (64) exp_aritmetica -> SQRT . LPAR exp_logica RPAR

    LPAR            shift and go to state 83


state 44

    (65) exp_aritmetica -> LENGTH . LPAR exp_logica RPAR

    LPAR            shift and go to state 84


state 45

    (66) exp_aritmetica -> UPPERCASE . LPAR exp_logica RPAR

    LPAR            shift and go to state 85


state 46

    (67) exp_aritmetica -> LOWERCASE . LPAR exp_logica RPAR

    LPAR            shift and go to state 86


state 47

    (24) if -> IF exp_logica . instrucciones END semicolon
    (25) if_else -> IF exp_logica . instrucciones ELSE instrucciones END semicolon
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . while
    (8) instruccion -> . if
    (9) instruccion -> . if_else
    (10) print -> . PRINT LPAR print_args RPAR semicolon
    (11) println -> . PRINTLN LPAR print_args RPAR semicolon
    (14) definicion -> . ID asignacion semicolon
    (23) while -> . WHILE exp_logica instrucciones END semicolon
    (24) if -> . IF exp_logica instrucciones END semicolon
    (25) if_else -> . IF exp_logica instrucciones ELSE instrucciones END semicolon

    AND             shift and go to state 56
    OR              shift and go to state 57
    PRINT           shift and go to state 10
    PRINTLN         shift and go to state 11
    ID              shift and go to state 12
    WHILE           shift and go to state 13
    IF              shift and go to state 14

    instrucciones                  shift and go to state 87
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    if_else                        shift and go to state 9

state 48

    (10) print -> PRINT LPAR print_args . RPAR semicolon
    (12) print_args -> print_args . COMMA exp_logica

    RPAR            shift and go to state 88
    COMMA           shift and go to state 89


state 49

    (13) print_args -> exp_logica .
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            reduce using rule 13 (print_args -> exp_logica .)
    COMMA           reduce using rule 13 (print_args -> exp_logica .)
    AND             shift and go to state 56
    OR              shift and go to state 57


state 50

    (11) println -> PRINTLN LPAR print_args . RPAR semicolon
    (12) print_args -> print_args . COMMA exp_logica

    RPAR            shift and go to state 90
    COMMA           shift and go to state 89


state 51

    (14) definicion -> ID asignacion semicolon .

    PRINT           reduce using rule 14 (definicion -> ID asignacion semicolon .)
    PRINTLN         reduce using rule 14 (definicion -> ID asignacion semicolon .)
    ID              reduce using rule 14 (definicion -> ID asignacion semicolon .)
    WHILE           reduce using rule 14 (definicion -> ID asignacion semicolon .)
    IF              reduce using rule 14 (definicion -> ID asignacion semicolon .)
    $end            reduce using rule 14 (definicion -> ID asignacion semicolon .)
    END             reduce using rule 14 (definicion -> ID asignacion semicolon .)
    ELSE            reduce using rule 14 (definicion -> ID asignacion semicolon .)


state 52

    (26) semicolon -> SEMICOL .

    PRINT           reduce using rule 26 (semicolon -> SEMICOL .)
    PRINTLN         reduce using rule 26 (semicolon -> SEMICOL .)
    ID              reduce using rule 26 (semicolon -> SEMICOL .)
    WHILE           reduce using rule 26 (semicolon -> SEMICOL .)
    IF              reduce using rule 26 (semicolon -> SEMICOL .)
    $end            reduce using rule 26 (semicolon -> SEMICOL .)
    END             reduce using rule 26 (semicolon -> SEMICOL .)
    ELSE            reduce using rule 26 (semicolon -> SEMICOL .)


state 53

    (27) semicolon -> empty .

    PRINT           reduce using rule 27 (semicolon -> empty .)
    PRINTLN         reduce using rule 27 (semicolon -> empty .)
    ID              reduce using rule 27 (semicolon -> empty .)
    WHILE           reduce using rule 27 (semicolon -> empty .)
    IF              reduce using rule 27 (semicolon -> empty .)
    $end            reduce using rule 27 (semicolon -> empty .)
    END             reduce using rule 27 (semicolon -> empty .)
    ELSE            reduce using rule 27 (semicolon -> empty .)


state 54

    (15) asignacion -> EQUAL exp_logica . assign_type
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica
    (17) assign_type -> . empty
    (68) empty -> .

    AND             shift and go to state 56
    OR              shift and go to state 57
    SEMICOL         reduce using rule 68 (empty -> .)
    PRINT           reduce using rule 68 (empty -> .)
    PRINTLN         reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    END             reduce using rule 68 (empty -> .)
    ELSE            reduce using rule 68 (empty -> .)

    assign_type                    shift and go to state 91
    empty                          shift and go to state 92

state 55

    (23) while -> WHILE exp_logica instrucciones . END semicolon
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . while
    (8) instruccion -> . if
    (9) instruccion -> . if_else
    (10) print -> . PRINT LPAR print_args RPAR semicolon
    (11) println -> . PRINTLN LPAR print_args RPAR semicolon
    (14) definicion -> . ID asignacion semicolon
    (23) while -> . WHILE exp_logica instrucciones END semicolon
    (24) if -> . IF exp_logica instrucciones END semicolon
    (25) if_else -> . IF exp_logica instrucciones ELSE instrucciones END semicolon

    END             shift and go to state 93
    PRINT           shift and go to state 10
    PRINTLN         shift and go to state 11
    ID              shift and go to state 12
    WHILE           shift and go to state 13
    IF              shift and go to state 14

    instruccion                    shift and go to state 15
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    if_else                        shift and go to state 9

state 56

    (28) exp_logica -> exp_logica AND . exp_logica
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 94
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 57

    (29) exp_logica -> exp_logica OR . exp_logica
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 95
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 58

    (30) exp_logica -> NOT exp_logica .
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    AND             reduce using rule 30 (exp_logica -> NOT exp_logica .)
    OR              reduce using rule 30 (exp_logica -> NOT exp_logica .)
    PRINT           reduce using rule 30 (exp_logica -> NOT exp_logica .)
    PRINTLN         reduce using rule 30 (exp_logica -> NOT exp_logica .)
    ID              reduce using rule 30 (exp_logica -> NOT exp_logica .)
    WHILE           reduce using rule 30 (exp_logica -> NOT exp_logica .)
    IF              reduce using rule 30 (exp_logica -> NOT exp_logica .)
    RPAR            reduce using rule 30 (exp_logica -> NOT exp_logica .)
    COMMA           reduce using rule 30 (exp_logica -> NOT exp_logica .)
    SEMICOL         reduce using rule 30 (exp_logica -> NOT exp_logica .)
    $end            reduce using rule 30 (exp_logica -> NOT exp_logica .)
    END             reduce using rule 30 (exp_logica -> NOT exp_logica .)
    ELSE            reduce using rule 30 (exp_logica -> NOT exp_logica .)

  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]


state 59

    (32) exp_relacional -> exp_relacional LESS . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_relacional                 shift and go to state 96
    exp_aritmetica                 shift and go to state 24

state 60

    (33) exp_relacional -> exp_relacional LESSEQ . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_relacional                 shift and go to state 97
    exp_aritmetica                 shift and go to state 24

state 61

    (34) exp_relacional -> exp_relacional GREATHER . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_relacional                 shift and go to state 98
    exp_aritmetica                 shift and go to state 24

state 62

    (35) exp_relacional -> exp_relacional GREATHEREQ . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_relacional                 shift and go to state 99
    exp_aritmetica                 shift and go to state 24

state 63

    (36) exp_relacional -> exp_relacional EQUALITY . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_relacional                 shift and go to state 100
    exp_aritmetica                 shift and go to state 24

state 64

    (37) exp_relacional -> exp_relacional DIFERENT . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_relacional                 shift and go to state 101
    exp_aritmetica                 shift and go to state 24

state 65

    (39) exp_aritmetica -> exp_aritmetica PLUS . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_aritmetica                 shift and go to state 102

state 66

    (40) exp_aritmetica -> exp_aritmetica MINUS . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_aritmetica                 shift and go to state 103

state 67

    (41) exp_aritmetica -> exp_aritmetica TIMES . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_aritmetica                 shift and go to state 104

state 68

    (42) exp_aritmetica -> exp_aritmetica DIV . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_aritmetica                 shift and go to state 105

state 69

    (43) exp_aritmetica -> exp_aritmetica MOD . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_aritmetica                 shift and go to state 106

state 70

    (44) exp_aritmetica -> exp_aritmetica POT . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_aritmetica                 shift and go to state 107

state 71

    (45) exp_aritmetica -> exp_aritmetica COLON . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_aritmetica                 shift and go to state 108

state 72

    (46) exp_aritmetica -> MINUS exp_aritmetica .
    (39) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (42) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (43) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (44) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (45) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    MINUS           reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    TIMES           reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    DIV             reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    MOD             reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    POT             reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    COLON           reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    LESS            reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    LESSEQ          reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    GREATHER        reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    EQUALITY        reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    DIFERENT        reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    AND             reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    OR              reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    PRINT           reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    PRINTLN         reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    ID              reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    WHILE           reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    IF              reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    RPAR            reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    COMMA           reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    SEMICOL         reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    $end            reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    END             reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)
    ELSE            reduce using rule 46 (exp_aritmetica -> MINUS exp_aritmetica .)

  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! POT             [ shift and go to state 70 ]
  ! COLON           [ shift and go to state 71 ]


state 73

    (47) exp_aritmetica -> LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 109
    AND             shift and go to state 56
    OR              shift and go to state 57


state 74

    (55) exp_aritmetica -> TYPEOF LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 110
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 75

    (56) exp_aritmetica -> STRING LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 111
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 76

    (57) exp_aritmetica -> FLOAT LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 112
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 77

    (58) exp_aritmetica -> TRUNC LPAR . data_type COMMA exp_logica RPAR
    (18) data_type -> . INT64
    (19) data_type -> . FLOAT64
    (20) data_type -> . STR
    (21) data_type -> . CHR
    (22) data_type -> . BOOL

    INT64           shift and go to state 114
    FLOAT64         shift and go to state 115
    STR             shift and go to state 116
    CHR             shift and go to state 117
    BOOL            shift and go to state 118

    data_type                      shift and go to state 113

state 78

    (59) exp_aritmetica -> PARSE LPAR . data_type COMMA exp_logica RPAR
    (18) data_type -> . INT64
    (19) data_type -> . FLOAT64
    (20) data_type -> . STR
    (21) data_type -> . CHR
    (22) data_type -> . BOOL

    INT64           shift and go to state 114
    FLOAT64         shift and go to state 115
    STR             shift and go to state 116
    CHR             shift and go to state 117
    BOOL            shift and go to state 118

    data_type                      shift and go to state 119

state 79

    (60) exp_aritmetica -> SIN LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 120
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 80

    (61) exp_aritmetica -> COS LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 121
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 81

    (62) exp_aritmetica -> TAN LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 122
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 82

    (63) exp_aritmetica -> LOG10 LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 123
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 83

    (64) exp_aritmetica -> SQRT LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 124
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 84

    (65) exp_aritmetica -> LENGTH LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 125
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 85

    (66) exp_aritmetica -> UPPERCASE LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 126
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 86

    (67) exp_aritmetica -> LOWERCASE LPAR . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 127
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 87

    (24) if -> IF exp_logica instrucciones . END semicolon
    (25) if_else -> IF exp_logica instrucciones . ELSE instrucciones END semicolon
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . while
    (8) instruccion -> . if
    (9) instruccion -> . if_else
    (10) print -> . PRINT LPAR print_args RPAR semicolon
    (11) println -> . PRINTLN LPAR print_args RPAR semicolon
    (14) definicion -> . ID asignacion semicolon
    (23) while -> . WHILE exp_logica instrucciones END semicolon
    (24) if -> . IF exp_logica instrucciones END semicolon
    (25) if_else -> . IF exp_logica instrucciones ELSE instrucciones END semicolon

    END             shift and go to state 128
    ELSE            shift and go to state 129
    PRINT           shift and go to state 10
    PRINTLN         shift and go to state 11
    ID              shift and go to state 12
    WHILE           shift and go to state 13
    IF              shift and go to state 14

    instruccion                    shift and go to state 15
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    if_else                        shift and go to state 9

state 88

    (10) print -> PRINT LPAR print_args RPAR . semicolon
    (26) semicolon -> . SEMICOL
    (27) semicolon -> . empty
    (68) empty -> .

    SEMICOL         shift and go to state 52
    PRINT           reduce using rule 68 (empty -> .)
    PRINTLN         reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    END             reduce using rule 68 (empty -> .)
    ELSE            reduce using rule 68 (empty -> .)

    semicolon                      shift and go to state 130
    empty                          shift and go to state 53

state 89

    (12) print_args -> print_args COMMA . exp_logica
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 131
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 90

    (11) println -> PRINTLN LPAR print_args RPAR . semicolon
    (26) semicolon -> . SEMICOL
    (27) semicolon -> . empty
    (68) empty -> .

    SEMICOL         shift and go to state 52
    PRINT           reduce using rule 68 (empty -> .)
    PRINTLN         reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    END             reduce using rule 68 (empty -> .)
    ELSE            reduce using rule 68 (empty -> .)

    semicolon                      shift and go to state 132
    empty                          shift and go to state 53

state 91

    (15) asignacion -> EQUAL exp_logica assign_type .

    SEMICOL         reduce using rule 15 (asignacion -> EQUAL exp_logica assign_type .)
    PRINT           reduce using rule 15 (asignacion -> EQUAL exp_logica assign_type .)
    PRINTLN         reduce using rule 15 (asignacion -> EQUAL exp_logica assign_type .)
    ID              reduce using rule 15 (asignacion -> EQUAL exp_logica assign_type .)
    WHILE           reduce using rule 15 (asignacion -> EQUAL exp_logica assign_type .)
    IF              reduce using rule 15 (asignacion -> EQUAL exp_logica assign_type .)
    $end            reduce using rule 15 (asignacion -> EQUAL exp_logica assign_type .)
    END             reduce using rule 15 (asignacion -> EQUAL exp_logica assign_type .)
    ELSE            reduce using rule 15 (asignacion -> EQUAL exp_logica assign_type .)


state 92

    (17) assign_type -> empty .

    SEMICOL         reduce using rule 17 (assign_type -> empty .)
    PRINT           reduce using rule 17 (assign_type -> empty .)
    PRINTLN         reduce using rule 17 (assign_type -> empty .)
    ID              reduce using rule 17 (assign_type -> empty .)
    WHILE           reduce using rule 17 (assign_type -> empty .)
    IF              reduce using rule 17 (assign_type -> empty .)
    $end            reduce using rule 17 (assign_type -> empty .)
    END             reduce using rule 17 (assign_type -> empty .)
    ELSE            reduce using rule 17 (assign_type -> empty .)


state 93

    (23) while -> WHILE exp_logica instrucciones END . semicolon
    (26) semicolon -> . SEMICOL
    (27) semicolon -> . empty
    (68) empty -> .

    SEMICOL         shift and go to state 52
    PRINT           reduce using rule 68 (empty -> .)
    PRINTLN         reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    END             reduce using rule 68 (empty -> .)
    ELSE            reduce using rule 68 (empty -> .)

    semicolon                      shift and go to state 133
    empty                          shift and go to state 53

state 94

    (28) exp_logica -> exp_logica AND exp_logica .
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    AND             reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    PRINT           reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    PRINTLN         reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    ID              reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    WHILE           reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    IF              reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    RPAR            reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    COMMA           reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    SEMICOL         reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    $end            reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    END             reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    ELSE            reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .)
    OR              shift and go to state 57

  ! OR              [ reduce using rule 28 (exp_logica -> exp_logica AND exp_logica .) ]
  ! AND             [ shift and go to state 56 ]


state 95

    (29) exp_logica -> exp_logica OR exp_logica .
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    AND             reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    OR              reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    PRINT           reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    PRINTLN         reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    ID              reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    WHILE           reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    IF              reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    RPAR            reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    COMMA           reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    SEMICOL         reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    $end            reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    END             reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)
    ELSE            reduce using rule 29 (exp_logica -> exp_logica OR exp_logica .)

  ! AND             [ shift and go to state 56 ]
  ! OR              [ shift and go to state 57 ]


state 96

    (32) exp_relacional -> exp_relacional LESS exp_relacional .
    (32) exp_relacional -> exp_relacional . LESS exp_relacional
    (33) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (34) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (35) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (36) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (37) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    LESSEQ          reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    GREATHER        reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    GREATHEREQ      reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    EQUALITY        reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    DIFERENT        reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    AND             reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    OR              reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    PRINT           reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    PRINTLN         reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    ID              reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    WHILE           reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    IF              reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    RPAR            reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    COMMA           reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    SEMICOL         reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    $end            reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    END             reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)
    ELSE            reduce using rule 32 (exp_relacional -> exp_relacional LESS exp_relacional .)

  ! LESS            [ shift and go to state 59 ]
  ! LESSEQ          [ shift and go to state 60 ]
  ! GREATHER        [ shift and go to state 61 ]
  ! GREATHEREQ      [ shift and go to state 62 ]
  ! EQUALITY        [ shift and go to state 63 ]
  ! DIFERENT        [ shift and go to state 64 ]


state 97

    (33) exp_relacional -> exp_relacional LESSEQ exp_relacional .
    (32) exp_relacional -> exp_relacional . LESS exp_relacional
    (33) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (34) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (35) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (36) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (37) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    LESSEQ          reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    GREATHER        reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    GREATHEREQ      reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    EQUALITY        reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    DIFERENT        reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    AND             reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    OR              reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    PRINT           reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    PRINTLN         reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    ID              reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    WHILE           reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    IF              reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    RPAR            reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    COMMA           reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    SEMICOL         reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    $end            reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    END             reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)
    ELSE            reduce using rule 33 (exp_relacional -> exp_relacional LESSEQ exp_relacional .)

  ! LESS            [ shift and go to state 59 ]
  ! LESSEQ          [ shift and go to state 60 ]
  ! GREATHER        [ shift and go to state 61 ]
  ! GREATHEREQ      [ shift and go to state 62 ]
  ! EQUALITY        [ shift and go to state 63 ]
  ! DIFERENT        [ shift and go to state 64 ]


state 98

    (34) exp_relacional -> exp_relacional GREATHER exp_relacional .
    (32) exp_relacional -> exp_relacional . LESS exp_relacional
    (33) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (34) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (35) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (36) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (37) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    LESSEQ          reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    GREATHER        reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    GREATHEREQ      reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    EQUALITY        reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    DIFERENT        reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    AND             reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    OR              reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    PRINT           reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    PRINTLN         reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    ID              reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    WHILE           reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    IF              reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    RPAR            reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    COMMA           reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    SEMICOL         reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    $end            reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    END             reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)
    ELSE            reduce using rule 34 (exp_relacional -> exp_relacional GREATHER exp_relacional .)

  ! LESS            [ shift and go to state 59 ]
  ! LESSEQ          [ shift and go to state 60 ]
  ! GREATHER        [ shift and go to state 61 ]
  ! GREATHEREQ      [ shift and go to state 62 ]
  ! EQUALITY        [ shift and go to state 63 ]
  ! DIFERENT        [ shift and go to state 64 ]


state 99

    (35) exp_relacional -> exp_relacional GREATHEREQ exp_relacional .
    (32) exp_relacional -> exp_relacional . LESS exp_relacional
    (33) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (34) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (35) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (36) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (37) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    LESS            reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    LESSEQ          reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    GREATHER        reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    GREATHEREQ      reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    EQUALITY        reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    DIFERENT        reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    AND             reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    OR              reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    PRINT           reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    PRINTLN         reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    ID              reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    WHILE           reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    IF              reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    RPAR            reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    COMMA           reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    SEMICOL         reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    $end            reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    END             reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)
    ELSE            reduce using rule 35 (exp_relacional -> exp_relacional GREATHEREQ exp_relacional .)

  ! LESS            [ shift and go to state 59 ]
  ! LESSEQ          [ shift and go to state 60 ]
  ! GREATHER        [ shift and go to state 61 ]
  ! GREATHEREQ      [ shift and go to state 62 ]
  ! EQUALITY        [ shift and go to state 63 ]
  ! DIFERENT        [ shift and go to state 64 ]


state 100

    (36) exp_relacional -> exp_relacional EQUALITY exp_relacional .
    (32) exp_relacional -> exp_relacional . LESS exp_relacional
    (33) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (34) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (35) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (36) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (37) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    EQUALITY        reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    DIFERENT        reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    AND             reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    OR              reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    PRINT           reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    PRINTLN         reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    ID              reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    WHILE           reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    IF              reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    RPAR            reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    COMMA           reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    SEMICOL         reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    $end            reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    END             reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    ELSE            reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .)
    LESS            shift and go to state 59
    LESSEQ          shift and go to state 60
    GREATHER        shift and go to state 61
    GREATHEREQ      shift and go to state 62

  ! LESS            [ reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .) ]
  ! LESSEQ          [ reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .) ]
  ! GREATHER        [ reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .) ]
  ! GREATHEREQ      [ reduce using rule 36 (exp_relacional -> exp_relacional EQUALITY exp_relacional .) ]
  ! EQUALITY        [ shift and go to state 63 ]
  ! DIFERENT        [ shift and go to state 64 ]


state 101

    (37) exp_relacional -> exp_relacional DIFERENT exp_relacional .
    (32) exp_relacional -> exp_relacional . LESS exp_relacional
    (33) exp_relacional -> exp_relacional . LESSEQ exp_relacional
    (34) exp_relacional -> exp_relacional . GREATHER exp_relacional
    (35) exp_relacional -> exp_relacional . GREATHEREQ exp_relacional
    (36) exp_relacional -> exp_relacional . EQUALITY exp_relacional
    (37) exp_relacional -> exp_relacional . DIFERENT exp_relacional

    EQUALITY        reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    DIFERENT        reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    AND             reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    OR              reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    PRINT           reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    PRINTLN         reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    ID              reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    WHILE           reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    IF              reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    RPAR            reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    COMMA           reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    SEMICOL         reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    $end            reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    END             reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    ELSE            reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .)
    LESS            shift and go to state 59
    LESSEQ          shift and go to state 60
    GREATHER        shift and go to state 61
    GREATHEREQ      shift and go to state 62

  ! LESS            [ reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .) ]
  ! LESSEQ          [ reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .) ]
  ! GREATHER        [ reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .) ]
  ! GREATHEREQ      [ reduce using rule 37 (exp_relacional -> exp_relacional DIFERENT exp_relacional .) ]
  ! EQUALITY        [ shift and go to state 63 ]
  ! DIFERENT        [ shift and go to state 64 ]


state 102

    (39) exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .
    (39) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (42) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (43) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (44) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (45) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    MINUS           reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    COLON           reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    LESS            reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    LESSEQ          reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    GREATHER        reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    EQUALITY        reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    DIFERENT        reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    AND             reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    OR              reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    PRINT           reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    PRINTLN         reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    ID              reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    WHILE           reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    IF              reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    RPAR            reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    COMMA           reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    SEMICOL         reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    $end            reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    END             reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    ELSE            reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .)
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POT             shift and go to state 70

  ! TIMES           [ reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! DIV             [ reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! MOD             [ reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! POT             [ reduce using rule 39 (exp_aritmetica -> exp_aritmetica PLUS exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! COLON           [ shift and go to state 71 ]


state 103

    (40) exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .
    (39) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (42) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (43) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (44) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (45) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    MINUS           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    COLON           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    LESS            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    LESSEQ          reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    GREATHER        reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    GREATHEREQ      reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    EQUALITY        reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    DIFERENT        reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    AND             reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    OR              reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    PRINT           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    PRINTLN         reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    ID              reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    WHILE           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    IF              reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    RPAR            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    COMMA           reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    SEMICOL         reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    $end            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    END             reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    ELSE            reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .)
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POT             shift and go to state 70

  ! TIMES           [ reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! DIV             [ reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! MOD             [ reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! POT             [ reduce using rule 40 (exp_aritmetica -> exp_aritmetica MINUS exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! COLON           [ shift and go to state 71 ]


state 104

    (41) exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .
    (39) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (42) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (43) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (44) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (45) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    MINUS           reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    TIMES           reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    DIV             reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    MOD             reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    COLON           reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    LESS            reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    LESSEQ          reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    GREATHER        reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    GREATHEREQ      reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    EQUALITY        reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    DIFERENT        reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    AND             reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    OR              reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    PRINT           reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    PRINTLN         reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    ID              reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    WHILE           reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    IF              reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    RPAR            reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    COMMA           reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    SEMICOL         reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    $end            reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    END             reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    ELSE            reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .)
    POT             shift and go to state 70

  ! POT             [ reduce using rule 41 (exp_aritmetica -> exp_aritmetica TIMES exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! COLON           [ shift and go to state 71 ]


state 105

    (42) exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .
    (39) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (42) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (43) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (44) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (45) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    MINUS           reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    TIMES           reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    DIV             reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    MOD             reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    COLON           reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    LESS            reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    LESSEQ          reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    GREATHER        reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    GREATHEREQ      reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    EQUALITY        reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    DIFERENT        reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    AND             reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    OR              reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    PRINT           reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    PRINTLN         reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    ID              reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    WHILE           reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    IF              reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    RPAR            reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    COMMA           reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    SEMICOL         reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    $end            reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    END             reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    ELSE            reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .)
    POT             shift and go to state 70

  ! POT             [ reduce using rule 42 (exp_aritmetica -> exp_aritmetica DIV exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! COLON           [ shift and go to state 71 ]


state 106

    (43) exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .
    (39) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (42) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (43) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (44) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (45) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    MINUS           reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    TIMES           reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    DIV             reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    MOD             reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    COLON           reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    LESS            reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    LESSEQ          reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    GREATHER        reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    GREATHEREQ      reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    EQUALITY        reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    DIFERENT        reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    AND             reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    OR              reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    PRINT           reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    PRINTLN         reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    ID              reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    WHILE           reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    IF              reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    RPAR            reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    COMMA           reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    SEMICOL         reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    $end            reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    END             reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    ELSE            reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .)
    POT             shift and go to state 70

  ! POT             [ reduce using rule 43 (exp_aritmetica -> exp_aritmetica MOD exp_aritmetica .) ]
  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! COLON           [ shift and go to state 71 ]


state 107

    (44) exp_aritmetica -> exp_aritmetica POT exp_aritmetica .
    (39) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (42) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (43) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (44) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (45) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    PLUS            reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    MINUS           reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    TIMES           reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    DIV             reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    MOD             reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    POT             reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    COLON           reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    LESS            reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    LESSEQ          reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    GREATHER        reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    GREATHEREQ      reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    EQUALITY        reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    DIFERENT        reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    AND             reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    OR              reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    PRINT           reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    PRINTLN         reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    ID              reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    WHILE           reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    IF              reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    RPAR            reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    COMMA           reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    SEMICOL         reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    $end            reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    END             reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)
    ELSE            reduce using rule 44 (exp_aritmetica -> exp_aritmetica POT exp_aritmetica .)

  ! PLUS            [ shift and go to state 65 ]
  ! MINUS           [ shift and go to state 66 ]
  ! TIMES           [ shift and go to state 67 ]
  ! DIV             [ shift and go to state 68 ]
  ! MOD             [ shift and go to state 69 ]
  ! POT             [ shift and go to state 70 ]
  ! COLON           [ shift and go to state 71 ]


state 108

    (45) exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .
    (39) exp_aritmetica -> exp_aritmetica . PLUS exp_aritmetica
    (40) exp_aritmetica -> exp_aritmetica . MINUS exp_aritmetica
    (41) exp_aritmetica -> exp_aritmetica . TIMES exp_aritmetica
    (42) exp_aritmetica -> exp_aritmetica . DIV exp_aritmetica
    (43) exp_aritmetica -> exp_aritmetica . MOD exp_aritmetica
    (44) exp_aritmetica -> exp_aritmetica . POT exp_aritmetica
    (45) exp_aritmetica -> exp_aritmetica . COLON exp_aritmetica

    COLON           reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    LESS            reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    LESSEQ          reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    GREATHER        reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    GREATHEREQ      reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    EQUALITY        reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    DIFERENT        reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    AND             reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    OR              reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    PRINT           reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    PRINTLN         reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    ID              reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    WHILE           reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    IF              reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    RPAR            reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    COMMA           reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    SEMICOL         reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    $end            reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    END             reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    ELSE            reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .)
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    TIMES           shift and go to state 67
    DIV             shift and go to state 68
    MOD             shift and go to state 69
    POT             shift and go to state 70

  ! PLUS            [ reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! MINUS           [ reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! TIMES           [ reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! DIV             [ reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! MOD             [ reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! POT             [ reduce using rule 45 (exp_aritmetica -> exp_aritmetica COLON exp_aritmetica .) ]
  ! COLON           [ shift and go to state 71 ]


state 109

    (47) exp_aritmetica -> LPAR exp_logica RPAR .

    PLUS            reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    MINUS           reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    TIMES           reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    DIV             reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    MOD             reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    POT             reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    COLON           reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    LESS            reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    AND             reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    OR              reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    PRINT           reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    ID              reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    WHILE           reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    IF              reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    RPAR            reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    COMMA           reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    $end            reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    END             reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)
    ELSE            reduce using rule 47 (exp_aritmetica -> LPAR exp_logica RPAR .)


state 110

    (55) exp_aritmetica -> TYPEOF LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 134
    AND             shift and go to state 56
    OR              shift and go to state 57


state 111

    (56) exp_aritmetica -> STRING LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 135
    AND             shift and go to state 56
    OR              shift and go to state 57


state 112

    (57) exp_aritmetica -> FLOAT LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 136
    AND             shift and go to state 56
    OR              shift and go to state 57


state 113

    (58) exp_aritmetica -> TRUNC LPAR data_type . COMMA exp_logica RPAR

    COMMA           shift and go to state 137


state 114

    (18) data_type -> INT64 .

    COMMA           reduce using rule 18 (data_type -> INT64 .)


state 115

    (19) data_type -> FLOAT64 .

    COMMA           reduce using rule 19 (data_type -> FLOAT64 .)


state 116

    (20) data_type -> STR .

    COMMA           reduce using rule 20 (data_type -> STR .)


state 117

    (21) data_type -> CHR .

    COMMA           reduce using rule 21 (data_type -> CHR .)


state 118

    (22) data_type -> BOOL .

    COMMA           reduce using rule 22 (data_type -> BOOL .)


state 119

    (59) exp_aritmetica -> PARSE LPAR data_type . COMMA exp_logica RPAR

    COMMA           shift and go to state 138


state 120

    (60) exp_aritmetica -> SIN LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 139
    AND             shift and go to state 56
    OR              shift and go to state 57


state 121

    (61) exp_aritmetica -> COS LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 140
    AND             shift and go to state 56
    OR              shift and go to state 57


state 122

    (62) exp_aritmetica -> TAN LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 141
    AND             shift and go to state 56
    OR              shift and go to state 57


state 123

    (63) exp_aritmetica -> LOG10 LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 142
    AND             shift and go to state 56
    OR              shift and go to state 57


state 124

    (64) exp_aritmetica -> SQRT LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 143
    AND             shift and go to state 56
    OR              shift and go to state 57


state 125

    (65) exp_aritmetica -> LENGTH LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 144
    AND             shift and go to state 56
    OR              shift and go to state 57


state 126

    (66) exp_aritmetica -> UPPERCASE LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 145
    AND             shift and go to state 56
    OR              shift and go to state 57


state 127

    (67) exp_aritmetica -> LOWERCASE LPAR exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 146
    AND             shift and go to state 56
    OR              shift and go to state 57


state 128

    (24) if -> IF exp_logica instrucciones END . semicolon
    (26) semicolon -> . SEMICOL
    (27) semicolon -> . empty
    (68) empty -> .

    SEMICOL         shift and go to state 52
    PRINT           reduce using rule 68 (empty -> .)
    PRINTLN         reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    END             reduce using rule 68 (empty -> .)
    ELSE            reduce using rule 68 (empty -> .)

    semicolon                      shift and go to state 147
    empty                          shift and go to state 53

state 129

    (25) if_else -> IF exp_logica instrucciones ELSE . instrucciones END semicolon
    (2) instrucciones -> . instrucciones instruccion
    (3) instrucciones -> . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . while
    (8) instruccion -> . if
    (9) instruccion -> . if_else
    (10) print -> . PRINT LPAR print_args RPAR semicolon
    (11) println -> . PRINTLN LPAR print_args RPAR semicolon
    (14) definicion -> . ID asignacion semicolon
    (23) while -> . WHILE exp_logica instrucciones END semicolon
    (24) if -> . IF exp_logica instrucciones END semicolon
    (25) if_else -> . IF exp_logica instrucciones ELSE instrucciones END semicolon

    PRINT           shift and go to state 10
    PRINTLN         shift and go to state 11
    ID              shift and go to state 12
    WHILE           shift and go to state 13
    IF              shift and go to state 14

    instrucciones                  shift and go to state 148
    instruccion                    shift and go to state 3
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    if_else                        shift and go to state 9

state 130

    (10) print -> PRINT LPAR print_args RPAR semicolon .

    PRINT           reduce using rule 10 (print -> PRINT LPAR print_args RPAR semicolon .)
    PRINTLN         reduce using rule 10 (print -> PRINT LPAR print_args RPAR semicolon .)
    ID              reduce using rule 10 (print -> PRINT LPAR print_args RPAR semicolon .)
    WHILE           reduce using rule 10 (print -> PRINT LPAR print_args RPAR semicolon .)
    IF              reduce using rule 10 (print -> PRINT LPAR print_args RPAR semicolon .)
    $end            reduce using rule 10 (print -> PRINT LPAR print_args RPAR semicolon .)
    END             reduce using rule 10 (print -> PRINT LPAR print_args RPAR semicolon .)
    ELSE            reduce using rule 10 (print -> PRINT LPAR print_args RPAR semicolon .)


state 131

    (12) print_args -> print_args COMMA exp_logica .
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            reduce using rule 12 (print_args -> print_args COMMA exp_logica .)
    COMMA           reduce using rule 12 (print_args -> print_args COMMA exp_logica .)
    AND             shift and go to state 56
    OR              shift and go to state 57


state 132

    (11) println -> PRINTLN LPAR print_args RPAR semicolon .

    PRINT           reduce using rule 11 (println -> PRINTLN LPAR print_args RPAR semicolon .)
    PRINTLN         reduce using rule 11 (println -> PRINTLN LPAR print_args RPAR semicolon .)
    ID              reduce using rule 11 (println -> PRINTLN LPAR print_args RPAR semicolon .)
    WHILE           reduce using rule 11 (println -> PRINTLN LPAR print_args RPAR semicolon .)
    IF              reduce using rule 11 (println -> PRINTLN LPAR print_args RPAR semicolon .)
    $end            reduce using rule 11 (println -> PRINTLN LPAR print_args RPAR semicolon .)
    END             reduce using rule 11 (println -> PRINTLN LPAR print_args RPAR semicolon .)
    ELSE            reduce using rule 11 (println -> PRINTLN LPAR print_args RPAR semicolon .)


state 133

    (23) while -> WHILE exp_logica instrucciones END semicolon .

    PRINT           reduce using rule 23 (while -> WHILE exp_logica instrucciones END semicolon .)
    PRINTLN         reduce using rule 23 (while -> WHILE exp_logica instrucciones END semicolon .)
    ID              reduce using rule 23 (while -> WHILE exp_logica instrucciones END semicolon .)
    WHILE           reduce using rule 23 (while -> WHILE exp_logica instrucciones END semicolon .)
    IF              reduce using rule 23 (while -> WHILE exp_logica instrucciones END semicolon .)
    $end            reduce using rule 23 (while -> WHILE exp_logica instrucciones END semicolon .)
    END             reduce using rule 23 (while -> WHILE exp_logica instrucciones END semicolon .)
    ELSE            reduce using rule 23 (while -> WHILE exp_logica instrucciones END semicolon .)


state 134

    (55) exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .

    PLUS            reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    MINUS           reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    TIMES           reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    DIV             reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    MOD             reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    POT             reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    COLON           reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    LESS            reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    AND             reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    OR              reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    PRINT           reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    ID              reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    WHILE           reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    IF              reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    RPAR            reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    COMMA           reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    $end            reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    END             reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)
    ELSE            reduce using rule 55 (exp_aritmetica -> TYPEOF LPAR exp_logica RPAR .)


state 135

    (56) exp_aritmetica -> STRING LPAR exp_logica RPAR .

    PLUS            reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    MINUS           reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    TIMES           reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    DIV             reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    MOD             reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    POT             reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    COLON           reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    LESS            reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    AND             reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    OR              reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    PRINT           reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    ID              reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    WHILE           reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    IF              reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    RPAR            reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    COMMA           reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    $end            reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    END             reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)
    ELSE            reduce using rule 56 (exp_aritmetica -> STRING LPAR exp_logica RPAR .)


state 136

    (57) exp_aritmetica -> FLOAT LPAR exp_logica RPAR .

    PLUS            reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    MINUS           reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    TIMES           reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    DIV             reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    MOD             reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    POT             reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    COLON           reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    LESS            reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    AND             reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    OR              reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    PRINT           reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    ID              reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    WHILE           reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    IF              reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    RPAR            reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    COMMA           reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    $end            reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    END             reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)
    ELSE            reduce using rule 57 (exp_aritmetica -> FLOAT LPAR exp_logica RPAR .)


state 137

    (58) exp_aritmetica -> TRUNC LPAR data_type COMMA . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 149
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 138

    (59) exp_aritmetica -> PARSE LPAR data_type COMMA . exp_logica RPAR
    (28) exp_logica -> . exp_logica AND exp_logica
    (29) exp_logica -> . exp_logica OR exp_logica
    (30) exp_logica -> . NOT exp_logica
    (31) exp_logica -> . exp_relacional
    (32) exp_relacional -> . exp_relacional LESS exp_relacional
    (33) exp_relacional -> . exp_relacional LESSEQ exp_relacional
    (34) exp_relacional -> . exp_relacional GREATHER exp_relacional
    (35) exp_relacional -> . exp_relacional GREATHEREQ exp_relacional
    (36) exp_relacional -> . exp_relacional EQUALITY exp_relacional
    (37) exp_relacional -> . exp_relacional DIFERENT exp_relacional
    (38) exp_relacional -> . exp_aritmetica
    (39) exp_aritmetica -> . exp_aritmetica PLUS exp_aritmetica
    (40) exp_aritmetica -> . exp_aritmetica MINUS exp_aritmetica
    (41) exp_aritmetica -> . exp_aritmetica TIMES exp_aritmetica
    (42) exp_aritmetica -> . exp_aritmetica DIV exp_aritmetica
    (43) exp_aritmetica -> . exp_aritmetica MOD exp_aritmetica
    (44) exp_aritmetica -> . exp_aritmetica POT exp_aritmetica
    (45) exp_aritmetica -> . exp_aritmetica COLON exp_aritmetica
    (46) exp_aritmetica -> . MINUS exp_aritmetica
    (47) exp_aritmetica -> . LPAR exp_logica RPAR
    (48) exp_aritmetica -> . NUMERO
    (49) exp_aritmetica -> . DECIMAL
    (50) exp_aritmetica -> . CARACTER
    (51) exp_aritmetica -> . CADENA
    (52) exp_aritmetica -> . TRUE
    (53) exp_aritmetica -> . FALSE
    (54) exp_aritmetica -> . ID
    (55) exp_aritmetica -> . TYPEOF LPAR exp_logica RPAR
    (56) exp_aritmetica -> . STRING LPAR exp_logica RPAR
    (57) exp_aritmetica -> . FLOAT LPAR exp_logica RPAR
    (58) exp_aritmetica -> . TRUNC LPAR data_type COMMA exp_logica RPAR
    (59) exp_aritmetica -> . PARSE LPAR data_type COMMA exp_logica RPAR
    (60) exp_aritmetica -> . SIN LPAR exp_logica RPAR
    (61) exp_aritmetica -> . COS LPAR exp_logica RPAR
    (62) exp_aritmetica -> . TAN LPAR exp_logica RPAR
    (63) exp_aritmetica -> . LOG10 LPAR exp_logica RPAR
    (64) exp_aritmetica -> . SQRT LPAR exp_logica RPAR
    (65) exp_aritmetica -> . LENGTH LPAR exp_logica RPAR
    (66) exp_aritmetica -> . UPPERCASE LPAR exp_logica RPAR
    (67) exp_aritmetica -> . LOWERCASE LPAR exp_logica RPAR

    NOT             shift and go to state 22
    MINUS           shift and go to state 25
    LPAR            shift and go to state 26
    NUMERO          shift and go to state 27
    DECIMAL         shift and go to state 28
    CARACTER        shift and go to state 29
    CADENA          shift and go to state 30
    TRUE            shift and go to state 31
    FALSE           shift and go to state 32
    ID              shift and go to state 33
    TYPEOF          shift and go to state 34
    STRING          shift and go to state 35
    FLOAT           shift and go to state 36
    TRUNC           shift and go to state 37
    PARSE           shift and go to state 38
    SIN             shift and go to state 39
    COS             shift and go to state 40
    TAN             shift and go to state 41
    LOG10           shift and go to state 42
    SQRT            shift and go to state 43
    LENGTH          shift and go to state 44
    UPPERCASE       shift and go to state 45
    LOWERCASE       shift and go to state 46

    exp_logica                     shift and go to state 150
    exp_relacional                 shift and go to state 23
    exp_aritmetica                 shift and go to state 24

state 139

    (60) exp_aritmetica -> SIN LPAR exp_logica RPAR .

    PLUS            reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    MINUS           reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    TIMES           reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    DIV             reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    MOD             reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    POT             reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    COLON           reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    LESS            reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    AND             reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    OR              reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    PRINT           reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    ID              reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    WHILE           reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    IF              reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    RPAR            reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    COMMA           reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    $end            reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    END             reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)
    ELSE            reduce using rule 60 (exp_aritmetica -> SIN LPAR exp_logica RPAR .)


state 140

    (61) exp_aritmetica -> COS LPAR exp_logica RPAR .

    PLUS            reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    MINUS           reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    TIMES           reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    DIV             reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    MOD             reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    POT             reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    COLON           reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    LESS            reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    AND             reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    OR              reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    PRINT           reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    ID              reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    WHILE           reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    IF              reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    RPAR            reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    COMMA           reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    $end            reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    END             reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)
    ELSE            reduce using rule 61 (exp_aritmetica -> COS LPAR exp_logica RPAR .)


state 141

    (62) exp_aritmetica -> TAN LPAR exp_logica RPAR .

    PLUS            reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    MINUS           reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    TIMES           reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    DIV             reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    MOD             reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    POT             reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    COLON           reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    LESS            reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    AND             reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    OR              reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    PRINT           reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    ID              reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    WHILE           reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    IF              reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    RPAR            reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    COMMA           reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    $end            reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    END             reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)
    ELSE            reduce using rule 62 (exp_aritmetica -> TAN LPAR exp_logica RPAR .)


state 142

    (63) exp_aritmetica -> LOG10 LPAR exp_logica RPAR .

    PLUS            reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    MINUS           reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    TIMES           reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    DIV             reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    MOD             reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    POT             reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    COLON           reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    LESS            reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    AND             reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    OR              reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    PRINT           reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    ID              reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    WHILE           reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    IF              reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    RPAR            reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    COMMA           reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    $end            reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    END             reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)
    ELSE            reduce using rule 63 (exp_aritmetica -> LOG10 LPAR exp_logica RPAR .)


state 143

    (64) exp_aritmetica -> SQRT LPAR exp_logica RPAR .

    PLUS            reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    MINUS           reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    TIMES           reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    DIV             reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    MOD             reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    POT             reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    COLON           reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    LESS            reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    AND             reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    OR              reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    PRINT           reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    ID              reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    WHILE           reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    IF              reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    RPAR            reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    COMMA           reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    $end            reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    END             reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)
    ELSE            reduce using rule 64 (exp_aritmetica -> SQRT LPAR exp_logica RPAR .)


state 144

    (65) exp_aritmetica -> LENGTH LPAR exp_logica RPAR .

    PLUS            reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    MINUS           reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    TIMES           reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    DIV             reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    MOD             reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    POT             reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    COLON           reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    LESS            reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    AND             reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    OR              reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    PRINT           reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    ID              reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    WHILE           reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    IF              reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    RPAR            reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    COMMA           reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    $end            reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    END             reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)
    ELSE            reduce using rule 65 (exp_aritmetica -> LENGTH LPAR exp_logica RPAR .)


state 145

    (66) exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .

    PLUS            reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    MINUS           reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    TIMES           reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    DIV             reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    MOD             reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    POT             reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    COLON           reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    LESS            reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    AND             reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    OR              reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    PRINT           reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    ID              reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    WHILE           reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    IF              reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    RPAR            reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    COMMA           reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    $end            reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    END             reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)
    ELSE            reduce using rule 66 (exp_aritmetica -> UPPERCASE LPAR exp_logica RPAR .)


state 146

    (67) exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .

    PLUS            reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    MINUS           reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    TIMES           reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    DIV             reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    MOD             reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    POT             reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    COLON           reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    LESS            reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    LESSEQ          reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    GREATHER        reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    GREATHEREQ      reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    EQUALITY        reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    DIFERENT        reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    AND             reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    OR              reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    PRINT           reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    PRINTLN         reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    ID              reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    WHILE           reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    IF              reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    RPAR            reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    COMMA           reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    SEMICOL         reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    $end            reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    END             reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)
    ELSE            reduce using rule 67 (exp_aritmetica -> LOWERCASE LPAR exp_logica RPAR .)


state 147

    (24) if -> IF exp_logica instrucciones END semicolon .

    PRINT           reduce using rule 24 (if -> IF exp_logica instrucciones END semicolon .)
    PRINTLN         reduce using rule 24 (if -> IF exp_logica instrucciones END semicolon .)
    ID              reduce using rule 24 (if -> IF exp_logica instrucciones END semicolon .)
    WHILE           reduce using rule 24 (if -> IF exp_logica instrucciones END semicolon .)
    IF              reduce using rule 24 (if -> IF exp_logica instrucciones END semicolon .)
    $end            reduce using rule 24 (if -> IF exp_logica instrucciones END semicolon .)
    END             reduce using rule 24 (if -> IF exp_logica instrucciones END semicolon .)
    ELSE            reduce using rule 24 (if -> IF exp_logica instrucciones END semicolon .)


state 148

    (25) if_else -> IF exp_logica instrucciones ELSE instrucciones . END semicolon
    (2) instrucciones -> instrucciones . instruccion
    (4) instruccion -> . print
    (5) instruccion -> . println
    (6) instruccion -> . definicion
    (7) instruccion -> . while
    (8) instruccion -> . if
    (9) instruccion -> . if_else
    (10) print -> . PRINT LPAR print_args RPAR semicolon
    (11) println -> . PRINTLN LPAR print_args RPAR semicolon
    (14) definicion -> . ID asignacion semicolon
    (23) while -> . WHILE exp_logica instrucciones END semicolon
    (24) if -> . IF exp_logica instrucciones END semicolon
    (25) if_else -> . IF exp_logica instrucciones ELSE instrucciones END semicolon

    END             shift and go to state 151
    PRINT           shift and go to state 10
    PRINTLN         shift and go to state 11
    ID              shift and go to state 12
    WHILE           shift and go to state 13
    IF              shift and go to state 14

    instruccion                    shift and go to state 15
    print                          shift and go to state 4
    println                        shift and go to state 5
    definicion                     shift and go to state 6
    while                          shift and go to state 7
    if                             shift and go to state 8
    if_else                        shift and go to state 9

state 149

    (58) exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 152
    AND             shift and go to state 56
    OR              shift and go to state 57


state 150

    (59) exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica . RPAR
    (28) exp_logica -> exp_logica . AND exp_logica
    (29) exp_logica -> exp_logica . OR exp_logica

    RPAR            shift and go to state 153
    AND             shift and go to state 56
    OR              shift and go to state 57


state 151

    (25) if_else -> IF exp_logica instrucciones ELSE instrucciones END . semicolon
    (26) semicolon -> . SEMICOL
    (27) semicolon -> . empty
    (68) empty -> .

    SEMICOL         shift and go to state 52
    PRINT           reduce using rule 68 (empty -> .)
    PRINTLN         reduce using rule 68 (empty -> .)
    ID              reduce using rule 68 (empty -> .)
    WHILE           reduce using rule 68 (empty -> .)
    IF              reduce using rule 68 (empty -> .)
    $end            reduce using rule 68 (empty -> .)
    END             reduce using rule 68 (empty -> .)
    ELSE            reduce using rule 68 (empty -> .)

    semicolon                      shift and go to state 154
    empty                          shift and go to state 53

state 152

    (58) exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .

    PLUS            reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    MINUS           reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    TIMES           reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    DIV             reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    MOD             reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    POT             reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    COLON           reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    LESS            reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    LESSEQ          reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    GREATHER        reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    GREATHEREQ      reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    EQUALITY        reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    DIFERENT        reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    AND             reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    OR              reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    PRINT           reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    PRINTLN         reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    ID              reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    WHILE           reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    IF              reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    RPAR            reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    COMMA           reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    SEMICOL         reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    $end            reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    END             reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)
    ELSE            reduce using rule 58 (exp_aritmetica -> TRUNC LPAR data_type COMMA exp_logica RPAR .)


state 153

    (59) exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .

    PLUS            reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    MINUS           reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    TIMES           reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    DIV             reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    MOD             reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    POT             reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    COLON           reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    LESS            reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    LESSEQ          reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    GREATHER        reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    GREATHEREQ      reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    EQUALITY        reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    DIFERENT        reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    AND             reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    OR              reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    PRINT           reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    PRINTLN         reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    ID              reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    WHILE           reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    IF              reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    RPAR            reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    COMMA           reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    SEMICOL         reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    $end            reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    END             reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)
    ELSE            reduce using rule 59 (exp_aritmetica -> PARSE LPAR data_type COMMA exp_logica RPAR .)


state 154

    (25) if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon .

    PRINT           reduce using rule 25 (if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon .)
    PRINTLN         reduce using rule 25 (if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon .)
    ID              reduce using rule 25 (if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon .)
    WHILE           reduce using rule 25 (if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon .)
    IF              reduce using rule 25 (if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon .)
    $end            reduce using rule 25 (if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon .)
    END             reduce using rule 25 (if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon .)
    ELSE            reduce using rule 25 (if_else -> IF exp_logica instrucciones ELSE instrucciones END semicolon .)

